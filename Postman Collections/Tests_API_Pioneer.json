{
	"info": {
		"_postman_id": "6a491717-80a1-449f-ae05-5b4731e0416f",
		"name": "Financial Offer Core APIs - Policies",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Utils",
			"item": [
				{
					"name": "Generate Payloads",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0581c3d-5333-4444-ae1b-a540350af915",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "afb9b652-a33e-4d7e-830a-8a9aed21603f",
								"exec": [
									"pm.collectionVariables.set(\"ignore_collectionScript\", true);\r",
									"\r",
									"pm.collectionVariables.set('payloadEngine', JSON.stringify(\r",
									"    {\r",
									"        \"line\": 1,\r",
									"        \"startDate\": \"2023-03-24\",\r",
									"        \"endDate\": \"2023-03-24\",\r",
									"        \"engineType\": \"DELAY\",\r",
									"        \"engineStatus\": \"DRAFT\",\r",
									"        \"integrationChannels\": [\r",
									"            {\r",
									"                \"channelId\": 0\r",
									"            }\r",
									"        ],\r",
									"        \"paymentPlanCategories\": [\r",
									"            {\r",
									"                \"paymentPlanCategoryId\": 1\r",
									"            }\r",
									"        ],\r",
									"        \"engineCriteria\": {\r",
									"            \"promoName\": \"string\",\r",
									"            \"personType\": \"PF\",\r",
									"            \"saleTypes\": [\r",
									"                {\r",
									"                    \"saleTypeId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"saleSubtypes\": [\r",
									"                {\r",
									"                    \"saleSubTypeId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"financialBrands\": [\r",
									"                {\r",
									"                    \"financialBrandId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"callCondition\": true,\r",
									"            \"rateType\": \"FIXED\",\r",
									"            \"factorySubsidy\": true,\r",
									"            \"vendorSubsidy\": true,\r",
									"            \"thirdPartiesSubsidy\": true,\r",
									"            \"remunerations\": [\r",
									"                {\r",
									"                    \"remunerationId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"delays\": [\r",
									"                0\r",
									"            ],\r",
									"            \"commissions\": [\r",
									"                {\r",
									"                    \"commissionId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"minDownPaymentPercent\": 0.9999,\r",
									"            \"maxDownPaymentPercent\": 0.9999,\r",
									"            \"minLoanAmount\": 999999999.99,\r",
									"            \"maxLoanAmount\": 999999999.99,\r",
									"            \"minModelRate\": 1,\r",
									"            \"maxModelRate\": 99,\r",
									"            \"min6Or7CpfDigits\": 1,\r",
									"            \"max6Or7CpfDigits\": 99,\r",
									"            \"minTerm\": 99,\r",
									"            \"maxTerm\": 99,\r",
									"            \"minVehiclePrice\": 999999999.99,\r",
									"            \"maxVehiclePrice\": 999999999.99,\r",
									"            \"minManufactoryVehicleAge\": 20,\r",
									"            \"maxManufactoryVehicleAge\": 23,\r",
									"            \"minModelVehicleAge\": 20,\r",
									"            \"maxModelVehicleAge\": 23,\r",
									"            \"maxProposalValidity\": 99,\r",
									"            \"provinces\": [\r",
									"                {\r",
									"                    \"provinceId\": 123\r",
									"                }\r",
									"            ],\r",
									"            \"ratingsAbc\": [\r",
									"                {\r",
									"                    \"ratingAbc\": \"AA\"\r",
									"                }\r",
									"            ],\r",
									"            \"regionals\": [\r",
									"                {\r",
									"                    \"regionalId\": 123\r",
									"                }\r",
									"            ],\r",
									"            \"dealerships\": [\r",
									"                {\r",
									"                    \"filterCategory\": \"ELEGIBLE\",\r",
									"                    \"dealershipBondType\": \"DEALERSHIP\",\r",
									"                    \"dealershipId\": 1,\r",
									"                    \"dealershipGroupId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"vehicles\": [\r",
									"                {\r",
									"                    \"filterCategory\": \"ELEGIBLE\",\r",
									"                    \"brandId\": 0,\r",
									"                    \"modelId\": 0,\r",
									"                    \"versionId\": 0,\r",
									"                    \"situation\": \"NEW\"\r",
									"                }\r",
									"            ],\r",
									"            \"serviceProducts\": [\r",
									"                {\r",
									"                    \"productId\": 0,\r",
									"                    \"subProductId\": 0,\r",
									"                    \"periodInMonths\": 24,\r",
									"                    \"kilometrage\": 0\r",
									"                }\r",
									"            ],\r",
									"            \"insuranceProducts\": [\r",
									"                {\r",
									"                    \"productId\": 0,\r",
									"                    \"subProductId\": 0,\r",
									"                    \"periodInMonths\": 24\r",
									"                }\r",
									"            ],\r",
									"            \"renovaction\": true,\r",
									"            \"customers\": [\r",
									"                {\r",
									"                    \"cpfCnpj\": \"121.412.112-01\",\r",
									"                    \"origin\": \"file\"\r",
									"                }\r",
									"            ],\r",
									"            \"classifiers\": [\r",
									"                {\r",
									"                    \"classifierId\": 1\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"engineReturns\": {\r",
									"            \"terms\": [\r",
									"                0\r",
									"            ],\r",
									"            \"delays\": [\r",
									"                0\r",
									"            ],\r",
									"            \"commissions\": [\r",
									"                {\r",
									"                    \"commissionId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"remunerations\": [\r",
									"                {\r",
									"                    \"remunerationId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"minMonthlyBankRatePercent\": 0.9999,\r",
									"            \"maxMonthlyClientRatePercent\": 0.9999,\r",
									"            \"increaseDecreasePercent\": 0.9999,\r",
									"            \"paymentPlanCategory\": 1,\r",
									"            \"paymentPlans\": [\r",
									"                {\r",
									"                    \"paymentPlanName\": \"Safra 1\",\r",
									"                    \"downPayment\": \"PERCENT\",\r",
									"                    \"minDownPayment\": 0.9999,\r",
									"                    \"maxDownPayment\": 0.9999,\r",
									"                    \"defaultDownPayment\": 0.9999,\r",
									"                    \"occurrencies\": true,\r",
									"                    \"occurrenceType\": \"INSTALLMENT_OCCURRENCIES\",\r",
									"                    \"installmentOccurrencies\": [\r",
									"                        5\r",
									"                    ],\r",
									"                    \"monthOccurrencies\": [\r",
									"                        \"Janeiro\"\r",
									"                    ],\r",
									"                    \"frequencyOccurrencies\": 12,\r",
									"                    \"reducedInstallmentAmount\": 999999999.99,\r",
									"                    \"installmentOccurrency\": \"PERCENT\",\r",
									"                    \"minFixedPayment\": 0.9999,\r",
									"                    \"maxFixedPayment\": 0.9999,\r",
									"                    \"defaultFixedPayment\": 0.9999,\r",
									"                    \"balloonPayment\": true,\r",
									"                    \"balloonPaymentType\": \"PERCENT\",\r",
									"                    \"minBalloonPayment\": 0.9999,\r",
									"                    \"maxBalloonPayment\": 0.9999,\r",
									"                    \"defaultBalloonPayment\": 0.9999,\r",
									"                    \"increaseDecreaseInstallment\": true,\r",
									"                    \"installmentType\": \"INCREASE\",\r",
									"                    \"increaseDecreaseinstallmentPercent\": 0.9999\r",
									"                }\r",
									"            ],\r",
									"            \"vme\": {\r",
									"                \"vmeReturnType\": \"PERCENT\",\r",
									"                \"factorySubsidy\": 0.9999,\r",
									"                \"vendorSubsidy\": 0.9999,\r",
									"                \"thirdPartySubsidy\": 0.9999\r",
									"            },\r",
									"            \"cdd\": [\r",
									"                {\r",
									"                    \"bonus\": \"Bonus Plus\",\r",
									"                    \"percent\": 0.9999\r",
									"                }\r",
									"            ],\r",
									"            \"rbpMarginPercent\": 0.9999,\r",
									"            \"minRbpFeePercent\": 0.9999,\r",
									"            \"marketing\": {\r",
									"                \"businessActionAmount\": 999999999.99,\r",
									"                \"businessActionPercent\": 0.9999,\r",
									"                \"contractCostAmount\": 999999999.99,\r",
									"                \"fundingCostPercent\": 0.9999,\r",
									"                \"operationAveragePercent\": 0.9999,\r",
									"                \"registrationFeeAmount\": 999999999.99\r",
									"            },\r",
									"            \"riskRatePercent\": 0.9999,\r",
									"            \"fixedRates\": [\r",
									"                {\r",
									"                    \"term\": 0,\r",
									"                    \"delay\": 0,\r",
									"                    \"callCondition\": true,\r",
									"                    \"downPaymentType\": \"PERCENT\",\r",
									"                    \"minDownPayment\": 0.9999,\r",
									"                    \"maxDownPayment\": 0.9999,\r",
									"                    \"balloonPayment\": true,\r",
									"                    \"balloonPaymentType\": \"PERCENT\",\r",
									"                    \"minBalloonPayment\": 0.9999,\r",
									"                    \"maxBalloonPayment\": 0.9999,\r",
									"                    \"occurrences\": true,\r",
									"                    \"occurrenceType\": \"INSTALLMENT_OCCURRENCIES\",\r",
									"                    \"installmentsForOccurrency\": [\r",
									"                        99\r",
									"                    ],\r",
									"                    \"monthsOfOccurrency\": [\r",
									"                        12\r",
									"                    ],\r",
									"                    \"periodicityOfOccurrency\": 12,\r",
									"                    \"reducedInstallmentAmount\": 12,\r",
									"                    \"installmentOccurrency\": \"PERCENT\",\r",
									"                    \"minInstallmentOccurrence\": 0.9999,\r",
									"                    \"maxInstallmentOccurrence\": 0.9999,\r",
									"                    \"descendingIncreasingParcel\": true,\r",
									"                    \"installmentType\": \"INCREASE\",\r",
									"                    \"increaseDecreasePlanPercent\": 0.9999,\r",
									"                    \"monthlyBankRate\": 0.9999,\r",
									"                    \"monthlyClientRate\": 0.9999,\r",
									"                    \"subsidyType\": \"PERCENT\",\r",
									"                    \"factorySubsidy\": 0.9999,\r",
									"                    \"vendorSubsidy\": 0.9999,\r",
									"                    \"thirdPartySubsidy\": 0.9999,\r",
									"                    \"total\": 0.9999,\r",
									"                    \"bankRate\": 0.9999,\r",
									"                    \"clientRate\": 0.9999\r",
									"                }\r",
									"            ],\r",
									"            \"promotions\": [\r",
									"                {\r",
									"                    \"couponPrefix\": \"string\",\r",
									"                    \"discountPercentage\": 0.9999,\r",
									"                    \"numberCoupons\": 0\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"))\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7244f97f-3b8b-487e-bf1a-528b0d2a9ce0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"32458031099\",\r\n    \"password\": \"Blade@123\",\r\n    \"remember\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/core/authentication/v1/login"
					},
					"response": []
				}
			],
			"id": "a21067f2-f95d-4542-aa8e-0817adaa78a0"
		},
		{
			"name": "POST by Panels",
			"item": [
				{
					"name": "Done",
					"item": [
						{
							"name": "Check identifierPanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa660eb4-3ae1-482f-af9b-b3f732350bec",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
											"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
											"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"const moment = require('moment')\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating identifierPanel.engineType */\r",
											"var tc_fieldEngineType = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldEngineType'))\r",
											"/* tc_fieldEngineType = ['inexistent', 'number', 'only_space', 'empty', 'no_engineType', 'engineTypeNull', 'multiplesOptions'] */\r",
											"switch (tc_fieldEngineType[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineType\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for engineType number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineType\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for engineType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineType\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_engineType':\r",
											"        delete payloadEngine.engineType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineType\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineType\", ['Delay', 'CDD'])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - EngineType');\r",
											"        break;\r",
											"}\r",
											"\r",
											"var tc_attributeEngineStatus = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_attributeEngineStatus'))\r",
											"/* tc_atributeEngineStatus = ['inexistent', 'number', 'only_space', 'empty', 'no_engineStatus', 'engineStatusNull', 'multiplesOptions']; */\r",
											"switch (tc_attributeEngineStatus[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for engineStatus number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for engineStatus with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_engineType':\r",
											"        delete payloadEngine.engineStatus\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", ['DRAFT', 'REMOVAL_REJECTED'])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difDraft':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", 'INCLUSION_REQUESTED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status INCLUSION_REQUESTED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        }),\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: changeOneFields(payloadEngine, \"engineStatus\", 'INCLUSION_APPROVED')\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for create engine with status INCLUSION_APPROVED', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", 'INCLUSION_REJECTED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status INCLUSION_REJECTED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", 'REMOVAL_REJECTED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status REMOVAL_REJECTED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", 'REMOVAL_APPROVED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status REMOVAL_APPROVED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engineStatus\", 'REMOVAL_REQUESTED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status REMOVAL_REQUESTED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - EngineStatus');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.line */\r",
											"var tc_fieldLine = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldLine'))\r",
											"/* tc_fieldLine = ['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_line', 'lineNull', 'bigNumber'] */\r",
											"switch (tc_fieldLine[i]) {\r",
											"    case 'floatNumber':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(2)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"line\", parseFloat(floatNumber))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for float number line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        let negativeNumber = -_.random(0, 100)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"line\", negativeNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"line\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"line\", 0)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for line = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"line\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for line with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"line\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_line':\r",
											"        delete payloadEngine.line\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'lineNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"line\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'bigNumber':\r",
											"        let bigNumber = _.random(1000000000000000, 1000000000000000000000)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"line\", bigNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for line big number', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - Line');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.startDate */\r",
											"var tc_fieldStartDate = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldStartDate'))\r",
											"/* tc_fieldStartDate = ['inexistentDate', 'alphanumeric', 'wrongAmountCharacters', 'number', 'only_space', 'emptyDate', 'no_startDate', 'startDateNull', 'startDateBiggerThenEndDate']*/\r",
											"switch (tc_fieldStartDate[i]) {\r",
											"    case 'inexistentDate':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"startDate\", \"2023-01-32\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'alphanumeric':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"startDate\", \"AAAA-01-31\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for alphanumeric startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'wrongAmountCharacters':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"startDate\", \"23-01-31\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for startDate with wrong Amount Characters', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"startDate\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for startDate number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"startDate\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for startDate only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'emptyDate':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"startDate\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_startDate':\r",
											"        delete payloadEngine.startDate\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'startDateNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"startDate\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'startDateBiggerThenEndDate':\r",
											"        let pastDate = moment(pm.variables.replaceIn('{{$randomDatePast}}')).format('YYYY-MM-DD')\r",
											"        let futureDate = moment(pm.variables.replaceIn('{{$randomDateFuture}}')).format('YYYY-MM-DD')\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeMoreFields(payloadEngine, [{ \"startDate\": futureDate }, { \"endDate\": pastDate }])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for startDate Bigger Then endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - startDate');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.endDate */\r",
											"var tc_fieldEndDate = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldEndDate'))\r",
											"/* tc_fieldEndDate = ['inexistentDate', 'alphanumeric', 'wrongAmountCharacters', 'spaceBetweenNumbers', 'number', 'only_space', 'emptyDate', 'no_endDate', 'endDateNull', 'endDateLessThenStartDate']*/\r",
											"switch (tc_fieldEndDate[i]) {\r",
											"    case 'inexistentDate':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"endDate\", \"2023-01-32\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'alphanumeric':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"endDate\", \"AAAA-01-31\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for alphanumeric endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'wrongAmountCharacters':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"endDate\", \"23-01-31\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for endDate with wrong Amount Characters', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"endDate\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for endDate number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"endDate\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for endDate only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'emptyDate':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"endDate\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_endDate':\r",
											"        delete payloadEngine.endDate\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'endDateNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"endDate\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'endDateLessThenStartDate':\r",
											"        let pastDate = moment(pm.variables.replaceIn('{{$randomDatePast}}')).format('YYYY-MM-DD')\r",
											"        let futureDate = moment(pm.variables.replaceIn('{{$randomDateFuture}}')).format('YYYY-MM-DD')\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeMoreFields(payloadEngine, [{ \"startDate\": futureDate }, { \"endDate\": pastDate }])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for endDate Less Then startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - endDate');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.paymentPlanCategory */\r",
											"var tc_fieldPaymentPlanCategory = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldPaymentPlanCategory'))\r",
											"/* tc_fieldPaymentPlanCategory = ['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_paymentPlanCategory', 'paymentPlanCategoryNull', 'engineVME', 'difEngineVME', 'multiplesOptions']*/\r",
											"switch (tc_fieldPaymentPlanCategory[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategory = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent paymentPlanCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategoryId = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for paymentPlanCategories number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategoryId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for paymentPlanCategories only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategoryId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty paymentPlanCategories', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_paymentPlanCategory':\r",
											"        delete payloadEngine.paymentPlanCategories\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_paymentPlanCategories', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'paymentPlanCategoryNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategoryId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for null paymentPlanCategories', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineVME':\r",
											"        /* Consulting existent names */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/paymentPlanCategory',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            /* Get a random object inside response and filter by name */\r",
											"            let name = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: changeMoreFields(payloadEngine, [{ \"engineType\": \"VME\" }, { \"paymentPlanCategories\": [{ \"paymentPlanCategoryId\": name }] }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for paymentPlanCategories with VME engine', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        /* Consulting existent names */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/paymentPlanCategory',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            /* Get a random object inside response and filter by name */\r",
											"            let name = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: changeMoreFields(payloadEngine, [{ \"engineType\": \"CDD\" }, { \"paymentPlanCategories\": [{ \"paymentPlanCategoryId\": name }] }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 201 for paymentPlanCategories with different VME engine', () => {\r",
											"                    pm.expect(res).to.be.equal(201);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        /* Consulting actives ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/paymentPlanCategory?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let name1 = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"            let name2 = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: changeMoreFields(payloadEngine, [{ \"paymentPlanCategories\": [{ \"paymentPlanCategoryId\": name1 }, { \"paymentPlanCategoryId\": name2 }] }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for multiples paymentPlanCategories', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - paymentPlanCategory');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.rateType */\r",
											"var tc_fieldRateType = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldRateType'))\r",
											"/* tc_fieldRateType = ['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_rateType', 'rateTypeNull', 'engineVME', 'difEngineVME', 'multiplesOptions'] */\r",
											"switch (tc_fieldRateType[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"rateType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent rateType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"rateType\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rateType number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"rateType\", \"@&~^*_+-./%!()\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rateType with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"rateType\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rateType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"rateType\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty rateType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_rateType':\r",
											"        delete payloadEngine.engineCriteria.rateType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_rateType', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'rateTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"rateType\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for rateType null', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineVME':\r",
											"        changeOneFields(payloadEngine, \"engineType\", \"VME\")\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.rateType = 'DYNAMIC'\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldRateType with VME engine', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        changeOneFields(payloadEngine, \"engineType\", \"CDD\")\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.rateType = 'DYNAMIC'\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for rateType with engine different VME', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"rateType\", [\"DINAMIC\", \"FIXED\"])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rateType with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - rateType');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.callCondition */\r",
											"var tc_fieldCallCondition = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldCallCondition'))\r",
											"/* tc_fieldCallCondition = ['string', 'number', 'specialCharacter', 'only_space', 'empty', 'no_callCondition', 'callConditionNull', 'engineVME', 'difEngineVME']*/\r",
											"switch (tc_fieldCallCondition[i]) {\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"callCondition\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"callCondition\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"callCondition\", \"@&~^*_+-./%!()\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"callCondition\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"callCondition\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty callCondition', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_callCondition':\r",
											"        delete payloadEngine.engineCriteria.callCondition\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_callCondition', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'callConditionNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeSubFields(payloadEngine, \"engineCriteria\", \"callCondition\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for callCondition null', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineVME':\r",
											"        changeOneFields(payloadEngine, \"engineType\", \"VME\")\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.callCondition = true\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition with VME engine', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        changeOneFields(payloadEngine, \"engineType\", \"RISK\")\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.callCondition = false\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for callCondition with engine different VME', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.integrationChannelIds */\r",
											"var tc_fieldIntegrationChannel = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldIntegrationChannel'))\r",
											"/* tc_fieldIntegrationChannel = ['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', ' inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions']*/\r",
											"switch (tc_fieldIntegrationChannel[i]) {\r",
											"    case 'inexistentId':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/integrationChannel',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            let inexistentId = eval(pm.globals.get('generateRandomNumberWithout'))(id)\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: payloadEngine.integrationChannels[0].channelId = inexistentId\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inexistentId integrationChannel', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for integrationChannel string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = \"@&~^*_+-./%!()\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for integrationChannel with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for integrationChannel with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty integrationChannel', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_integrationChannel':\r",
											"        delete payloadEngine.integrationChannels\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_integrationChannel', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'integrationChannelNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for integrationChannel null', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/integrationChannel?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: payloadEngine.integrationChannels[0].channelId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive integrationChannel', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/integrationChannel',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: changeMoreFields(payloadEngine, [{\r",
											"                    \"integrationChannels\": [\r",
											"                        {\r",
											"                            \"channelId\": id\r",
											"                        },\r",
											"                        {\r",
											"                            \"channelId\": id\r",
											"                        }\r",
											"                    ]\r",
											"                }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated integrationChannel', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/integrationChannel',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id1 = resGet.json()[0].id\r",
											"            let id2 = resGet.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: changeMoreFields(payloadEngine, [{\r",
											"                    \"integrationChannels\": [\r",
											"                        {\r",
											"                            \"channelId\": id1\r",
											"                        },\r",
											"                        {\r",
											"                            \"channelId\": id2\r",
											"                        }\r",
											"                    ]\r",
											"                }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 201 for multiples integrationChannel', () => {\r",
											"                    pm.expect(res).to.be.equal(201);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - integrationChannel');\r",
											"        break;\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "386d2b28-3589-480f-b76e-1e64dae431c1",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field engineType */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldEngineType', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_engineType', 'engineTypeNull', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: attribute engineStatus */\r",
											"pm.collectionVariables.set('tc_identifierPainel_attributeEngineStatus', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_engineStatus', 'engineStatusNull', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: FieldLine */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldLine', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_line', 'lineNull', 'bigNumber']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field startDate */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldStartDate', JSON.stringify(['inexistentDate', 'alphanumeric', 'wrongAmountCharacters', 'number', 'only_space', 'emptyDate', 'no_startDate', 'startDateNull', 'startDateBiggerThenEndDate']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field endDate */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldEndDate', JSON.stringify(['inexistentDate', 'emptyDate', 'alphanumeric', 'wrongAmountCharacters', 'number', 'only_space', 'empty', 'no_endDate', 'endDateNull', 'endDateLessThenStartDate']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field paymentPlanCategoryIds */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldPaymentPlanCategory', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_paymentPlanCategory', 'paymentPlanCategoryNull', 'engineVME', 'difEngineVME', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field rateType */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldRateType', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_rateType', 'rateTypeNull', 'engineVME', 'difEngineVME', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field callCondition */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldCallCondition', JSON.stringify(['string', 'number', 'specialCharacter', 'only_space', 'empty', 'no_callCondition', 'callConditionNull', 'engineVME', 'difEngineVME']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field integrationChannelIds */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldIntegrationChannelIds', JSON.stringify(['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cd61f682-c69f-4c36-a415-31d880e6882f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/* Valid Payload to create an engine: DELAY, PAYMENT_PLAN_CATEGORY, CDD, INCREASE_DECREASE, RBP_MARGIN, MARKETING, PAYMENT_PLAN, TERM, REMUNERATION, RETURN, RISK, MINIMUM_BANK_RATE, MAX_CLIENT_RATE, MINIMUM_RBP_RATE, VME, FIXED_RATES, PROMOTIONS */\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						}
					],
					"id": "c5e97f08-f756-40b2-95dc-c569bbcbb0eb"
				},
				{
					"name": "Doing",
					"item": [
						{
							"name": "Check generalCriteriaPanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a21825d7-d231-4f4c-8dab-2db3d43fced8",
										"exec": [
											"/* Importing variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
											"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
											"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"var lodash = require('lodash')\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* 1 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldPersonType = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldPersonType'))\r",
											"/*(['inexistent', 'number', 'only_space', 'empty', 'no_PersonType', 'PersonTypeNull']));*/\r",
											"\r",
											"switch (tc_fieldPersonType[i]) {\r",
											"    case 'inexistent':\r",
											"            pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"PersonType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent PersonType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"            pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"PersonType\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for PersonType number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"    pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"PersonType\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for PersonType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"    pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"PersonType\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty PersonType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_PersonType':\r",
											"\r",
											"    case 'PersonTypeNull':\r",
											"\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - PersonType');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  Validating GeneralCriteriaPanel.fieldSaleTypes */\r",
											"var tc_fieldSaleTypes = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldSaleTypes'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_saleTypes', 'saleTypesNull', 'multiplesOptions'*/\r",
											"\r",
											"switch (tc_fieldSaleTypes[i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_saleTypes':\r",
											"\r",
											"    case 'saleTypesNull':\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - EngineType');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 2 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldSaleSubtypes = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldSaleSubtypes'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_SalesSubtype', 'SalesSubtypeNull', 'multiplesOptions'*/\r",
											"\r",
											"switch (tc_fieldSaleSubtypes[i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_SalesSubtype':\r",
											"\r",
											"    case 'SalesSubtypeNull':\r",
											"\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - SalesSubtype');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 3 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldFinancialBrands = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldFinancialBrands'))\r",
											"/*inexistent', 'number', 'only_space', 'empty', 'no_FinancialBrands', 'FinancialBrandsNull', 'multiplesOptions*/\r",
											"\r",
											"switch (tc_fieldFinancialBrands[i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_FinancialBrands':\r",
											"\r",
											"    case 'FinancialBrandsNull':\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - FinancialBrands');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 4 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldFactorySubsidy = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldFactorySubsidy'))\r",
											"/*inexistent', 'number', 'only_space', 'empty', 'no_FactorySubsidy', 'FactorySubsidyNull*/\r",
											"\r",
											"switch (tc_fieldFactorySubsidy[i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_FactorySubsidy':\r",
											"\r",
											"    case 'FactorySubsidyNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - FactorySubsidy');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 5 Validating GeneralCriteriaPanel.fieldVendorSubsidy */\r",
											"var tc_fieldVendorSubsidy = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldVendorSubsidy'))\r",
											"/*inexistent', 'number', 'only_space', 'empty', 'no_VendorSubsidy', 'VendorSubsidyNull'*/\r",
											"\r",
											"switch (tc_fieldVendorSubsidy[i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_VendorSubsidy':\r",
											"\r",
											"    case 'VendorSubsidyNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - VendorSubsidy');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 6 Validating GeneralCriteriaPanel.fieldThirdPartiesSubsidy */\r",
											"var tc_fieldThirdPartiesSubsidy= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldThirdPartiesSubsidy'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_ThirdPartiesSubsidy', 'ThirdPartiesSubsidyNull', */\r",
											"\r",
											"switch (tc_fieldThirdPartiesSubsidy[i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_ThirdPartiesSubsidy':\r",
											"\r",
											"    case 'ThirdPartiesSubsidyNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - ThirdPartiesSubsidy');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 7 Validating GeneralCriteriaPanel.fieldRemunerations */\r",
											"var tc_fieldRemunerations= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldRemunerations'))\r",
											"/*difEngineRemunerations','inexistent', 'number', 'only_space', 'empty', 'no_Remunerations', 'RemunerationsNull', 'engineRemunerations', 'multiplesOptions' */\r",
											"\r",
											"switch (tc_fieldRemunerations[i]) {\r",
											"    case 'difEngineRemunerations':\r",
											"    \r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_Remunerations':\r",
											"\r",
											"    case 'RemunerationsNull':\r",
											"\r",
											"    case 'engineRemunerations':\r",
											"\r",
											"    case 'multiplesOptions' :\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - Remunerations');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 8 Validating GeneralCriteriaPanel.fieldLack */\r",
											"var tc_fieldLack= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldLack'))\r",
											"/*'difEngineLack' , inexistent', 'number', 'only_space', 'empty', 'no_Lack', 'LackNull', 'engineLack', 'multiplesOptions' */\r",
											"\r",
											"switch (tc_fieldLack[i]) {\r",
											"    case 'difEngineLack':\r",
											"    \r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_Lack':\r",
											"\r",
											"    case 'LackNull':\r",
											"\r",
											"    case 'engineLack':\r",
											"\r",
											"    case 'multiplesOptions' :\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - Lack');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 9 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldMinDownPaymentPercent= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinDownPaymentPercent'))\r",
											"/*'floatNumber_4digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MinDownPaymentPercent', 'MinDownPaymentPercentNull', 'bigNumber', 'MaxDownPaymentPercent_obligatory' */\r",
											"\r",
											"switch (tc_fieldMinDownPaymentPercent[i]) {\r",
											"    case 'floatNumber_4digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_MinDownPaymentPercent':\r",
											"\r",
											"    case 'MinDownPaymentPercentNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'MaxDownPaymentPercent_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - MinDownPaymentPercent');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 10 Validating GeneralCriteriaPanel.fieldMaxDownPaymentPercent */\r",
											"var tc_fieldMaxDownPaymentPercent= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxDownPaymentPercent'))\r",
											"/*'floatNumber_4digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MaxDownPaymentPercent', 'MaxDownPaymentPercentNull', 'bigNumber', 'minDownPaymentPercent_obligatory' */\r",
											"\r",
											"switch (tc_fieldMaxDownPaymentPercent[i]) {\r",
											"    case 'floatNumber_4digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_MaxDownPaymentPercent':\r",
											"\r",
											"    case 'MaxDownPaymentPercentNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minDownPaymentPercent_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - MaxDownPaymentPercent');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 11 Validating GeneralCriteriaPanel.fieldMinLoanAmount */\r",
											"var tc_fieldMinLoanAmount= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinLoanAmount'))\r",
											"/*floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MinLoanAmount', 'MinLoanAmountNull', 'bigNumber',  'MinLoanAmount_obligatory' */\r",
											"\r",
											"switch (tc_fieldMinLoanAmount[i]) {\r",
											"    case 'floatNumber_11digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_MinLoanAmount':\r",
											"\r",
											"    case 'MinLoanAmountNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'MinLoanAmount_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - MinLoanAmount');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 12 Validating GeneralCriteriaPanel.fieldMaxLoanAmount */\r",
											"var tc_fieldMaxLoanAmount= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxLoanAmount'))\r",
											"/*'floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MaxLoanAmount', 'MaxLoanAmountNull', 'bigNumber', 'MaxLoanAmount_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxLoanAmount[i]) {\r",
											"    case 'floatNumber_11digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_MaxLoanAmount':\r",
											"\r",
											"    case 'MaxLoanAmountNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'MaxLoanAmount_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - MaxLoanAmount');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  13 Validating GeneralCriteriaPanel.fieldminModelRate */\r",
											"var tc_fieldMinModelRate= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinModelRate'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minModelRate', 'minModelRateNull', 'bigNumber', 'minModelRate_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinModelRate [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minModelRate':\r",
											"\r",
											"    case 'minModelRateNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minModelRate_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelRate');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  14 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_generalCriteriaPanel_fieldMaxModelRate= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_tc_generalCriteriaPanel_fieldMaxModelRate'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxModelRate', 'maxModelRateNull', 'bigNumber', 'maxModelRate_obligatory'*/\r",
											"\r",
											"switch (tc_generalCriteriaPanel_fieldMaxModelRate [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxModelRate':\r",
											"\r",
											"    case 'maxModelRateNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxModelRate_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxModelRate');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  15 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldMin6Or7CpfDigits= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMin6Or7CpfDigits'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_min6Or7CpfDigits', 'min6Or7CpfDigitsNull', 'bigNumber', 'min6Or7CpfDigits_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMin6Or7CpfDigits [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_min6Or7CpfDigits':\r",
											"\r",
											"    case 'min6Or7CpfDigitsNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'min6Or7CpfDigits_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - min6Or7CpfDigits');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  16 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldMax6Or7CpfDigits= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMax6Or7CpfDigits'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_max6Or7CpfDigits', 'max6Or7CpfDigitsNull', 'bigNumber', 'max6Or7CpfDigits_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMax6Or7CpfDigits [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_max6Or7CpfDigits':\r",
											"\r",
											"    case 'max6Or7CpfDigitsNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'max6Or7CpfDigits_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - max6Or7CpfDigits');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 17 Validating GeneralCriteriaPanel.fieldminTerm */\r",
											"var tc_fieldMinTerm= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinTerm'))\r",
											"/*'enginePrazo' , 'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minTerm', 'minTermNull', 'bigNumber', 'minTerm_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinTerm [i]) {\r",
											"    case 'enginePrazo':    \r",
											"    \r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minTerm':\r",
											"\r",
											"    case 'minTermNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minTerm_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minTerm');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  18 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldMaxTerm= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxTerm'))\r",
											"/*'enginePrazo' , 'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxTerm', 'maxTermNull', 'bigNumber', 'maxTerm_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxTerm [i]) {\r",
											"    case 'enginePrazo':\r",
											"\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxTerm':\r",
											"\r",
											"    case 'maxTermNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxTerm_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxTerm');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  19 Validating GeneralCriteriaPanel.fieldminVehiclePrice */\r",
											"var tc_fieldMinVehiclePrice= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinVehiclePrice'))\r",
											"/*(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minVehiclePrice', 'minVehiclePriceNull', 'bigNumber', 'minVehiclePrice_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinVehiclePrice [i]) {\r",
											"    case 'floatNumber_11digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minVehiclePrice':\r",
											"\r",
											"    case 'minVehiclePriceNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minVehiclePrice_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minVehiclePrice');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 20 Validating GeneralCriteriaPanel.fieldmaxVehiclePrice_obligatory */\r",
											"var tc_fieldMaxVehiclePrice= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxVehiclePrice'))\r",
											"/*'floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxVehiclePrice', 'maxVehiclePriceNull', 'bigNumber', 'maxVehiclePrice_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxVehiclePrice [i]) {\r",
											"    case 'floatNumber_11digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxVehiclePrice':\r",
											"\r",
											"    case 'maxVehiclePriceNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxVehiclePrice_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxVehiclePrice');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  21 Validating GeneralCriteriaPanel.fieldminManufactoryVehicleAge */\r",
											"var tc_fieldMinManufactoryVehicleAges= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinManufactoryVehicleAges'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minManufactoryVehicleAge', 'minManufactoryVehicleAgeNull', 'bigNumber', 'minManufactoryVehicleAge_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinManufactoryVehicleAges [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minManufactoryVehicleAge':\r",
											"\r",
											"    case 'minManufactoryVehicleAgeNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minManufactoryVehicleAge_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minManufactoryVehicleAge');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 22 Validating GeneralCriteriaPanel.fieldManufactoryVehicleAge */\r",
											"var tc_fieldManufactoryVehicleAge= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldManufactoryVehicleAge'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxManufactoryVehicleAge', 'maxManufactoryVehicleAgeNull', 'bigNumber', 'maxManufactoryVehicleAge_obligatory'*/\r",
											"\r",
											"switch (tc_fieldManufactoryVehicleAge [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxManufactoryVehicleAge':\r",
											"\r",
											"    case 'maxManufactoryVehicleAgeNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxManufactoryVehicleAge':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxManufactoryVehicleAge');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 23 Validating GeneralCriteriaPanel.fieldMinModelVehicleAge */\r",
											"var tc_fieldMinModelVehicleAge= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinModelVehicleAge'))\r",
											"/*''number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minModelVehicleAge', 'minModelVehicleAgeNull', 'bigNumber', 'minModelVehicleAge_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinModelVehicleAge [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minModelVehicleAge':\r",
											"\r",
											"    case 'minModelVehicleAgeNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minModelVehicleAge_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelVehicleAge');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 24 Validating GeneralCriteriaPanel.fieldmaxModelVehicleAge_obligatory' */\r",
											"var tc_fieldMaxModelVehicleAge = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxModelVehicleAge'))\r",
											"/*['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxModelVehicleAge', 'maxModelVehicleAgeNull', 'bigNumber', 'maxModelVehicleAge_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxModelVehicleAge[i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxModelVehicleAge':\r",
											"\r",
											"    case 'maxModelVehicleAgeNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxModelVehicleAge_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxModelVehicleAge');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 25 Validating GeneralCriteriaPanel.fieldmaxProposalValidity */\r",
											"var tc_fieldMaxProposalValidity= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxProposalValidity'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxProposalValidity', 'maxProposalValidityNull', 'bigNumber', 'maxProposalValidity_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxProposalValidity[i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxProposalValidity':\r",
											"\r",
											"    case 'maxProposalValidityNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxProposalValidity_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxProposalValidity');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 26 Validating GeneralCriteriaPanel.fieldProvinces */\r",
											"var tc_fieldProvinces= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldProvinces'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_provinces', 'provincesNull', 'multiplesOptions''*/\r",
											"\r",
											"switch (tc_fieldProvinces[i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_provinces':\r",
											"\r",
											"    case 'provincesNull':\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - provinces');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 27 Validating GeneralCriteriaPanel.fieldratingsAbc */\r",
											"var tc_generalCriteriaPanel_fieldRatingsAbc= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldRatingsAbc'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_ratingsAbc', 'ratingsAbcNull', 'multiplesOptions'*/\r",
											"\r",
											"switch (tc_generalCriteriaPanel_fieldRatingsAbc [i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_ratingsAbc':\r",
											"\r",
											"    case 'ratingsAbcNull':\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - ratingsAbc');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  28 Validating GeneralCriteriaPanel.fieldRegionals */\r",
											"var tc_fieldRegionals= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldRegionals'))\r",
											"/*''inexistent', 'number', 'only_space', 'empty', 'no_regionals', 'regionalsNull', 'multiplesOptions'*/\r",
											"\r",
											"switch (tc_fieldRegionals[i]) {\r",
											"        case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_regionals':\r",
											"\r",
											"    case 'regionalsNull':\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - regionals');\r",
											"        break;    \r",
											"    \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f968dde-121e-4a63-a7e1-092f883ce726",
										"exec": [
											"/* 1 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Person Type */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldPersonType', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_PersonType', 'PersonTypeNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field saleTypes */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldSaleTypes', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_saleTypes', 'saleTypesNull', 'multiplesOptions'\r",
											"]));\r",
											"\r",
											"/* 2 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field SaleSubtypes */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldSaleSubtypes', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_SalesSubtype', 'SalesSubtypeNull', 'multiplesOptions'\r",
											"]));\r",
											"\r",
											"/* 3 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field FinancialBrands*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldFinancialBrands', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_FinancialBrands', 'FinancialBrandsNull', 'multiplesOptions']));\r",
											"\r",
											"/* 4 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field FactorySubsidy*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldFactorySubsidy', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_FactorySubsidy', 'FactorySubsidyNull']));\r",
											"\r",
											"/* 5 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field VendorSubsidy */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldVendorSubsidy', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_VendorSubsidy', 'VendorSubsidyNull', \r",
											"]));\r",
											"\r",
											"/* 6 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field ThirdPartiesSubsidy */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldThirdPartiesSubsidy', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_ThirdPartiesSubsidy', 'ThirdPartiesSubsidyNull', \r",
											"]));\r",
											"\r",
											"/* 7  Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Remunerations */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRemunerations', JSON.stringify(['difEngineRemunerations','inexistent', 'number', 'only_space', 'empty', 'no_Remunerations', 'RemunerationsNull', 'engineRemunerations', 'multiplesOptions']));\r",
											"\r",
											"/* 8 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field delays - NÃO ENCONTREI CARENCIA NO PAYLOAD */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fielddelays', JSON.stringify(['difEnginedelays','inexistent', 'number', 'only_space', 'empty', 'no_delays', 'delaysNull', 'enginedelays',  'multiplesOptions'\r",
											"]));\r",
											"\r",
											"/* 9 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinDownPaymentPercent*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinDownPaymentPercent', JSON.stringify(['floatNumber_4digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MinDownPaymentPercent', 'MinDownPaymentPercentNull', 'bigNumber', 'MaxDownPaymentPercent_obligatory'\r",
											"]));\r",
											"\r",
											"/* 10 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxDownPaymentPercent*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxDownPaymentPercent', JSON.stringify(['floatNumber_4digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MaxDownPaymentPercent', 'MaxDownPaymentPercentNull', 'bigNumber', 'minDownPaymentPercent_obligatory'\r",
											"]));\r",
											"\r",
											"/* 11 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinLoanAmount*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinLoanAmount', JSON.stringify(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MinLoanAmount', 'MinLoanAmountNull', 'bigNumber',  'MinLoanAmount_obligatory'\r",
											"]));\r",
											"\r",
											"/* 12 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxLoanAmount */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxLoanAmount', JSON.stringify(['floatNumber_11digits', 'floatNumber_12digits' 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MaxLoanAmount', 'MaxLoanAmountNull', 'bigNumber', 'MaxLoanAmount_obligatory'\r",
											"]));\r",
											"\r",
											"/* 13 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinModelRate*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinModelRate', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minModelRate', 'minModelRateNull', 'bigNumber', 'minModelRate_obligatory' ]));\r",
											"\r",
											"/* 14 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxModelRate*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxModelRate', JSON.stringify(['number_3digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxModelRate', 'maxModelRateNull', 'bigNumber', 'maxModelRate_obligatory' ]));\r",
											"\r",
											"/* 15 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field min6Or7CpfDigits*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMin6Or7CpfDigits', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_min6Or7CpfDigits', 'min6Or7CpfDigitsNull', 'bigNumber', 'min6Or7CpfDigits_obligatory' ]));\r",
											"\r",
											"/* 16 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field max6Or7CpfDigits*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMax6Or7CpfDigits', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_max6Or7CpfDigits', 'max6Or7CpfDigitsNull', 'bigNumber', 'max6Or7CpfDigits_obligatory' ]));\r",
											"\r",
											"/* 17 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field minTerm*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinTerm', JSON.stringify(['enginePrazo' , 'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minTerm', 'minTermNull', 'bigNumber', 'minTerm_obligatory'\r",
											" ]));\r",
											"\r",
											" /* 18 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxTerm*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxTerm', JSON.stringify(['enginePrazo' , 'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxTerm', 'maxTermNull', 'bigNumber', 'maxTerm_obligatory'\r",
											" ]));\r",
											"\r",
											"  /* 19 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field minVehiclePrice*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinVehiclePrice', JSON.stringify(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minVehiclePrice', 'minVehiclePriceNull', 'bigNumber', 'minVehiclePrice_obligatory'\r",
											" ]));\r",
											"\r",
											"   /* 20 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxVehiclePrice*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxVehiclePrice', JSON.stringify(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxVehiclePrice', 'maxVehiclePriceNull', 'bigNumber', 'maxVehiclePrice_obligatory'\r",
											" ]));\r",
											"\r",
											" /* 21 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field minManufactoryVehicleAge*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinManufactoryVehicleAges', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minManufactoryVehicleAge', 'minManufactoryVehicleAgeNull', 'bigNumber', 'minManufactoryVehicleAge_obligatory'\r",
											" ]));\r",
											"\r",
											"  /* 22 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxManufactoryVehicleAge*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldManufactoryVehicleAge', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxManufactoryVehicleAge', 'maxManufactoryVehicleAgeNull', 'bigNumber', 'maxManufactoryVehicleAge_obligatory'\r",
											" ]));\r",
											"\r",
											"   /* 23 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field minModelVehicleAge*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinModelVehicleAge', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minModelVehicleAge', 'minModelVehicleAgeNull', 'bigNumber', 'minModelVehicleAge_obligatory'\r",
											" ]));\r",
											"\r",
											"    /* 24 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxModelVehicleAge*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxModelVehicleAge', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxModelVehicleAge', 'maxModelVehicleAgeNull', 'bigNumber', 'maxModelVehicleAge_obligatory'\r",
											" ]));\r",
											"\r",
											"    /* 25 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxProposalValidity*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxProposalValidity', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxProposalValidity', 'maxProposalValidityNull', 'bigNumber', 'maxProposalValidity_obligatory'\r",
											" ]));\r",
											"\r",
											" /* 26 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field provinces */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldProvinces', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_provinces', 'provincesNull', 'multiplesOptions'\r",
											"]));\r",
											"\r",
											" /* 27 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field ratingsAbc */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRatingsAbc', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_ratingsAbc', 'ratingsAbcNull', 'multiplesOptions'\r",
											"]));\r",
											"\r",
											" /* 28 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field regionals */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRegionals', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_regionals', 'regionalsNull', 'multiplesOptions'\r",
											"]));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5fadb94e-d0d9-41e4-986e-8a8a9a4c40bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/* Valid Payload to create an engine: Delay, Payment Plan Category, CDD, Increase and Decrease, RBP Margin, Marketing, Payment Plan, Term, Remuneration, Return, Risk, Minimum Bank Rate, Max Client Rate, Minimum RBP Rate, VME */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Edvandro - Check generalCriteriaPanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a21825d7-d231-4f4c-8dab-2db3d43fced8",
										"exec": [
											"/* Importing variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
											"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
											"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"var lodash = require('lodash')\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldPersonType = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldPersonType'))\r",
											"/*(['inexistent', 'number', 'only_space', 'empty', 'no_PersonType', 'PersonTypeNull']));*/\r",
											"\r",
											"switch (tc_fieldPersonType[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"personType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent personType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"personType\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for personType number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"personType\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for personType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"personType\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty personType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_personType':\r",
											"        delete payloadEngine.startDate\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_personType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\t\r",
											"\r",
											"    case 'personTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"personType\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null PersonType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - personType');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* Validating GeneralCriteriaPanel.fieldSaleTypes */\r",
											"var tc_fieldSaleTypes = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldSaleTypes'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_saleTypes', 'saleTypesNull', 'multiplesOptions'*/\r",
											"\r",
											"switch (tc_fieldSaleTypes[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleTypes\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent saleTypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleTypes\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for saleTypes number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleTypes\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for saleTypes with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleTypes\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty saleTypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_saleTypes':\r",
											"        delete payloadEngine.startDate\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_saleTypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\t\r",
											"\r",
											"    case 'saleTypesNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleTypes\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null saleTypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\t\t\r",
											"    \r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleTypes\", ['XXX', 'XXX'])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions saleTypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - saleTypes');\r",
											"        break;   \r",
											"    \r",
											"}\r",
											"\r",
											"/* Validating GeneralCriteria Panel.fieldSaleSubtypes */\r",
											"var tc_fieldSaleSubtypes = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldSaleSubtypes'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_SalesSubtype', 'SalesSubtypeNull', 'multiplesOptions'*/\r",
											"\r",
											"switch (tc_fieldSaleSubtypes[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleSubtypes\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleSubtypes\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for saleSubtypes number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleSubtypes\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for saleSubtypes with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleSubtypes\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_salesSubtype':\r",
											"        delete payloadEngine.startDate\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\t\r",
											"\r",
											"    case 'salesSubtypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleSubtypes\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\t\r",
											"\r",
											"    case 'multiplesOptions':        \r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"saleSubtypes\", ['XXX', 'XXX'])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - saleSubtypes');\r",
											"        break;     \r",
											"    \r",
											"}\r",
											"\r",
											"/* Validating GeneralCriteriaPanel.fieldFinancialbrands */\r",
											"var tc_fieldFinancialBrands = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldFinancialBrands'))\r",
											"/*inexistent', 'number', 'only_space', 'empty', 'no_FinancialBrands', 'FinancialBrandsNull', 'multiplesOptions*/\r",
											"\r",
											"switch (tc_fieldFinancialBrands[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"financialBrands\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"financialBrands\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for financialBrands number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"financialBrands\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for financialBrands with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"financialBrands\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_financialBrands':\r",
											"        delete payloadEngine.startDate\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\t\r",
											"\r",
											"    case 'financialBrandsNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"financialBrands\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"financialBrands\", ['XXX', 'XXX'])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - financialBrands');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* Validating GeneralCriteriaPanel.fieldFactorySubsidy */\r",
											"var tc_fieldFactorySubsidy = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldFactorySubsidy'))\r",
											"/*inexistent', 'number', 'only_space', 'empty', 'no_FactorySubsidy', 'FactorySubsidyNull*/\r",
											"\r",
											"switch (tc_fieldFactorySubsidy[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"factorySubsidy\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"factorySubsidy\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidy number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"factorySubsidy\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidy with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"factorySubsidy\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_factorySubsidy':\r",
											"        delete payloadEngine.engineType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'factorySubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"factorySubsidy\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - factorySubsidy');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* Validating GeneralCriteriaPanel.fieldVendorSubsidy */\r",
											"var tc_fieldVendorSubsidy = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldVendorSubsidy'))\r",
											"/*inexistent', 'number', 'only_space', 'empty', 'no_VendorSubsidy', 'VendorSubsidyNull'*/\r",
											"\r",
											"switch (tc_fieldVendorSubsidy[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"vendorSubsidy\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"vendorSubsidy\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidy number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"vendorSubsidy\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidy with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"vendorSubsidy\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_vendorSubsidy':\r",
											"        delete payloadEngine.engineStatus\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'VendorSubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"vendorSubsidy\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - no_vendorSubsidy');\r",
											"        break;     \r",
											"    \r",
											"}\r",
											"\r",
											"/* Validating GeneralCriteriaPanel.fieldThirdPartiesSubsidy */\r",
											"var tc_fieldThirdPartiesSubsidy= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldThirdPartiesSubsidy'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_ThirdPartiesSubsidy', 'ThirdPartiesSubsidyNull', */\r",
											"\r",
											"switch (tc_fieldThirdPartiesSubsidy[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"thirdPartiesSubsidy\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent thirdPartiesSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"thirdPartiesSubsidy\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartiesSubsidy number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"thirdPartiesSubsidy\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartiesSubsidy with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"engithirdPartiesSubsidyneType\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty thirdPartiesSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_thirdPartiesSubsidy':\r",
											"        delete payloadEngine.engineType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_thirdPartiesSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"\r",
											"    case 'thirdPartiesSubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: changeOneFields(payloadEngine, \"thirdPartiesSubsidy\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null thirdPartiesSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - thirdPartiesSubsidy');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* Validating GeneralCriteriaPanel.fieldRemunerations */\r",
											"var tc_fieldRemunerations= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldRemunerations'))\r",
											"/*difEngineRemunerations','inexistent', 'number', 'only_space', 'empty', 'no_Remunerations', 'RemunerationsNull', 'engineRemunerations', 'multiplesOptions' */\r",
											"\r",
											"switch (tc_fieldRemunerations[i]) {\r",
											"    case 'difEngineRemunerations':\r",
											"    \r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_remunerations':\r",
											"\r",
											"    case 'RemunerationsNull':\r",
											"\r",
											"    case 'engineRemunerations':\r",
											"\r",
											"    case 'multiplesOptions' :\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - Remunerations');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 8 Validating GeneralCriteriaPanel.fieldLack */\r",
											"var tc_fieldLack= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldLack'))\r",
											"/*'difEngineLack' , inexistent', 'number', 'only_space', 'empty', 'no_Lack', 'LackNull', 'engineLack', 'multiplesOptions' */\r",
											"\r",
											"switch (tc_fieldLack[i]) {\r",
											"    case 'difEngineLack':\r",
											"    \r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_Lack':\r",
											"\r",
											"    case 'LackNull':\r",
											"\r",
											"    case 'engineLack':\r",
											"\r",
											"    case 'multiplesOptions' :\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - Lack');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 9 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldMinDownPaymentPercent= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinDownPaymentPercent'))\r",
											"/*'floatNumber_4digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MinDownPaymentPercent', 'MinDownPaymentPercentNull', 'bigNumber', 'MaxDownPaymentPercent_obligatory' */\r",
											"\r",
											"switch (tc_fieldMinDownPaymentPercent[i]) {\r",
											"    case 'floatNumber_4digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_MinDownPaymentPercent':\r",
											"\r",
											"    case 'MinDownPaymentPercentNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'MaxDownPaymentPercent_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - MinDownPaymentPercent');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 10 Validating GeneralCriteriaPanel.fieldMaxDownPaymentPercent */\r",
											"var tc_fieldMaxDownPaymentPercent= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxDownPaymentPercent'))\r",
											"/*'floatNumber_4digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MaxDownPaymentPercent', 'MaxDownPaymentPercentNull', 'bigNumber', 'minDownPaymentPercent_obligatory' */\r",
											"\r",
											"switch (tc_fieldMaxDownPaymentPercent[i]) {\r",
											"    case 'floatNumber_4digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_MaxDownPaymentPercent':\r",
											"\r",
											"    case 'MaxDownPaymentPercentNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minDownPaymentPercent_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - MaxDownPaymentPercent');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 11 Validating GeneralCriteriaPanel.fieldMinLoanAmount */\r",
											"var tc_fieldMinLoanAmount= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinLoanAmount'))\r",
											"/*floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MinLoanAmount', 'MinLoanAmountNull', 'bigNumber',  'MinLoanAmount_obligatory' */\r",
											"\r",
											"switch (tc_fieldMinLoanAmount[i]) {\r",
											"    case 'floatNumber_11digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_MinLoanAmount':\r",
											"\r",
											"    case 'MinLoanAmountNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'MinLoanAmount_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - MinLoanAmount');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 12 Validating GeneralCriteriaPanel.fieldMaxLoanAmount */\r",
											"var tc_fieldMaxLoanAmount= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxLoanAmount'))\r",
											"/*'floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MaxLoanAmount', 'MaxLoanAmountNull', 'bigNumber', 'MaxLoanAmount_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxLoanAmount[i]) {\r",
											"    case 'floatNumber_11digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_MaxLoanAmount':\r",
											"\r",
											"    case 'MaxLoanAmountNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'MaxLoanAmount_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - MaxLoanAmount');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  13 Validating GeneralCriteriaPanel.fieldminModelRate */\r",
											"var tc_fieldMinModelRate= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinModelRate'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minModelRate', 'minModelRateNull', 'bigNumber', 'minModelRate_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinModelRate [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minModelRate':\r",
											"\r",
											"    case 'minModelRateNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minModelRate_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelRate');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  14 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_generalCriteriaPanel_fieldMaxModelRate= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_tc_generalCriteriaPanel_fieldMaxModelRate'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxModelRate', 'maxModelRateNull', 'bigNumber', 'maxModelRate_obligatory'*/\r",
											"\r",
											"switch (tc_generalCriteriaPanel_fieldMaxModelRate [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxModelRate':\r",
											"\r",
											"    case 'maxModelRateNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxModelRate_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxModelRate');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  15 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldMin6Or7CpfDigits= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMin6Or7CpfDigits'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_min6Or7CpfDigits', 'min6Or7CpfDigitsNull', 'bigNumber', 'min6Or7CpfDigits_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMin6Or7CpfDigits [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_min6Or7CpfDigits':\r",
											"\r",
											"    case 'min6Or7CpfDigitsNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'min6Or7CpfDigits_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - min6Or7CpfDigits');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  16 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldMax6Or7CpfDigits= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMax6Or7CpfDigits'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_max6Or7CpfDigits', 'max6Or7CpfDigitsNull', 'bigNumber', 'max6Or7CpfDigits_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMax6Or7CpfDigits [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_max6Or7CpfDigits':\r",
											"\r",
											"    case 'max6Or7CpfDigitsNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'max6Or7CpfDigits_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - max6Or7CpfDigits');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 17 Validating GeneralCriteriaPanel.fieldminTerm */\r",
											"var tc_fieldMinTerm= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinTerm'))\r",
											"/*'enginePrazo' , 'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minTerm', 'minTermNull', 'bigNumber', 'minTerm_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinTerm [i]) {\r",
											"    case 'enginePrazo':    \r",
											"    \r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minTerm':\r",
											"\r",
											"    case 'minTermNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minTerm_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minTerm');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  18 Validating GeneralCriteriaPanel.fieldPersonType */\r",
											"var tc_fieldMaxTerm= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxTerm'))\r",
											"/*'enginePrazo' , 'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxTerm', 'maxTermNull', 'bigNumber', 'maxTerm_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxTerm [i]) {\r",
											"    case 'enginePrazo':\r",
											"\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxTerm':\r",
											"\r",
											"    case 'maxTermNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxTerm_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxTerm');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  19 Validating GeneralCriteriaPanel.fieldminVehiclePrice */\r",
											"var tc_fieldMinVehiclePrice= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinVehiclePrice'))\r",
											"/*(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minVehiclePrice', 'minVehiclePriceNull', 'bigNumber', 'minVehiclePrice_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinVehiclePrice [i]) {\r",
											"    case 'floatNumber_11digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minVehiclePrice':\r",
											"\r",
											"    case 'minVehiclePriceNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minVehiclePrice_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minVehiclePrice');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 20 Validating GeneralCriteriaPanel.fieldmaxVehiclePrice_obligatory */\r",
											"var tc_fieldMaxVehiclePrice= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxVehiclePrice'))\r",
											"/*'floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxVehiclePrice', 'maxVehiclePriceNull', 'bigNumber', 'maxVehiclePrice_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxVehiclePrice [i]) {\r",
											"    case 'floatNumber_11digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxVehiclePrice':\r",
											"\r",
											"    case 'maxVehiclePriceNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxVehiclePrice_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxVehiclePrice');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  21 Validating GeneralCriteriaPanel.fieldminManufactoryVehicleAge */\r",
											"var tc_fieldMinManufactoryVehicleAges= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinManufactoryVehicleAges'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minManufactoryVehicleAge', 'minManufactoryVehicleAgeNull', 'bigNumber', 'minManufactoryVehicleAge_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinManufactoryVehicleAges [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minManufactoryVehicleAge':\r",
											"\r",
											"    case 'minManufactoryVehicleAgeNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minManufactoryVehicleAge_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minManufactoryVehicleAge');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 22 Validating GeneralCriteriaPanel.fieldManufactoryVehicleAge */\r",
											"var tc_fieldManufactoryVehicleAge= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldManufactoryVehicleAge'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxManufactoryVehicleAge', 'maxManufactoryVehicleAgeNull', 'bigNumber', 'maxManufactoryVehicleAge_obligatory'*/\r",
											"\r",
											"switch (tc_fieldManufactoryVehicleAge [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxManufactoryVehicleAge':\r",
											"\r",
											"    case 'maxManufactoryVehicleAgeNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxManufactoryVehicleAge':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxManufactoryVehicleAge');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 23 Validating GeneralCriteriaPanel.fieldMinModelVehicleAge */\r",
											"var tc_fieldMinModelVehicleAge= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMinModelVehicleAge'))\r",
											"/*''number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minModelVehicleAge', 'minModelVehicleAgeNull', 'bigNumber', 'minModelVehicleAge_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMinModelVehicleAge [i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_minModelVehicleAge':\r",
											"\r",
											"    case 'minModelVehicleAgeNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'minModelVehicleAge_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelVehicleAge');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 24 Validating GeneralCriteriaPanel.fieldmaxModelVehicleAge_obligatory' */\r",
											"var tc_fieldMaxModelVehicleAge = JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxModelVehicleAge'))\r",
											"/*['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxModelVehicleAge', 'maxModelVehicleAgeNull', 'bigNumber', 'maxModelVehicleAge_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxModelVehicleAge[i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxModelVehicleAge':\r",
											"\r",
											"    case 'maxModelVehicleAgeNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxModelVehicleAge_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxModelVehicleAge');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 25 Validating GeneralCriteriaPanel.fieldmaxProposalValidity */\r",
											"var tc_fieldMaxProposalValidity= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldMaxProposalValidity'))\r",
											"/*'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxProposalValidity', 'maxProposalValidityNull', 'bigNumber', 'maxProposalValidity_obligatory'*/\r",
											"\r",
											"switch (tc_fieldMaxProposalValidity[i]) {\r",
											"    case 'number_2digits':\r",
											"    \r",
											"    case 'negativeNumber':\r",
											"\r",
											"    case 'string':\r",
											"\r",
											"    case 'zero':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_maxProposalValidity':\r",
											"\r",
											"    case 'maxProposalValidityNull':\r",
											"\r",
											"    case 'bigNumber' :\r",
											"\r",
											"    case 'maxProposalValidity_obligatory':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxProposalValidity');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 26 Validating GeneralCriteriaPanel.fieldProvinces */\r",
											"var tc_fieldProvinces= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldProvinces'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_provinces', 'provincesNull', 'multiplesOptions''*/\r",
											"\r",
											"switch (tc_fieldProvinces[i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_provinces':\r",
											"\r",
											"    case 'provincesNull':\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - provinces');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/* 27 Validating GeneralCriteriaPanel.fieldratingsAbc */\r",
											"var tc_generalCriteriaPanel_fieldRatingsAbc= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldRatingsAbc'))\r",
											"/*'inexistent', 'number', 'only_space', 'empty', 'no_ratingsAbc', 'ratingsAbcNull', 'multiplesOptions'*/\r",
											"\r",
											"switch (tc_generalCriteriaPanel_fieldRatingsAbc [i]) {\r",
											"    case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_ratingsAbc':\r",
											"\r",
											"    case 'ratingsAbcNull':\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - ratingsAbc');\r",
											"        break;    \r",
											"    \r",
											"}\r",
											"\r",
											"/*  28 Validating GeneralCriteriaPanel.fieldRegionals */\r",
											"var tc_fieldRegionals= JSON.parse(pm.collectionVariables.get('tc_generalCriteriaPanel_fieldRegionals'))\r",
											"/*''inexistent', 'number', 'only_space', 'empty', 'no_regionals', 'regionalsNull', 'multiplesOptions'*/\r",
											"\r",
											"switch (tc_fieldRegionals[i]) {\r",
											"        case 'inexistent':\r",
											"\r",
											"    case 'number':\r",
											"\r",
											"    case 'only_space':\r",
											"\r",
											"    case 'empty':\r",
											"\r",
											"    case 'no_regionals':\r",
											"\r",
											"    case 'regionalsNull':\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - regionals');\r",
											"        break;    \r",
											"    \r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f968dde-121e-4a63-a7e1-092f883ce726",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Person Type */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldPersonType', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_PersonType', 'personTypeNull','multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field saleTypes */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldSaleTypes', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_saleTypes', 'saleTypesNull', 'inactiveId','repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field SaleSubtypes */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldSaleSubtypes', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'subtypeFromAnotherType', 'subtypeWithoutType', 'no_salesSubtype', 'salesSubtypeNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field FinancialBrands*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldFinancialBrands', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_saleTypes', 'saleTypesNull', 'inactiveId','repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* 4 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field FactorySubsidy*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldFactorySubsidy', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_FactorySubsidy', 'FactorySubsidyNull']));\r",
											"\r",
											"/* 5 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field VendorSubsidy */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldVendorSubsidy', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_VendorSubsidy', 'VendorSubsidyNull', \r",
											"]));\r",
											"\r",
											"/* 6 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field ThirdPartiesSubsidy */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldThirdPartiesSubsidy', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_ThirdPartiesSubsidy', 'ThirdPartiesSubsidyNull', \r",
											"]));\r",
											"\r",
											"/* 7  Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Remunerations */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRemunerations', JSON.stringify(['difEngineRemunerations','inexistent', 'number', 'only_space', 'empty', 'no_Remunerations', 'RemunerationsNull', 'engineRemunerations', 'multiplesOptions']));\r",
											"\r",
											"/* 8 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field lack - NÃO ENCONTREI CARENCIA NO PAYLOAD */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldLack', JSON.stringify(['difEngineLack','inexistent', 'number', 'only_space', 'empty', 'no_Lack', 'LackNull', 'engineLack',  'multiplesOptions'\r",
											"]));\r",
											"\r",
											"/* 9 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinDownPaymentPercent*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinDownPaymentPercent', JSON.stringify(['floatNumber_4digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MinDownPaymentPercent', 'MinDownPaymentPercentNull', 'bigNumber', 'MaxDownPaymentPercent_obligatory'\r",
											"]));\r",
											"\r",
											"/* 10 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxDownPaymentPercent*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxDownPaymentPercent', JSON.stringify(['floatNumber_4digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MaxDownPaymentPercent', 'MaxDownPaymentPercentNull', 'bigNumber', 'minDownPaymentPercent_obligatory'\r",
											"]));\r",
											"\r",
											"/* 11 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinLoanAmount*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinLoanAmount', JSON.stringify(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MinLoanAmount', 'MinLoanAmountNull', 'bigNumber',  'MinLoanAmount_obligatory'\r",
											"]));\r",
											"\r",
											"/* 12 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxLoanAmount */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxLoanAmount', JSON.stringify(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_MaxLoanAmount', 'MaxLoanAmountNull', 'bigNumber', 'MaxLoanAmount_obligatory'\r",
											"]));\r",
											"\r",
											"/* 13 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinModelRate*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinModelRate', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minModelRate', 'minModelRateNull', 'bigNumber', 'minModelRate_obligatory' ]));\r",
											"\r",
											"/* 14 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxModelRate*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxModelRate', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxModelRate', 'maxModelRateNull', 'bigNumber', 'maxModelRate_obligatory' ]));\r",
											"\r",
											"/* 15 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field min6Or7CpfDigits*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMin6Or7CpfDigits', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_min6Or7CpfDigits', 'min6Or7CpfDigitsNull', 'bigNumber', 'min6Or7CpfDigits_obligatory' ]));\r",
											"\r",
											"/* 16 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field max6Or7CpfDigits*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMax6Or7CpfDigits', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_max6Or7CpfDigits', 'max6Or7CpfDigitsNull', 'bigNumber', 'max6Or7CpfDigits_obligatory' ]));\r",
											"\r",
											"/* 17 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field minTerm*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinTerm', JSON.stringify(['enginePrazo' , 'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minTerm', 'minTermNull', 'bigNumber', 'minTerm_obligatory'\r",
											" ]));\r",
											"\r",
											" /* 18 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxTerm*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxTerm', JSON.stringify(['enginePrazo' , 'number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxTerm', 'maxTermNull', 'bigNumber', 'maxTerm_obligatory'\r",
											" ]));\r",
											"\r",
											"  /* 19 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field minVehiclePrice*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinVehiclePrice', JSON.stringify(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minVehiclePrice', 'minVehiclePriceNull', 'bigNumber', 'minVehiclePrice_obligatory'\r",
											" ]));\r",
											"\r",
											"   /* 20 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxVehiclePrice*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxVehiclePrice', JSON.stringify(['floatNumber_11digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxVehiclePrice', 'maxVehiclePriceNull', 'bigNumber', 'maxVehiclePrice_obligatory'\r",
											" ]));\r",
											"\r",
											" /* 21 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field minManufactoryVehicleAge*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinManufactoryVehicleAges', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minManufactoryVehicleAge', 'minManufactoryVehicleAgeNull', 'bigNumber', 'minManufactoryVehicleAge_obligatory'\r",
											" ]));\r",
											"\r",
											"  /* 22 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxManufactoryVehicleAge*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldManufactoryVehicleAge', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxManufactoryVehicleAge', 'maxManufactoryVehicleAgeNull', 'bigNumber', 'maxManufactoryVehicleAge_obligatory'\r",
											" ]));\r",
											"\r",
											"   /* 23 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field minModelVehicleAge*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinModelVehicleAge', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_minModelVehicleAge', 'minModelVehicleAgeNull', 'bigNumber', 'minModelVehicleAge_obligatory'\r",
											" ]));\r",
											"\r",
											"    /* 24 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxModelVehicleAge*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxModelVehicleAge', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxModelVehicleAge', 'maxModelVehicleAgeNull', 'bigNumber', 'maxModelVehicleAge_obligatory'\r",
											" ]));\r",
											"\r",
											"    /* 25 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field maxProposalValidity*/\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxProposalValidity', JSON.stringify(['number_2digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_maxProposalValidity', 'maxProposalValidityNull', 'bigNumber', 'maxProposalValidity_obligatory'\r",
											" ]));\r",
											"\r",
											" /* 26 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field provinces */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldProvinces', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_provinces', 'provincesNull', 'multiplesOptions'\r",
											"]));\r",
											"\r",
											" /* 27 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field ratingsAbc */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRatingsAbc', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_ratingsAbc', 'ratingsAbcNull', 'multiplesOptions'\r",
											"]));\r",
											"\r",
											" /* 28 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field regionals */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRegionals', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_regionals', 'regionalsNull', 'multiplesOptions'\r",
											"]));\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "73a075c5-d0d6-424b-b4e2-49b53c5ae864",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/* Valid Payload to create an engine: Delay, Payment Plan Category, CDD, Increase and Decrease, RBP Margin, Marketing, Payment Plan, Term, Remuneration, Return, Risk, Minimum Bank Rate, Max Client Rate, Minimum RBP Rate, VME */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						}
					],
					"id": "ba17796b-d376-4a4f-aeaa-103b123b5580"
				},
				{
					"name": "New Folder",
					"item": [],
					"id": "550949b1-3683-414d-a0cf-5b9763ce6c0f"
				},
				{
					"name": "Check eligibleDealershipsPanel_fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "024e5c56-f98e-41a2-818d-44b3c60204df",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"\r",
									"/* Validating positive scenarios to create an Eligible Dealer */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"        pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"\r",
									"})\r",
									"\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"/* Validating dealership link type identifier */\r",
									"var tc_fieldDealershipBondType = JSON.parse(pm.collectionVariables.get('tc_eligibleDealersPainel_tc_fieldDealershipBondType'))\r",
									"/* tc_fieldDealershipBondType = ['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
									"switch (tc_fieldDealershipBondType[i]) {\r",
									"    case 'inexistentId':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for inexistent DealershipBondType', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'string':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for string DealershipBondType', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'specialCharacter':\r",
									"\r",
									"    case 'only_space':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", \"  \")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for DealershipBondType with only_space', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'empty':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", \"\")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for empty DealershipBondType', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'no_integrationChannelIds':\r",
									"\r",
									"    case 'integrationChannelIdsNull':\r",
									"\r",
									"    case 'inativeId':\r",
									"\r",
									"    case 'repeatedMultiplesOptions':\r",
									"\r",
									"    case 'multiplesOptions':\r",
									"\r",
									"        i = 0;\r",
									"    default:\r",
									"        let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", ['XXX', 'XXX'])\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for multiplesOptions DealershipBondType', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i = 0;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    default:\r",
									"        console.error('Error in TEST script - DealershipBondType');\r",
									"        break;\r",
									"\r",
									"}\r",
									"\r",
									"/* Validating Dealership identifier */\r",
									"var tc_fieldDealership = JSON.parse(pm.collectionVariables.get('tc_eligibleDealersPainel_tc_fieldDealership'))\r",
									"/* tc_fieldDealershipBondType = ['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
									"switch (tc_fieldDealership[i]) {\r",
									"    case 'inexistentId':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for inexistent Dealership', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'string':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for string Dealership', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'specialCharacter':\r",
									"\r",
									"    case 'only_space':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", \"  \")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for Dealership with only_space', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'empty':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", \"\")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for empty Dealership', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'no_integrationChannelIds':\r",
									"\r",
									"    case 'integrationChannelIdsNull':\r",
									"\r",
									"    case 'inativeId':\r",
									"\r",
									"    case 'repeatedMultiplesOptions':\r",
									"\r",
									"    case 'multiplesOptions':\r",
									"\r",
									"        i = 0;\r",
									"    default:\r",
									"        let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", ['XXX', 'XXX'])\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for multiplesOptions Dealership', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i = 0;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    default:\r",
									"        console.error('Error in TEST script - Dealership');\r",
									"        break;\r",
									"\r",
									"}\r",
									"\r",
									"/* Validating dealership group identifier */\r",
									"var tc_fieldDealershipGroupId = JSON.parse(pm.collectionVariables.get('tc_eligibleDealersPainel_tc_fieldDealershipGroupId'))\r",
									"/* tc_fieldDealershipBondType = ['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
									"switch (tc_fieldDealershipGroupId[i]) {\r",
									"    case 'inexistentId':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for inexistent DealershipGroupId', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'string':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for string DealershipGroupId', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'specialCharacter':\r",
									"\r",
									"    case 'only_space':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", \"  \")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for DealershipGroupId with only_space', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'empty':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", \"\")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for empty DealershipGroupId', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'no_integrationChannelIds':\r",
									"\r",
									"    case 'integrationChannelIdsNull':\r",
									"\r",
									"    case 'inativeId':\r",
									"\r",
									"    case 'repeatedMultiplesOptions':\r",
									"\r",
									"    case 'multiplesOptions':\r",
									"\r",
									"        i = 0;\r",
									"    default:\r",
									"        let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", ['XXX', 'XXX'])\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for multiplesOptions DealershipGroupId', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"               //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i = 0;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    default:\r",
									"        console.error('Error in TEST script - DealershipGroupId');\r",
									"        break;\r",
									"\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5b9a5d0f-c8fe-45f8-9864-3ccde424a968",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_EligibleVehiclesPanel: Field Dealership Bond Type */\r",
									"pm.collectionVariables.set('tc_eligibleDealershipsPanel_fieldDealershipBondType', JSON.stringify(['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleVehiclesPanel: Field Dealership Id */\r",
									"pm.collectionVariables.set('tc_eligibleDealershipsPanel_fieldDealership', JSON.stringify(['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleVehiclesPanel: Field Dealership Group Id */\r",
									"pm.collectionVariables.set('tc_eligibleDealershipsPanel_fieldDealershipGroupId', JSON.stringify(['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "5205b4c2-74eb-4e99-b697-718107b60aa2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{domain}}/policies"
					},
					"response": []
				},
				{
					"name": "Check ineligibleDealershipsPanel_fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a21825d7-d231-4f4c-8dab-2db3d43fced8",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"\r",
									"/* Validating positive scenarios to create an Eligible Dealer */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"        pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"\r",
									"})\r",
									"\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});\r",
									"\r",
									"/* Validating dealership link type identifier */\r",
									"var tc_fieldDealershipBondType = JSON.parse(pm.collectionVariables.get('tc_ineligibleDealershipsPanel_tc_fieldDealershipBondType'))\r",
									"/* tc_fieldDealershipBondType = ['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
									"switch (tc_fieldDealershipBondType[i]) {\r",
									"    case 'inexistentId':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for inexistent DealershipBondType', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'string':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for string DealershipBondType', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'specialCharacter':\r",
									"\r",
									"    case 'only_space':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", \"  \")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for DealershipBondType with only_space', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'empty':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", \"\")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for empty DealershipBondType', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'no_integrationChannelIds':\r",
									"\r",
									"    case 'integrationChannelIdsNull':\r",
									"\r",
									"    case 'inativeId':\r",
									"\r",
									"    case 'repeatedMultiplesOptions':\r",
									"\r",
									"    case 'multiplesOptions':\r",
									"\r",
									"        i = 0;\r",
									"    default:\r",
									"        let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipBondType\", ['XXX', 'XXX'])\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for multiplesOptions DealershipBondType', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i = 0;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    default:\r",
									"        console.error('Error in TEST script - DealershipBondType');\r",
									"        break;\r",
									"\r",
									"}\r",
									"\r",
									"/* Validating Dealership identifier */\r",
									"var tc_fieldDealership = JSON.parse(pm.collectionVariables.get('tc_ineligibleDealershipsPanel_tc_fieldDealership'))\r",
									"/* tc_fieldDealershipBondType = ['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
									"switch (tc_fieldDealership[i]) {\r",
									"    case 'inexistentId':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for inexistent Dealership', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'string':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for string Dealership', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'specialCharacter':\r",
									"\r",
									"    case 'only_space':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", \"  \")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for Dealership with only_space', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'empty':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", \"\")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for empty Dealership', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'no_integrationChannelIds':\r",
									"\r",
									"    case 'integrationChannelIdsNull':\r",
									"\r",
									"    case 'inativeId':\r",
									"\r",
									"    case 'repeatedMultiplesOptions':\r",
									"\r",
									"    case 'multiplesOptions':\r",
									"\r",
									"        i = 0;\r",
									"    default:\r",
									"        let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"Dealership\", ['XXX', 'XXX'])\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for multiplesOptions Dealership', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i = 0;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    default:\r",
									"        console.error('Error in TEST script - Dealership');\r",
									"        break;\r",
									"\r",
									"}\r",
									"\r",
									"/* Validating dealership group identifier */\r",
									"var tc_fieldDealershipGroupId = JSON.parse(pm.collectionVariables.get('tc_ineligibleDealershipsPanel_tc_fieldDealershipGroupId'))\r",
									"/* tc_fieldDealershipBondType = ['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
									"switch (tc_fieldDealershipGroupId[i]) {\r",
									"    case 'inexistentId':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for inexistent DealershipGroupId', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'string':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", pm.variables.replaceIn('{{$randomWord}}'))\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for string DealershipGroupId', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'specialCharacter':\r",
									"\r",
									"    case 'only_space':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", \"  \")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for DealershipGroupId with only_space', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'empty':\r",
									"            let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", \"\")\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for empty DealershipGroupId', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"                //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i++;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    case 'no_integrationChannelIds':\r",
									"\r",
									"    case 'integrationChannelIdsNull':\r",
									"\r",
									"    case 'inativeId':\r",
									"\r",
									"    case 'repeatedMultiplesOptions':\r",
									"\r",
									"    case 'multiplesOptions':\r",
									"\r",
									"        i = 0;\r",
									"    default:\r",
									"        let options = {\r",
									"            method: pm.request.method.toString(),\r",
									"            url: pm.request.url.toString(),\r",
									"            headers: headerComplete,\r",
									"            body: changeOneFields(payloadEngine, \"DealershipGroupId\", ['XXX', 'XXX'])\r",
									"        }\r",
									"\r",
									"        pm.sendRequest(options, (err, res) => {\r",
									"            pm.test('Status 400 for multiplesOptions DealershipGroupId', () => {\r",
									"                pm.expect(res).to.be.equal(400);\r",
									"               //VALIDAR MENSAGEM\r",
									"            })\r",
									"        })\r",
									"        i = 0;\r",
									"        pm.collectionVariables.set('count', i);\r",
									"\r",
									"    default:\r",
									"        console.error('Error in TEST script - DealershipGroupId');\r",
									"        break;\r",
									"\r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "1f968dde-121e-4a63-a7e1-092f883ce726",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_IneligibleDealershipsPanel: Field Dealership Bond Type */\r",
									"pm.collectionVariables.set('tc_ineligibleDealershipsPanel_fieldDealershipBondType', JSON.stringify(['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_IneligibleDealershipsPanel: Field dealership Id */\r",
									"pm.collectionVariables.set('tc_ineligibleDealershipsPanel_fieldDealershipId', JSON.stringify(['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_IneligibleDealershipsPanel: Field Dealership Group Id */\r",
									"pm.collectionVariables.set('tc_ineligibleDealershipsPanel_fieldDealershipGroupId', JSON.stringify(['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "d37edb4e-57f8-41e4-8040-639e1c10addf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}{{domain}}/policies"
					},
					"response": []
				},
				{
					"name": "Check eligibleVehiclesPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_EligibleDealershipsPanel: Field Brand Id */\r",
									"pm.collectionVariables.set('tc_eligibleVehiclesPanel_fieldBrandId', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_brandId', 'brandIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleDealershipsPanel: Field model Id */\r",
									"pm.collectionVariables.set('tc_eligibleVehiclesPanel_fieldModelId', JSON.stringify(['brandId_obligatory','inexistent', 'number', 'only_space', 'empty', 'no_modelId', 'modelIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleDealershipsPanel: Field version Id */\r",
									"pm.collectionVariables.set('tc_eligibleVehiclesPanel_fieldVersionId', JSON.stringify(['modelId_obligatory','inexistent', 'number', 'only_space', 'empty', 'no_versionId', 'versionIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleDealershipsPanel: Field Situation */\r",
									"pm.collectionVariables.set('tc_eligibleVehiclesPanel_fieldSituation', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_situation', 'situationNull']));\r",
									"\r",
									"\r",
									"\r",
									"/* criar caso de testes para : Somente apresentar as versões que possuam a idade dentro do intervalo definido para ano modelo e ano fabricação, caso estejam preenchidos nos critérios definidos anteriormente.*/"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "dfacc6bc-7629-4889-a793-7be6d3360485",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_EligibleVehiclesPanel: Field Dealership Bond Type */\r",
									"pm.collectionVariables.set('tc_eligibleVehiclesPanel_fieldDealershipBondType', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_dealershipBondType', 'dealershipBondTypeNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleVehiclesPanel: Field Dealership Id */\r",
									"pm.collectionVariables.set('tc_eligibleVehiclesPanel_fieldDealership', JSON.stringify(['dealershipBondType_obligatory','inexistent', 'number', 'only_space', 'empty', 'no_dealership', 'dealershipNull' ]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleVehiclesPanel: Field Dealership Group Id */\r",
									"pm.collectionVariables.set('tc_eligibleVehiclesPanel_fieldDealershipGroupId', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_DealershipGroupId', 'DealershipGroupIdNull' , 'Dealership_obligatory'\r",
									"]));\r",
									"\r",
									"/* Criar testes para: Somente apresentar as versões que possuam a idade dentro do intervalo definido para ano modelo e ano fabricação, caso estejam preenchidos nos critérios definidos anteriormente.*/\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleVehiclesPanel: Field situation */\r",
									"pm.collectionVariables.set('tc_eligibleVehiclesPanel_fieldSituation', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_situation', 'situationNull' , \r",
									"]));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "6a78e81e-7eaa-43cf-a631-0404f44d3a78",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Camila - Check ineligibleVehiclesPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_IneligibleDealershipsPanel: Field Brand Id */\r",
									"pm.collectionVariables.set('tc_ineligibleVehiclesPanel_fieldBrandId', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_brandId', 'brandIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_IneligibleDealershipsPanel: Field model Id */\r",
									"pm.collectionVariables.set('tc_ineligibleVehiclesPanel_fieldModelId', JSON.stringify(['brandId_obligatory','inexistent', 'number', 'only_space', 'empty', 'no_modelId', 'modelIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_IneligibleDealershipsPanel: Field Version Id */\r",
									"pm.collectionVariables.set('tc_ineligibleVehiclesPanel_fieldVersionId', JSON.stringify(['modelId_obligatory','inexistent', 'number', 'only_space', 'empty', 'no_versionId', 'versionIdNull']));\r",
									"\r",
									"/* criar caso de testes para : Somente apresentar as versões que possuam a idade dentro do intervalo definido para ano modelo e ano fabricação, caso estejam preenchidos nos critérios definidos anteriormente.*/\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_IneligibleDealershipsPanel: Field Situation */\r",
									"pm.collectionVariables.set('tc_ineligibleVehiclesPanel_fieldsSituation', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_situation', 'situationNull']));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a9dedabb-0a16-4795-adf6-f502d211cdef",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "0389a484-506d-4172-a07f-4c1c43229b62",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Camila - Check servicesPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "2f4e0c5e-0e7a-4e3d-8e92-2a544178a2c8",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_ServicesPanel: Field Product Id*/\r",
									"pm.collectionVariables.set('tc_servicesPanel_fieldProductId', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_productId', 'productIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleDealershipsPanel: Field Sub Product Id */\r",
									"pm.collectionVariables.set('tc_servicesPanel_fieldSubProductId', JSON.stringify(['productId_obligatory','inexistent', 'number', 'only_space', 'empty', 'no_productId', 'productIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleDealershipsPanel: Field Period In Months */\r",
									"pm.collectionVariables.set('tc_servicesPanel_fieldPeriodInMonths', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_periodInMonths', 'periodInMonthsNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EligibleDealershipsPanel: Field kilometrage */\r",
									"pm.collectionVariables.set('tc_servicesPanel_fieldskilometrage', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_kilometrage', 'kilometrageNull']));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "5895470b-2617-489a-95e3-c9de27963d0c",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "c9cc868d-2cab-458c-a5c5-e634129bdd75",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Camila - Check insurancePanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_InsurancePanel: Field Product Id */\r",
									"pm.collectionVariables.set('tc_insurancePanel_fieldProductId', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_productId', 'productIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_InsurancePanel: Field SubProduct Id */\r",
									"pm.collectionVariables.set('tc_insurancePanel_fieldSubProductId', JSON.stringify(['productId_obligatory','inexistent', 'number', 'only_space', 'empty', 'no_productId', 'productIdNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_InsurancePanel: Field Period In Months */\r",
									"pm.collectionVariables.set('tc_insurancePanel_fieldPeriodInMonths', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_periodInMonths', 'periodInMonthsNull']));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "202a9979-25da-4ce8-8b0d-12ce4a8f5901",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4b9c7412-4621-481a-aab8-b49ea922c3be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Camila - Check crmListPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_CrmListPanel: Field Cpf Cnpj */\r",
									"pm.collectionVariables.set('tc_crmListPanel_fieldCpfCnpj', JSON.stringify([]));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d14b4aba-20f1-41aa-b49d-4afa8425f2fe",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "2c643fac-75f8-49d4-bcfe-e02e3517aaef",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Camila - Check classifiersPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_ClassifiersPanel: Field Classifier Id */\r",
									"pm.collectionVariables.set('tc_classifiersPanel_fieldClassifierId', JSON.stringify([]));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "84ced646-deb9-435b-bd9d-78036014fe66",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "dcb9fcb8-24f4-433b-8f87-34562841af1f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Camila - Check termPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_termPanel: Field terms */\r",
									"pm.collectionVariables.set('tc_termsPanel_fieldTerms--', JSON.stringify([]));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "57b8e13e-a283-4f81-a6f7-0c69ca4d0f46",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "ce4f237b-4f48-45c5-a101-91436e30a8be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Camila - Check lackPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_LackPanel: Field Delays */\r",
									"pm.collectionVariables.set('tc_lackPanel_fieldDelays--', JSON.stringify([]));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "673fc56d-15b3-4824-abfe-abbf6d336e74",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "090e9a73-9272-4fd2-a58d-f821fa15c1be",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Ana - Check remunerationPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_RemunerationPanel: Field Remuneration Id */\r",
									"pm.collectionVariables.set('tc_remunerationPanel_fieldRemunerationId--', JSON.stringify([]));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "19d937e3-5ea4-4ac1-b0ef-35a7c07c1522",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "fcd3ab6c-c129-45e0-b3f5-123e1392dc53",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Camila - Check paymentPlansPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "621bd6bd-4596-4ca0-83b7-879a27588d33",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Payment Plan Name */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldPaymentPlanName', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Down Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldDownPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinDown Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMinDownPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxDown Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMaxDownPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Default Down Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldDefaultDownPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Occurrencies */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldOccurrencies', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Occurrence Type */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldOccurrenceType', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Installment Occurrencies */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldInstallmentOccurrencies', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Month Occurrencies */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMonthOccurrencies', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Frequency Occurrencies */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldFrequencyOccurrencies', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Reduced Installment Amount */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsReducedInstallmentAmount', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Installment Occurrency */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsInstallmentOccurrency', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Min Fixed Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMinFixedPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Max Fixed Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMaxFixedPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Default Fixed Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsDefaultFixedPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Balloon Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsBalloonPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Balloon Payment Type */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldssBalloonPaymentType', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel_fields: Field Min Balloon Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMinBalloonPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Max Balloon Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMaxBalloonPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Default Balloon Payment */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsDefaultBalloonPayment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field  Increase Decrease Installment*/\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsIncreaseDecreaseInstallment', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Installment Type */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsInstallmentType', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Increase Decreaseinstallment Percent */\r",
									"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsIncreaseDecreaseinstallmentPercent', JSON.stringify([]));\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d32cc98a-4fed-4e73-a622-6e35e612eda1",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "4f8326b5-3f2d-4e19-9f29-8e5000523a23",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Check vmePanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_VmePanel: Field Vme ReturnType */\r",
									"pm.collectionVariables.set('tc_vmePanel_fieldsVmeReturnType', JSON.stringify(['floatNumber', 'negativeNumber', 'string','only_space', 'empty', 'no_vmeReturnType', 'vmeReturnTypeNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_VmePanel: Field Factory Subsidy */\r",
									"pm.collectionVariables.set('tc_vmePanel_fieldsFactorySubsidy', JSON.stringify(['engineVME','floatNumber_11digits','floatNumber_12digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_factorySubsidy', 'factorySubsidyNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_VmePanel: Field Vendor Subsidy */\r",
									"pm.collectionVariables.set('tc_vmePanel_fieldsVendorSubsidy', JSON.stringify(['engineVME','floatNumber_4digits','floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_subsidy', 'subsidyNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_VmePanel: Field Third Party Subsidy */\r",
									"pm.collectionVariables.set('tc_vmePanel_fieldsThirdPartySubsidy', JSON.stringify(['engineVME','floatNumber_11digits','floatNumber_12digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_subsidy', 'subsidyNull']));\r",
									"\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_VmePanel: Field Third Party Subsidy */\r",
									"pm.collectionVariables.set('tc_vmePanel_fieldsThirdPartySubsidy', JSON.stringify(['engineVME','floatNumber_4digits','floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_subsidy', 'subsidyNull']));\r",
									"\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_VmePanel: Field Third Party Subsidy */\r",
									"pm.collectionVariables.set('tc_vmePanel_fieldsThirdPartySubsidy', JSON.stringify(['engineVME','floatNumber_11digits','floatNumber_12digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_subsidy', 'subsidyNull']));\r",
									"\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_VmePanel: Field Third Party Subsidy */\r",
									"pm.collectionVariables.set('tc_vmePanel_fieldsThirdPartySubsidy', JSON.stringify(['engineVME','floatNumber_4digits','floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_subsidy', 'subsidyNull']));\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "e326e90d-4d59-4996-b515-9c828f92b6cf",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Check cddPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_CddPanel_fieldsPanel: Field Bonus */\r",
									"pm.collectionVariables.set('tc_cddPanel_fieldsPanel_fieldsBonus', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_bonus', 'BonusNull'\r",
									"]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_CddPanel_fieldsPanel: Field Percent */\r",
									"pm.collectionVariables.set('tc_cddPanel_fieldsPanel_fieldsPercent', JSON.stringify(['floatNumber', 'negativeNumber', 'string','only_space', 'empty', 'no_percent', 'percentNull']));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "a5b144ed-72c0-4788-9e45-0298b2c119ad",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "cf9f67ff-aa02-43cb-9e7d-c25ef16e6f8a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Check marketingPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field businessActionAmount */\r",
									"pm.collectionVariables.set('marketingPanel_fieldsBusinessActionAmount', JSON.stringify(['floatNumber_11digits','floatNumber_12digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_businessActionAmount', 'businessActionAmountNull', 'BusinessActionPercent_obligatory']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field businessActionPercent */\r",
									"pm.collectionVariables.set('marketingPanel_fieldsBusinessActionPercent', JSON.stringify(['floatNumber_4digits','floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_businessActionAmount', 'businessActionAmountNull', 'BusinessActionPercent_No_obligatory']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field ContractCostAmount */\r",
									"pm.collectionVariables.set('marketingPanel_fieldsContractCostAmount', JSON.stringify(['floatNumber_11digits','floatNumber_12digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_contractCostAmount', 'contractCostAmountNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field Funding Cost Percent */\r",
									"pm.collectionVariables.set('marketingPanel_fieldsFundingCostPercent', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_contractCostAmount', 'contractCostAmountNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field Operation Average Percent */\r",
									"pm.collectionVariables.set('marketingPanel_fieldsOperationAveragePercent', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_operationAveragePercent', 'operationAveragePercentNull']));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field Registration Fee Amount */\r",
									"pm.collectionVariables.set('marketingPanel_fieldsRegistrationFeeAmount', JSON.stringify(['floatNumber_11digits','floatNumber_12digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_registrationFeeAmount', 'registrationFeeAmountNull']));\r",
									"\r",
									"\r",
									"\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "8a48a94c-560b-48b7-af9a-51741b7013e5",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "642913e5-fc4a-4dde-842e-518d407efaa2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				},
				{
					"name": "Check - engineReturnsPanel_fields",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5e21d776-3d27-4308-8929-07ca0b31e15b",
								"exec": [
									"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field Min Monthly Bank Rate Percent */\r",
									"pm.collectionVariables.set('engineReturnsPanel_fieldsMinMonthlyBankRatePercent', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field Max Monthly Client Rate Percent */\r",
									"pm.collectionVariables.set('engineReturnsPanel_fields', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field Increase Decrease Percent */\r",
									"pm.collectionVariables.set('engineReturnsPanel_fieldsIncreaseDecreasePercent', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field Payment Plan Category */\r",
									"pm.collectionVariables.set('engineReturnsPanel_fieldsPaymentPlanCategory', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field Payment Plans  */\r",
									"pm.collectionVariables.set('engineReturnsPanel_fieldsPaymentPlans', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field Rbp Margin Percent */\r",
									"pm.collectionVariables.set('engineReturnsPanel_fieldsRbpMarginPercent', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field Min Rbp Fee Percent */\r",
									"pm.collectionVariables.set('engineReturnsPanel_fieldsMinRbpFeePercent', JSON.stringify([]));\r",
									"\r",
									"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field Risk Rate Percent */\r",
									"pm.collectionVariables.set('engineReturnsPanel_fieldsRiskRatePercent', JSON.stringify([]));\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "4b4fec25-897d-4a3f-818d-ba18fcf68ce1",
								"exec": [
									"/* Importing variables and functions */\r",
									"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
									"var i = pm.collectionVariables.get('count')\r",
									"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
									"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
									"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
									"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
									"var lodash = require('lodash')\r",
									"/* Validating positive scenarios to create an engine */\r",
									"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
									"/* 1 */\r",
									"pm.test('Status code 201 to create an engine', () => {\r",
									"    pm.response.to.have.status(201);\r",
									"})\r",
									"/* 2 */\r",
									"pm.test('Response header contains location with id', () => {\r",
									"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
									"})\r",
									"/* 3 */\r",
									"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
									"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
									"let options = {\r",
									"    method: 'GET',\r",
									"    url: url_get,\r",
									"    header: headerComplete\r",
									"}\r",
									"pm.sendRequest(options, (err, res) => {\r",
									"    pm.test('Engine has been created in the database'), () => {\r",
									"       pm.expect(res).to.have.status(200)\r",
									"        pm.expect(res.engineId).to.eql(id)\r",
									"    }\r",
									"})\r",
									"/* 4 */\r",
									"pm.test(\"Response time is less than 5000ms\", () => {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "49222343-d216-41e5-9b9b-0c24b7fad9a2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				}
			],
			"id": "5a0ff4f4-d287-4c02-97bb-51e739eb5199",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "20a11164-ec0b-44e7-a62f-e1c4965216fe",
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"ignore_collectionScript\", false);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dc470972-98e2-4c2a-afba-64c5f9916289",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Requests to do",
			"item": [
				{
					"name": "/policies",
					"id": "945aa3f4-75af-4245-ae7e-40979f25ab4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{domain}}/policies"
					},
					"response": []
				},
				{
					"name": "/policies /:id",
					"id": "5b57a3a8-a0c3-4404-babb-5f0bf769f586",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{domain}}/policies/:id",
							"host": [
								"{{baseUrl}}{{domain}}"
							],
							"path": [
								"policies",
								":id"
							],
							"variable": [
								{
									"id": "e2355dbc-e212-4c87-a1a1-037be6bf1838",
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/policies /:id",
					"id": "393a8107-499c-48e7-9c7e-120f6df5467c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{domain}}/policies/:id",
							"host": [
								"{{baseUrl}}{{domain}}"
							],
							"path": [
								"policies",
								":id"
							],
							"variable": [
								{
									"id": "0afed5e4-9290-428d-b830-3559430a0770",
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/policies /:id",
					"id": "ef48a8ef-f511-4748-882e-3674975a4196",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{domain}}/policies/:id",
							"host": [
								"{{baseUrl}}{{domain}}"
							],
							"path": [
								"policies",
								":id"
							],
							"variable": [
								{
									"id": "0afed5e4-9290-428d-b830-3559430a0770",
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/policies/export",
					"id": "fc67c03f-a8d5-4b09-b3fa-a52b64237b81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}{{domain}}/policies/export"
					},
					"response": []
				},
				{
					"name": "/policies/import/upload",
					"id": "b05330a1-e655-4072-b688-3e1cfe9279ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}{{domain}}/policies/import/upload"
					},
					"response": []
				}
			],
			"id": "3661e4d3-d93d-4949-94f1-44a18a7933b7"
		},
		{
			"name": "[Test] Consulta Criterios de Taxa",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca32f32b-afa7-4391-a90c-b9c301a95836",
						"exec": [
							"/* const schema = {\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"line\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"startDate\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"endDate\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"engineType\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"engineStatus\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"integrationChannels\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"channelId\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"required\": [\r",
							"          \"channelId\"\r",
							"        ]\r",
							"      }\r",
							"    },\r",
							"    \"paymentPlanCategories\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"paymentPlanCategoryId\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"required\": [\r",
							"          \"paymentPlanCategoryId\"\r",
							"        ]\r",
							"      }\r",
							"    },\r",
							"    \"engineCriteria\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"promoName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"personType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"saleTypes\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"saleTypeId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"saleTypeId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"saleSubtypes\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"saleSubTypeId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"saleSubTypeId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"financialBrands\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"financialBrandId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"financialBrandId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"callCondition\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"rateType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"factorySubsidy\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"vendorSubsidy\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"thirdPartiesSubsidy\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"remunerations\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"remunerationId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"remunerationId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"delays\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"commissions\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"commissionId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"commissionId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"minDownPaymentPercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxDownPaymentPercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minLoanAmount\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxLoanAmount\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minModelRate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxModelRate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"min6Or7CpfDigits\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"max6Or7CpfDigits\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minTerm\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxTerm\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minVehiclePrice\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxVehiclePrice\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minManufactoryVehicleAge\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxManufactoryVehicleAge\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minModelVehicleAge\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxModelVehicleAge\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxProposalValidity\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"provinces\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"provinceId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"provinceId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"ratingsAbc\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"ratingAbcId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"ratingAbcId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"regionals\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"regionalId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"regionalId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"dealerships\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"filterCategory\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"dealershipBondType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"dealershipId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"dealershipGroupId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"filterCategory\",\r",
							"              \"dealershipBondType\",\r",
							"              \"dealershipId\",\r",
							"              \"dealershipGroupId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"filterCategory\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"brandId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"modelId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"versionId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"situation\": {\r",
							"                \"type\": \"string\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"filterCategory\",\r",
							"              \"brandId\",\r",
							"              \"modelId\",\r",
							"              \"versionId\",\r",
							"              \"situation\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"serviceProducts\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"productId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"subProductId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"periodInMonths\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"kilometrage\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"productId\",\r",
							"              \"subProductId\",\r",
							"              \"periodInMonths\",\r",
							"              \"kilometrage\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"insuranceProducts\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"productId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"subProductId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"periodInMonths\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"productId\",\r",
							"              \"subProductId\",\r",
							"              \"periodInMonths\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"renovaction\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"customers\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"cpfCnpj\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"origin\": {\r",
							"                \"type\": \"string\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"cpfCnpj\",\r",
							"              \"origin\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"classifiers\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"classifierId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"classifierId\"\r",
							"            ]\r",
							"          }\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"promoName\",\r",
							"        \"personType\",\r",
							"        \"saleTypes\",\r",
							"        \"saleSubtypes\",\r",
							"        \"financialBrands\",\r",
							"        \"callCondition\",\r",
							"        \"rateType\",\r",
							"        \"factorySubsidy\",\r",
							"        \"vendorSubsidy\",\r",
							"        \"thirdPartiesSubsidy\",\r",
							"        \"remunerations\",\r",
							"        \"delays\",\r",
							"        \"commissions\",\r",
							"        \"minDownPaymentPercent\",\r",
							"        \"maxDownPaymentPercent\",\r",
							"        \"minLoanAmount\",\r",
							"        \"maxLoanAmount\",\r",
							"        \"minModelRate\",\r",
							"        \"maxModelRate\",\r",
							"        \"min6Or7CpfDigits\",\r",
							"        \"max6Or7CpfDigits\",\r",
							"        \"minTerm\",\r",
							"        \"maxTerm\",\r",
							"        \"minVehiclePrice\",\r",
							"        \"maxVehiclePrice\",\r",
							"        \"minManufactoryVehicleAge\",\r",
							"        \"maxManufactoryVehicleAge\",\r",
							"        \"minModelVehicleAge\",\r",
							"        \"maxModelVehicleAge\",\r",
							"        \"maxProposalValidity\",\r",
							"        \"provinces\",\r",
							"        \"ratingsAbc\",\r",
							"        \"regionals\",\r",
							"        \"dealerships\",\r",
							"        \"vehicles\",\r",
							"        \"serviceProducts\",\r",
							"        \"insuranceProducts\",\r",
							"        \"renovaction\",\r",
							"        \"customers\",\r",
							"        \"classifiers\"\r",
							"      ]\r",
							"    },\r",
							"    \"engineReturns\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"terms\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"delays\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"commissions\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"commissionId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"commissionId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"remunerations\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"remunerationId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"remunerationId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"minMonthlyBankRatePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxMonthlyClientRatePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"increaseDecreasePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"paymentPlanCategory\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"paymentPlans\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"paymentPlanName\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"downPayment\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"defaultDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"occurrencies\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"occurrenceType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"installmentOccurrencies\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                  \"type\": \"number\"\r",
							"                }\r",
							"              },\r",
							"              \"monthOccurrencies\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"frequencyOccurrencies\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"reducedInstallmentAmount\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"installmentOccurrency\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minFixedPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxFixedPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"defaultFixedPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"balloonPayment\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"balloonPaymentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"defaultBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"increaseDecreaseInstallment\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"installmentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"increaseDecreaseinstallmentPercent\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"paymentPlanName\",\r",
							"              \"downPayment\",\r",
							"              \"minDownPayment\",\r",
							"              \"maxDownPayment\",\r",
							"              \"defaultDownPayment\",\r",
							"              \"occurrencies\",\r",
							"              \"occurrenceType\",\r",
							"              \"installmentOccurrencies\",\r",
							"              \"monthOccurrencies\",\r",
							"              \"frequencyOccurrencies\",\r",
							"              \"reducedInstallmentAmount\",\r",
							"              \"installmentOccurrency\",\r",
							"              \"minFixedPayment\",\r",
							"              \"maxFixedPayment\",\r",
							"              \"defaultFixedPayment\",\r",
							"              \"balloonPayment\",\r",
							"              \"balloonPaymentType\",\r",
							"              \"minBalloonPayment\",\r",
							"              \"maxBalloonPayment\",\r",
							"              \"defaultBalloonPayment\",\r",
							"              \"increaseDecreaseInstallment\",\r",
							"              \"installmentType\",\r",
							"              \"increaseDecreaseinstallmentPercent\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"vme\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"vmeReturnType\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"factorySubsidy\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"vendorSubsidy\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"thirdPartySubsidy\": {\r",
							"              \"type\": \"number\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"vmeReturnType\",\r",
							"            \"factorySubsidy\",\r",
							"            \"vendorSubsidy\",\r",
							"            \"thirdPartySubsidy\"\r",
							"          ]\r",
							"        },\r",
							"        \"cdd\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"bonus\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"percent\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"bonus\",\r",
							"              \"percent\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"rbpMarginPercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minRbpFeePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"marketing\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"businessActionAmount\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"businessActionPercent\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"contractCostAmount\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"fundingCostPercent\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"operationAveragePercent\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"registrationFeeAmount\": {\r",
							"              \"type\": \"number\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"businessActionAmount\",\r",
							"            \"businessActionPercent\",\r",
							"            \"contractCostAmount\",\r",
							"            \"fundingCostPercent\",\r",
							"            \"operationAveragePercent\",\r",
							"            \"registrationFeeAmount\"\r",
							"          ]\r",
							"        },\r",
							"        \"riskRatePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"fixedRates\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"term\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"delay\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"callCondition\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"downPaymentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"balloonPayment\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"balloonPaymentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"occurrences\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"occurrenceType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"installmentsForOccurrency\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                  \"type\": \"number\"\r",
							"                }\r",
							"              },\r",
							"              \"monthsOfOccurrency\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                  \"type\": \"number\"\r",
							"                }\r",
							"              },\r",
							"              \"periodicityOfOccurrency\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"reducedInstallmentAmount\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"installmentOccurrency\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minInstallmentOccurrence\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxInstallmentOccurrence\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"descendingIncreasingParcel\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"installmentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"increaseDecreasePlanPercent\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"monthlyBankRate\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"monthlyClientRate\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"subsidyType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"factorySubsidy\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"vendorSubsidy\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"thirdPartySubsidy\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"total\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"bankRate\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"clientRate\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"term\",\r",
							"              \"delay\",\r",
							"              \"callCondition\",\r",
							"              \"downPaymentType\",\r",
							"              \"minDownPayment\",\r",
							"              \"maxDownPayment\",\r",
							"              \"balloonPayment\",\r",
							"              \"balloonPaymentType\",\r",
							"              \"minBalloonPayment\",\r",
							"              \"maxBalloonPayment\",\r",
							"              \"occurrences\",\r",
							"              \"occurrenceType\",\r",
							"              \"installmentsForOccurrency\",\r",
							"              \"monthsOfOccurrency\",\r",
							"              \"periodicityOfOccurrency\",\r",
							"              \"reducedInstallmentAmount\",\r",
							"              \"installmentOccurrency\",\r",
							"              \"minInstallmentOccurrence\",\r",
							"              \"maxInstallmentOccurrence\",\r",
							"              \"descendingIncreasingParcel\",\r",
							"              \"installmentType\",\r",
							"              \"increaseDecreasePlanPercent\",\r",
							"              \"monthlyBankRate\",\r",
							"              \"monthlyClientRate\",\r",
							"              \"subsidyType\",\r",
							"              \"factorySubsidy\",\r",
							"              \"vendorSubsidy\",\r",
							"              \"thirdPartySubsidy\",\r",
							"              \"total\",\r",
							"              \"bankRate\",\r",
							"              \"clientRate\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"promotions\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"couponPrefix\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"discountPercentage\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"numberCoupons\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"couponPrefix\",\r",
							"              \"discountPercentage\",\r",
							"              \"numberCoupons\"\r",
							"            ]\r",
							"          }\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"terms\",\r",
							"        \"delays\",\r",
							"        \"commissions\",\r",
							"        \"remunerations\",\r",
							"        \"minMonthlyBankRatePercent\",\r",
							"        \"maxMonthlyClientRatePercent\",\r",
							"        \"increaseDecreasePercent\",\r",
							"        \"paymentPlanCategory\",\r",
							"        \"paymentPlans\",\r",
							"        \"vme\",\r",
							"        \"cdd\",\r",
							"        \"rbpMarginPercent\",\r",
							"        \"minRbpFeePercent\",\r",
							"        \"marketing\",\r",
							"        \"riskRatePercent\",\r",
							"        \"fixedRates\",\r",
							"        \"promotions\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"line\",\r",
							"    \"startDate\",\r",
							"    \"endDate\",\r",
							"    \"engineType\",\r",
							"    \"engineStatus\",\r",
							"    \"integrationChannels\",\r",
							"    \"paymentPlanCategories\",\r",
							"    \"engineCriteria\",\r",
							"    \"engineReturns\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema / API contract is valid\", () => {\r",
							"    pm.request.to.have.jsonSchema(schema);\r",
							"});\r",
							"*/\r",
							"\r",
							"console.log(pm.variables.replaceIn('{{$randomWord}}'));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "48c6323a-ecd6-4e34-b6b9-8252ea426b1e",
						"exec": [
							"pm.collectionVariables.set(\"ignore_collectionScript\", false);"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "05f5d763-a0b2-4c24-a545-da24628fbf29",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-rci-qa.bancorcibrasil.com.br/product/financing-offer/v1/financing-offers?_offset=0&_limit=100&_sort=description",
					"protocol": "https",
					"host": [
						"api-rci-qa",
						"bancorcibrasil",
						"com",
						"br"
					],
					"path": [
						"product",
						"financing-offer",
						"v1",
						"financing-offers"
					],
					"query": [
						{
							"key": "_offset",
							"value": "0"
						},
						{
							"key": "_limit",
							"value": "100"
						},
						{
							"key": "_sort",
							"value": "description"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b005d435-264f-4d5b-a66a-3068cea54ffc",
				"type": "text/javascript",
				"exec": [
					"/* This Pre-request is executed only for requests that 'ignore_collectionScript' == false */",
					"if (pm.variables.get('ignore_collectionScript') !== true) {",
					"",
					"    /* Variable access_token receives global function return 'getToken' */",
					"    eval(pm.globals.get(\"getToken\"))();",
					"",
					"    /* Create array with scenaries control */",
					"    pm.collectionVariables.set(\"controlAuth\", JSON.stringify(['access_only', 'client_only', 'no-client_no-access', 'with-client-access']))",
					"",
					"    /* Variable controlAuth receives array created to use in switch and count */",
					"    var controlAuth = JSON.parse(pm.collectionVariables.get(\"controlAuth\"))",
					"    var i = pm.collectionVariables.get(\"count\")",
					"",
					"    /* controlAuth = [\"access_only\",\"client_only\",\"no-client_no-access\",\"with-client-access\"] */",
					"    switch (controlAuth[i]) {",
					"",
					"        case 'access_only':",
					"            pm.request.headers.clear();",
					"            setTimeout(() => { pm.request.headers.add({ key: 'access_token', value: pm.environment.get(\"access_token\") }) }, 3000);",
					"            setTimeout(() => { console.info('Sent request no client_id'); }, 3000)",
					"            break;",
					"",
					"        default:",
					"            console.error('Error in autenthication. Check PRE-request script in the collection');",
					"            break;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "02fb8cbf-3fc8-4440-9e01-50faa1f13ee0",
				"type": "text/javascript",
				"exec": [
					"/* This Tests are executed only for requests that 'ignore_collectionScript' == false */",
					"if (pm.variables.get('ignore_collectionScript') !== true) {",
					"    /* 'Import' collection variables can be use in this script */",
					"    var controlAuth = JSON.parse(pm.collectionVariables.get(\"controlAuth\"))",
					"    var i = parseInt(pm.collectionVariables.get('count'))",
					"",
					"    /* controlAuth = [\"access_only\",\"client_only\",\"no-client_no-access\",\"with-client-access\"] */",
					"    switch (controlAuth[i]) {",
					"        case 'access_only':",
					"            pm.test(\"Status code 401 for request no client_id\", () => {",
					"                pm.response.to.have.status(401);",
					"            });",
					"            pm.test(\"Response body contains expected message\", () => {",
					"                pm.expect(pm.response.text()).to.include(\"Could not find a required APP in the request, identified by HEADER client_id.\");",
					"            });",
					"            i++;",
					"            pm.collectionVariables.set(\"count\", i);",
					"",
					"        case 'client_only':",
					"",
					"            /* Set headers to resend the request */",
					"            pm.request.headers.clear();",
					"            var options = {",
					"                method: pm.request.method.toString(),",
					"                url: pm.request.url.toString(),",
					"                header: { 'client_id': pm.environment.get('client_id') }",
					"            }",
					"            pm.sendRequest(options, (err, res) => {",
					"                pm.test(\"Status code 401 for request no access_token\", () => {",
					"                    pm.expect(res).to.have.status(401);",
					"                });",
					"                pm.test(\"Response body contains expected message\", () => {",
					"                    pm.expect(res.text()).to.include(\"Could not find a required Access Token in the request, identified by HEADER access_token\");",
					"                })",
					"            })",
					"            console.info('Sending request no access_token');",
					"            i++;",
					"            pm.collectionVariables.set(\"count\", i);",
					"",
					"        case 'no-client_no-access':",
					"",
					"            pm.request.headers.clear();",
					"            var options = {",
					"                method: pm.request.method.toString(),",
					"                url: pm.request.url.toString()",
					"            }",
					"            pm.sendRequest(options, (err, res) => {",
					"",
					"                pm.test(\"Status code 401 for request without client_id and access_token\", () => {",
					"                    pm.expect(res).to.have.status(401);",
					"                });",
					"                pm.test(\"Response body contains expected message\", () => {",
					"                    pm.expect(res.text()).to.include(\"Could not find a required APP in the request, identified by HEADER client_id.\");",
					"                })",
					"            })",
					"            console.info('Sent request no access_token and no client_id');",
					"            i++;",
					"            pm.collectionVariables.set(\"count\", i);",
					"",
					"        case 'with-client-access':",
					"",
					"            var options = {",
					"                method: pm.request.method.toString(),",
					"                url: pm.request.url.toString(),",
					"                header: { access_token: pm.environment.get('access_token'), client_id: pm.environment.get('client_id') }",
					"            }",
					"",
					"            pm.sendRequest(options, (err, res) => {",
					"",
					"                pm.test(\"Status code 200 for authenticated request with access_token and client_id\", () => {",
					"                    pm.expect(res.code).to.be.oneOf([201, 206]);",
					"                });",
					"            })",
					"            console.info('Sent authenticated request with access_token and client_id');",
					"            i = 0;",
					"            pm.collectionVariables.set(\"count\", i);",
					"            break;",
					"",
					"        default:",
					"            console.error('Error in autenthication. Check TESTS script in the collection');",
					"            break;",
					"    }",
					"",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"id": "28ac84f9-43ec-4b88-9e8d-afd7c5cc06c2",
			"key": "domain",
			"value": "/financing/offer/v1"
		},
		{
			"id": "10ab1e66-d3f6-4b96-a778-e3624a416828",
			"key": "ignore_collectionScript",
			"value": ""
		},
		{
			"id": "be122dc4-05da-48fd-afc9-34000ab90674",
			"key": "count",
			"value": "0",
			"type": "string"
		},
		{
			"id": "cb2a3524-e91a-42d4-ad1f-c45ceffbb6de",
			"key": "controlAuth",
			"value": ""
		},
		{
			"id": "b93de857-5325-49ab-8173-f741ed2f7d12",
			"key": "payloadEngine",
			"value": ""
		},
		{
			"id": "07d63c62-d355-4387-9958-4dc45039735d",
			"key": "tc_identifierPainel_fieldEngineType",
			"value": ""
		},
		{
			"id": "b80e4116-0484-4fc9-bc18-3ddf32e5ca7b",
			"key": "tc_identifierPainel_fieldLine",
			"value": ""
		},
		{
			"id": "567f449f-9356-48a1-ba89-1455bbba4a29",
			"key": "tc_identifierPainel_fieldStartDate",
			"value": ""
		},
		{
			"id": "22b8d296-b6f1-4642-a522-4fdac63bd7c7",
			"key": "tc_identifierPainel_fieldEndDate",
			"value": ""
		},
		{
			"id": "b8ed3fd7-9f7a-4599-81b2-b2bf5be08ea5",
			"key": "tc_identifierPainel_fieldPaymentPlanCategoryIds",
			"value": ""
		},
		{
			"id": "ba30d207-3b2e-49a7-b923-418fa67f56d3",
			"key": "tc_identifierPainel_fieldCallCondition",
			"value": ""
		},
		{
			"id": "84c17397-b4b0-4301-8859-637eac345d52",
			"key": "tc_identifierPainel_fieldIntegrationChannelIds",
			"value": ""
		}
	]
}