{
	"info": {
		"_postman_id": "6a491717-80a1-449f-ae05-5b4731e0416f",
		"name": "Financial Offer Core API_policies",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Utils",
			"item": [
				{
					"name": "Generate Payloads",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0581c3d-5333-4444-ae1b-a540350af915",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "afb9b652-a33e-4d7e-830a-8a9aed21603f",
								"exec": [
									"pm.collectionVariables.set('payloadEngine', JSON.stringify(\r",
									"    {\r",
									"        \"line\": 1,\r",
									"        \"startDate\": \"2023-03-24\",\r",
									"        \"endDate\": \"2023-03-24\",\r",
									"        \"engineType\": \"DELAY\",\r",
									"        \"engineStatus\": \"DRAFT\",\r",
									"        \"integrationChannels\": [\r",
									"            {\r",
									"                \"channelId\": 0\r",
									"            }\r",
									"        ],\r",
									"        \"paymentPlanCategories\": [\r",
									"            {\r",
									"                \"paymentPlanCategoryId\": 1\r",
									"            }\r",
									"        ],\r",
									"        \"engineCriteria\": {\r",
									"            \"promoName\": \"string\",\r",
									"            \"personType\": \"PF\",\r",
									"            \"saleTypes\": [\r",
									"                {\r",
									"                    \"saleTypeId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"saleSubtypes\": [\r",
									"                {\r",
									"                    \"saleSubTypeId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"financialBrands\": [\r",
									"                {\r",
									"                    \"financialBrandId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"callCondition\": true,\r",
									"            \"rateType\": \"FIXED\",\r",
									"            \"factorySubsidy\": true,\r",
									"            \"vendorSubsidy\": true,\r",
									"            \"thirdPartiesSubsidy\": true,\r",
									"            \"remunerations\": [\r",
									"                {\r",
									"                    \"remunerationId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"delays\": [\r",
									"                0\r",
									"            ],\r",
									"            \"commissions\": [\r",
									"                {\r",
									"                    \"commissionId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"minDownPaymentPercent\": 0.9999,\r",
									"            \"maxDownPaymentPercent\": 0.9999,\r",
									"            \"minLoanAmount\": 999999999.99,\r",
									"            \"maxLoanAmount\": 999999999.99,\r",
									"            \"minModelRate\": 1,\r",
									"            \"maxModelRate\": 99,\r",
									"            \"min6Or7CpfDigits\": 1,\r",
									"            \"max6Or7CpfDigits\": 99,\r",
									"            \"minTerm\": 99,\r",
									"            \"maxTerm\": 99,\r",
									"            \"minVehiclePrice\": 999999999.99,\r",
									"            \"maxVehiclePrice\": 999999999.99,\r",
									"            \"minManufactoryVehicleAge\": 20,\r",
									"            \"maxManufactoryVehicleAge\": 23,\r",
									"            \"minModelVehicleAge\": 20,\r",
									"            \"maxModelVehicleAge\": 23,\r",
									"            \"maxProposalValidity\": 99,\r",
									"            \"provinces\": [\r",
									"                {\r",
									"                    \"provinceId\": 123\r",
									"                }\r",
									"            ],\r",
									"            \"ratingsAbc\": [\r",
									"                {\r",
									"                    \"ratingAbc\": \"AA\"\r",
									"                }\r",
									"            ],\r",
									"            \"regionals\": [\r",
									"                {\r",
									"                    \"regionalId\": 123\r",
									"                }\r",
									"            ],\r",
									"            \"dealerships\": [\r",
									"                {\r",
									"                    \"filterCategory\": \"ELEGIBLE\",\r",
									"                    \"dealershipBondType\": \"DEALERSHIP\",\r",
									"                    \"dealershipId\": 1,\r",
									"                    \"dealershipGroupId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"vehicles\": [\r",
									"                {\r",
									"                    \"filterCategory\": \"ELEGIBLE\",\r",
									"                    \"brandId\": 0,\r",
									"                    \"modelId\": 0,\r",
									"                    \"versionId\": 0,\r",
									"                    \"situation\": \"NEW\"\r",
									"                }\r",
									"            ],\r",
									"            \"serviceProducts\": [\r",
									"                {\r",
									"                    \"productId\": 0,\r",
									"                    \"subProductId\": 0,\r",
									"                    \"periodInMonths\": 24,\r",
									"                    \"kilometrage\": 0\r",
									"                }\r",
									"            ],\r",
									"            \"insuranceProducts\": [\r",
									"                {\r",
									"                    \"productId\": 0,\r",
									"                    \"subProductId\": 0,\r",
									"                    \"periodInMonths\": 24\r",
									"                }\r",
									"            ],\r",
									"            \"renovaction\": true,\r",
									"            \"customers\": [\r",
									"                {\r",
									"                    \"cpfCnpj\": \"121.412.112-01\",\r",
									"                    \"origin\": \"file\"\r",
									"                }\r",
									"            ],\r",
									"            \"classifiers\": [\r",
									"                {\r",
									"                    \"classifierId\": 1\r",
									"                }\r",
									"            ]\r",
									"        },\r",
									"        \"engineReturns\": {\r",
									"            \"terms\": [\r",
									"                0\r",
									"            ],\r",
									"            \"delays\": [\r",
									"                0\r",
									"            ],\r",
									"            \"commissions\": [\r",
									"                {\r",
									"                    \"commissionId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"remunerations\": [\r",
									"                {\r",
									"                    \"remunerationId\": 1\r",
									"                }\r",
									"            ],\r",
									"            \"minMonthlyBankRatePercent\": 0.9999,\r",
									"            \"maxMonthlyClientRatePercent\": 0.9999,\r",
									"            \"increaseDecreasePercent\": 0.9999,\r",
									"            \"paymentPlanCategory\": 1,\r",
									"            \"paymentPlans\": [\r",
									"                {\r",
									"                    \"paymentPlanName\": \"Safra 1\",\r",
									"                    \"downPayment\": \"PERCENT\",\r",
									"                    \"minDownPayment\": 0.9999,\r",
									"                    \"maxDownPayment\": 0.9999,\r",
									"                    \"defaultDownPayment\": 0.9999,\r",
									"                    \"occurrencies\": true,\r",
									"                    \"occurrenceType\": \"INSTALLMENT_OCCURRENCIES\",\r",
									"                    \"installmentOccurrencies\": [\r",
									"                        5\r",
									"                    ],\r",
									"                    \"monthOccurrencies\": [\r",
									"                        \"Janeiro\"\r",
									"                    ],\r",
									"                    \"frequencyOccurrencies\": 12,\r",
									"                    \"reducedInstallmentAmount\": 999999999.99,\r",
									"                    \"installmentOccurrency\": \"PERCENT\",\r",
									"                    \"minFixedPayment\": 0.9999,\r",
									"                    \"maxFixedPayment\": 0.9999,\r",
									"                    \"defaultFixedPayment\": 0.9999,\r",
									"                    \"balloonPayment\": true,\r",
									"                    \"balloonPaymentType\": \"PERCENT\",\r",
									"                    \"minBalloonPayment\": 0.9999,\r",
									"                    \"maxBalloonPayment\": 0.9999,\r",
									"                    \"defaultBalloonPayment\": 0.9999,\r",
									"                    \"increaseDecreaseInstallment\": true,\r",
									"                    \"installmentType\": \"INCREASE\",\r",
									"                    \"increaseDecreaseinstallmentPercent\": 0.9999\r",
									"                }\r",
									"            ],\r",
									"            \"vme\": {\r",
									"                \"vmeReturnType\": \"PERCENT\",\r",
									"                \"factorySubsidy\": 0.9999,\r",
									"                \"vendorSubsidy\": 0.9999,\r",
									"                \"thirdPartySubsidy\": 0.9999\r",
									"            },\r",
									"            \"cdd\": [\r",
									"                {\r",
									"                    \"bonus\": \"Bonus Plus\",\r",
									"                    \"percent\": 0.9999\r",
									"                }\r",
									"            ],\r",
									"            \"rbpMarginPercent\": 0.9999,\r",
									"            \"minRbpFeePercent\": 0.9999,\r",
									"            \"marketing\": {\r",
									"                \"businessActionAmount\": 999999999.99,\r",
									"                \"businessActionPercent\": 0.9999,\r",
									"                \"contractCostAmount\": 999999999.99,\r",
									"                \"fundingCostPercent\": 0.9999,\r",
									"                \"operationAveragePercent\": 0.9999,\r",
									"                \"registrationFeeAmount\": 999999999.99\r",
									"            },\r",
									"            \"riskRatePercent\": 0.9999,\r",
									"            \"fixedRates\": [\r",
									"                {\r",
									"                    \"term\": 0,\r",
									"                    \"delay\": 0,\r",
									"                    \"callCondition\": true,\r",
									"                    \"downPaymentType\": \"PERCENT\",\r",
									"                    \"minDownPayment\": 0.9999,\r",
									"                    \"maxDownPayment\": 0.9999,\r",
									"                    \"balloonPayment\": true,\r",
									"                    \"balloonPaymentType\": \"PERCENT\",\r",
									"                    \"minBalloonPayment\": 0.9999,\r",
									"                    \"maxBalloonPayment\": 0.9999,\r",
									"                    \"occurrences\": true,\r",
									"                    \"occurrenceType\": \"INSTALLMENT_OCCURRENCIES\",\r",
									"                    \"installmentsForOccurrency\": [\r",
									"                        99\r",
									"                    ],\r",
									"                    \"monthsOfOccurrency\": [\r",
									"                        12\r",
									"                    ],\r",
									"                    \"periodicityOfOccurrency\": 12,\r",
									"                    \"reducedInstallmentAmount\": 12,\r",
									"                    \"installmentOccurrency\": \"PERCENT\",\r",
									"                    \"minInstallmentOccurrence\": 0.9999,\r",
									"                    \"maxInstallmentOccurrence\": 0.9999,\r",
									"                    \"descendingIncreasingParcel\": true,\r",
									"                    \"installmentType\": \"INCREASE\",\r",
									"                    \"increaseDecreasePlanPercent\": 0.9999,\r",
									"                    \"monthlyBankRate\": 0.9999,\r",
									"                    \"monthlyClientRate\": 0.9999,\r",
									"                    \"subsidyType\": \"PERCENT\",\r",
									"                    \"factorySubsidy\": 0.9999,\r",
									"                    \"vendorSubsidy\": 0.9999,\r",
									"                    \"thirdPartySubsidy\": 0.9999,\r",
									"                    \"total\": 0.9999,\r",
									"                    \"bankRate\": 0.9999,\r",
									"                    \"clientRate\": 0.9999\r",
									"                }\r",
									"            ],\r",
									"            \"promotions\": [\r",
									"                {\r",
									"                    \"couponPrefix\": \"string\",\r",
									"                    \"discountPercentage\": 0.9999,\r",
									"                    \"numberCoupons\": 0\r",
									"                }\r",
									"            ]\r",
									"        }\r",
									"    }\r",
									"))\r",
									"\r",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"id": "7244f97f-3b8b-487e-bf1a-528b0d2a9ce0",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "client_id",
								"value": "{{client_id}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\": \"32458031099\",\r\n    \"password\": \"Blade@123\",\r\n    \"remember\": null\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{baseUrl}}/core/authentication/v1/login"
					},
					"response": []
				}
			],
			"id": "a21067f2-f95d-4542-aa8e-0817adaa78a0",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "423fe275-c017-4022-8280-a6697256803a",
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"ignore_collectionScript\", true);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "5bde3d92-f2fe-461f-b391-f32686051c17",
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"ignore_collectionScript\", true);"
						]
					}
				}
			]
		},
		{
			"name": "POST by Panels",
			"item": [
				{
					"name": "Integrar com rotas de consulta/execution",
					"item": [
						{
							"name": "Check vehiclesPanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "5e186857-ee80-430d-9940-ce13372ea3f3",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating vehiclesPanel.filterCategory */\r",
											"var tc_attributeFilterCategory = JSON.parse(pm.collectionVariables.get('tc_servicePanel_fieldAttributeFilterCategory'))\r",
											"/* tc_fieldFilterCategory = ['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_filteCategory', 'filteCategoryNull', 'multiplesOptions'] */\r",
											"switch (tc_attributeFilterCategory[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].filterCategory = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent vehicles_filterCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].filterCategory = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vehicles_filterCategory number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].filterCategory = '@&~^*_+-./%!()'\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vehicles_filterCategory with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].filterCategory = '  '\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vehicles_filterCategory with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].filterCategory = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty vehicles_filterCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_filteCategory':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].filterCategory\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_filteCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'filteCategoryNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].filterCategory = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null vehicles_filterCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].filterCategory = [\"ELIGIBLE\", \"INELIGIBLE\"]\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiples vehicles_filterCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - vehicles_filterCategory');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating vehiclesPanel.brandId */\r",
											"var tc_fieldBrandId = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldBrandId'))\r",
											"/* tc_fieldBrandId = ['inexistentId', 'string', 'only_space', 'empty', 'no_brandId', 'brandIdNull', 'inactiveId', 'multiplesOptions'] */\r",
											"switch (tc_fieldBrandId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].brandId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId vehicles_brandId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].brandId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string vehicles_brandId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].brandId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vehicles_brandId with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].brandId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty vehicles_brandId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_brandId':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].brandId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_brandId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'brandIdNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].brandId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null vehicles_brandId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/brands?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idInactive = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].brandId = idInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive vehicles_brandId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/brands',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id1 = resGet.json()[0].id\r",
											"            let id2 = resGet.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].brandId = [\r",
											"                    {\r",
											"                        \"channelId\": id1\r",
											"                    },\r",
											"                    {\r",
											"                        \"channelId\": id2\r",
											"                    }]\r",
											"\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for multiples vehicles_brandId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - vehicles_brandId');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating vehiclesPanel.modelId */\r",
											"var tc_fieldModelId = JSON.parse(pm.collectionVariables.get('tc_servicePanel_fieldModelId'))\r",
											"/* tc_fieldModelId = ['inexistentId', 'string', 'only_space', 'empty', 'noModel_noBrand', 'noModel_withBrand', 'modelNull_BrandNull', 'modelNull_withBrand', 'only_model', 'modelFromAnotherBrand', 'inactiveId', 'multiplesOptions'] */\r",
											"switch (tc_fieldModelId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].modelId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId modelId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].modelId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string modelId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].modelId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for modelId with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].modelId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty modelId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'noModel_noBrand':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].brandId\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].modelId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for noModel_noBrand', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'noModel_withBrand':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].modelId\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/brands?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idActive = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].brandId = idActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for noModel_withBrand', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'modelNull_BrandNull':\r",
											"        payloadEngine.engineCriteria.vehicles[0].brandId = null\r",
											"        payloadEngine.engineCriteria.vehicles[0].modelId = null\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for modelNull_BrandNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'modelNull_withBrand':\r",
											"        payloadEngine.engineCriteria.vehicles[0].modelId = null\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/brands?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idActive = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].brandId = idActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for noModel_withBrand', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_model':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].brandId\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/models?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idActive = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].modelId = idActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for noModel_withBrand', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'modelFromAnotherBrand':\r",
											"        /* Consulting all brands and defining a brand in idBrand */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/brands?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGetBrand) => {\r",
											"            let idBrand = resGetBrand.json()[0].id\r",
											"            /* Consulting all models */\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + '/dominio/subdominio/model?status=On',\r",
											"                header: headerComplete\r",
											"            }, (err, resGetModel) => {\r",
											"                /* Put resGetModel in modelList variable */\r",
											"                let modelList = resGetModel.json()\r",
											"                /* Create a new array to receive models with brandId different of idBrand */\r",
											"                let modelFromAnotherBrand = []\r",
											"                /* Checking models of another brands */\r",
											"                for (let brand in modelList) {\r",
											"                    if (modelList[brand].brandId !== idBrand) {\r",
											"                        modelFromAnotherBrand.push(modelList[brand].brandId)\r",
											"                    }\r",
											"                }\r",
											"                /* Getting a first model of another brand */\r",
											"                let idModel = modelFromAnotherBrand[0]\r",
											"                /* Set payload with another brand (idBrand) */\r",
											"                payloadEngine.engineCriteria.vehicles[0].brandId = idBrand\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.vehicles[0].modelId = idModel\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for modelFromAnotherBrand', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/models?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idInactive = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].modelId = idInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive modelId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/models?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id1 = resGet.json()[0].id\r",
											"            let id2 = resGet.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].modelId = [\r",
											"                    {\r",
											"                        \"modelId\": id1\r",
											"                    },\r",
											"                    {\r",
											"                        \"modelId\": id2\r",
											"                    }\r",
											"                ]\r",
											"            })\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiples modelId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - modelId');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating vehiclesPanel.versionId */\r",
											"var tc_fieldVersionId = JSON.parse(pm.collectionVariables.get('tc_servicePanel_fieldVersionId'))\r",
											"/* tc_fieldVersionId = ['inexistentId', 'string', 'only_space', 'empty', 'noVersion_noModel', 'noVersion_withModel', 'versionNull_modelNull', 'versionNull_withModel', 'version_noModel_withBrand', 'only_version', 'versionFromAnotherModel', 'inactiveId', 'multiplesOptions'] */\r",
											"switch (tc_fieldVersionId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].versionId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId versionId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].versionId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string versionId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].versionId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for versionId with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].versionId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty versionId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'noVersion_noModel':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].modelId\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].versionId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for noVersion_noModel', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'noVersion_withModel':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].versionId\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/models?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idActive = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].modelId = idActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for noVersion_withModel', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'versionNull_modelNull':\r",
											"        payloadEngine.engineCriteria.vehicles[0].modelId = null\r",
											"        payloadEngine.engineCriteria.vehicles[0].versionId = null\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for versionNull_modelNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'versionNull_withModel':\r",
											"        payloadEngine.engineCriteria.vehicles[0].versionId = null\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/models?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idActive = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].modelId = idActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for versionNull_withModel', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'version_noModel_withBrand':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].modelId\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/brands?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idABrand = resGet.json()[0].id\r",
											"            payloadEngine.engineCriteria.vehicles[0].brandId = idActive\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/dominio/subdominio/version?status=On?brandId=${idBrand}`,\r",
											"                header: headerComplete\r",
											"            }, (err, resVersion) => {\r",
											"                let idVersion = resVersion.json()[0].id\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.vehicles[0].versionId = idVersion\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for version_noModel_withBrand', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_version':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].brandId\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].modelId\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/version?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resVersion) => {\r",
											"            let idVersion = resVersion.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].versionId = idVersion\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for only_version', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'versionFromAnotherModel':\r",
											"        /* Consulting all brands and defining a brand in idBrand */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/brands?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGetBrand) => {\r",
											"            let idBrand = resGetBrand.json()[0].id\r",
											"            /* Consulting all models of this brand and defining a model in idModel */\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/dominio/subdominio/model?status=On?brand=${idBrand}`,\r",
											"                header: headerComplete\r",
											"            }, (err, resGetModel) => {\r",
											"                let idModel = resGetModel.json()[0].id\r",
											"                pm.sendRequest({\r",
											"                    method: 'GET',\r",
											"                    url: pm.environment.get('baseUrl') + '/dominio/subdominio/version?status=On',\r",
											"                    header: headerComplete\r",
											"                }, (err, resGetVersion) => {\r",
											"                    /* Put resGetVersion in versionList variable */\r",
											"                    let versionList = resGetVersion.json()\r",
											"                    /* Create a new array to receive models with modelId different of idModel */\r",
											"                    let versionFromAnotherModel = []\r",
											"                    /* Checking version of another model */\r",
											"                    for (let model in versionList) {\r",
											"                        if (versionList[model].modelId !== idModel) {\r",
											"                            versionFromAnotherModel.push(modelList[model].modelId)\r",
											"                        }\r",
											"                    }\r",
											"                    /* Getting a first version of another model */\r",
											"                    let idVersion = versionFromAnotherModel[0]\r",
											"                    /* Set payload with another brand and model (idBrand e idModel) */\r",
											"                    payloadEngine.engineCriteria.vehicles[0].brandId = idBrand\r",
											"                    payloadEngine.engineCriteria.vehicles[0].modelId = idModel\r",
											"                    pm.sendRequest({\r",
											"                        method: pm.request.method.toString(),\r",
											"                        url: pm.request.url.toString(),\r",
											"                        header: headerComplete,\r",
											"                        body: payloadEngine.engineCriteria.vehicles[0].modelId = idVersion\r",
											"                    }, (err, res) => {\r",
											"                        pm.test('Status 400 for versionFromAnotherModel', () => {\r",
											"                            pm.expect(res).to.be.equal(400);\r",
											"                            //VALIDAR MENSAGEM\r",
											"                        })\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/versions?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idInactive = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].versionId = idInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive versionId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/versions?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id1 = resGet.json()[0].id\r",
											"            let id2 = resGet.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.vehicles[0].versionId = [\r",
											"                    {\r",
											"                        \"channelId\": id1\r",
											"                    },\r",
											"                    {\r",
											"                        \"channelId\": id2\r",
											"                    }\r",
											"                ]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for multiples versionId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - versionId');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating vehiclesPanel.situation */\r",
											"var tc_fieldSituation = JSON.parse(pm.collectionVariables.get('tc_servicePanel_fieldSituation'))\r",
											"/* tc_fieldSituation = ['inexistent', 'number', 'only_space', 'empty', 'no_situation', 'situationNull', 'multiplesOptions'] */\r",
											"switch (tc_fieldSituation[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].situation = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent situation', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: cpayloadEngine.engineCriteria.vehicles[0].situation = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for situation number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].situation = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for situation with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].situation = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty situation', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_situation':\r",
											"        delete payloadEngine.engineCriteria.vehicles[0].situation\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_situation', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'situationNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].situation = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null situation', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vehicles[0].situation = ['NEW', 'OLD']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiples situation', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - situation');\r",
											"        break;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "9d222b83-4fa7-4cf0-b0f3-5229b8c222ee",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_VehiclesPanel: Attribute FilterCategory */\r",
											"pm.collectionVariables.set('tc_vehiclesPanel_attributeFilterCategory', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_filteCategory', 'filteCategoryNull', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VehiclesPanel: Field BrandId */\r",
											"pm.collectionVariables.set('tc_vehiclesPanel_fieldBrandId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_brandId', 'brandIdNull', 'inactiveId', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VehiclesPanel: Field ModelId */\r",
											"pm.collectionVariables.set('tc_vehiclesPanel_fieldModelId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'noModel_noBrand', 'noModel_withBrand', 'modelNull_BrandNull', 'modelNull_withBrand', 'only_model', 'modelFromAnotherBrand', 'inactiveId', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VehiclesPanel: Field VersionId */\r",
											"pm.collectionVariables.set('tc_vehiclesPanel_fieldVersionId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'noVersion_noModel', 'noVersion_withModel', 'versionNull_modelNull', 'versionNull_withModel', 'version_noModel_withBrand', 'only_version', 'versionFromAnotherModel', 'inactiveId', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VehiclesPanel: Field Situation */\r",
											"pm.collectionVariables.set('tc_vehiclesPanel_fieldSituation', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_situation', 'situationNull', 'multiplesOptions']));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "6a78e81e-7eaa-43cf-a631-0404f44d3a78",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Check identifierPanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "aa660eb4-3ae1-482f-af9b-b3f732350bec",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var editBody_childKey = eval(pm.globals.get('editBody_childKey'))\r",
											"var editBody_manyFields = eval(pm.globals.get('editBody_manyFields'))\r",
											"var editBody_masterKey = eval(pm.globals.get('editBody_masterKey'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"const moment = require('moment')\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating identifierPanel.engineType */\r",
											"var tc_fieldEngineType = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldEngineType'))\r",
											"/* tc_fieldEngineType = ['inexistent', 'number', 'only_space', 'empty', 'no_engineType', 'engineTypeNull', 'multiplesOptions'] */\r",
											"switch (tc_fieldEngineType[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineType\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for engineType number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineType\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for engineType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineType\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_engineType':\r",
											"        delete payloadEngine.engineType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineType\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineType\", ['Delay', 'CDD'])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - EngineType');\r",
											"        break;\r",
											"}\r",
											"\r",
											"var tc_attributeEngineStatus = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_attributeEngineStatus'))\r",
											"/* tc_atributeEngineStatus = ['inexistent', 'number', 'only_space', 'empty', 'no_engineStatus', 'engineStatusNull', 'multiplesOptions']; */\r",
											"switch (tc_attributeEngineStatus[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for engineStatus number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for engineStatus with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_engineStatus':\r",
											"        delete payloadEngine.engineStatus\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", ['DRAFT', 'REMOVAL_REJECTED'])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions engineStatus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difDraft':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", 'INCLUSION_REQUESTED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status INCLUSION_REQUESTED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", 'INCLUSION_APPROVED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status INCLUSION_APPROVED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", 'INCLUSION_REJECTED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status INCLUSION_REJECTED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", 'REMOVAL_REJECTED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status REMOVAL_REJECTED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", 'REMOVAL_APPROVED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status REMOVAL_APPROVED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"engineStatus\", 'REMOVAL_REQUESTED')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for create engine with status REMOVAL_REQUESTED', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - EngineStatus');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.line */\r",
											"var tc_fieldLine = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldLine'))\r",
											"/* tc_fieldLine = ['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_line', 'lineNull', 'bigNumber'] */\r",
											"switch (tc_fieldLine[i]) {\r",
											"    case 'floatNumber':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(2)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"line\", parseFloat(floatNumber))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for float number line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        let negativeNumber = -_.random(0, 100)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"line\", negativeNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"line\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"line\", 0)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for line = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"line\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for line with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"line\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_line':\r",
											"        delete payloadEngine.line\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'lineNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"line\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null line', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'bigNumber':\r",
											"        let bigNumber = _.random(1000000000000000, 1000000000000000000000)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"line\", bigNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for line big number', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - Line');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.startDate */\r",
											"var tc_fieldStartDate = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldStartDate'))\r",
											"/* tc_fieldStartDate = ['inexistentDate', 'alphanumeric', 'wrongAmountCharacters', 'number', 'only_space', 'emptyDate', 'no_startDate', 'startDateNull', 'startDateBiggerThenEndDate']*/\r",
											"switch (tc_fieldStartDate[i]) {\r",
											"    case 'inexistentDate':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"startDate\", \"2023-01-32\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'alphanumeric':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"startDate\", \"AAAA-01-31\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for alphanumeric startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'wrongAmountCharacters':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"startDate\", \"23-01-31\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for startDate with wrong Amount Characters', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"startDate\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for startDate number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"startDate\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for startDate only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'emptyDate':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"startDate\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_startDate':\r",
											"        delete payloadEngine.startDate\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'startDateNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"startDate\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'startDateBiggerThenEndDate':\r",
											"        let pastDate = moment(pm.variables.replaceIn('{{$randomDatePast}}')).format('YYYY-MM-DD')\r",
											"        let futureDate = moment(pm.variables.replaceIn('{{$randomDateFuture}}')).format('YYYY-MM-DD')\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_manyFields(payloadEngine, [{ \"startDate\": futureDate }, { \"endDate\": pastDate }])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for startDate Bigger Then endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - startDate');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.endDate */\r",
											"var tc_fieldEndDate = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldEndDate'))\r",
											"/* tc_fieldEndDate = ['inexistentDate', 'alphanumeric', 'wrongAmountCharacters', 'spaceBetweenNumbers', 'number', 'only_space', 'emptyDate', 'no_endDate', 'endDateNull', 'endDateLessThenStartDate']*/\r",
											"switch (tc_fieldEndDate[i]) {\r",
											"    case 'inexistentDate':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"endDate\", \"2023-01-32\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'alphanumeric':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"endDate\", \"AAAA-01-31\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for alphanumeric endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'wrongAmountCharacters':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"endDate\", \"23-01-31\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for endDate with wrong Amount Characters', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"endDate\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for endDate number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"endDate\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for endDate only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'emptyDate':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"endDate\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_endDate':\r",
											"        delete payloadEngine.endDate\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'endDateNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"endDate\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null endDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'endDateLessThenStartDate':\r",
											"        let pastDate = moment(pm.variables.replaceIn('{{$randomDatePast}}')).format('YYYY-MM-DD')\r",
											"        let futureDate = moment(pm.variables.replaceIn('{{$randomDateFuture}}')).format('YYYY-MM-DD')\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_manyFields(payloadEngine, [{ \"startDate\": futureDate }, { \"endDate\": pastDate }])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for endDate Less Then startDate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - endDate');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.paymentPlanCategory */\r",
											"var tc_fieldPaymentPlanCategory = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldPaymentPlanCategory'))\r",
											"/* tc_fieldPaymentPlanCategory = ['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_paymentPlanCategory', 'paymentPlanCategoryNull', 'engineVME', 'difEngineVME', 'multiplesOptions']*/\r",
											"switch (tc_fieldPaymentPlanCategory[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategory = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent paymentPlanCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategoryId = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for paymentPlanCategories number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategoryId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for paymentPlanCategories only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategoryId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty paymentPlanCategories', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_paymentPlanCategory':\r",
											"        delete payloadEngine.paymentPlanCategories\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_paymentPlanCategories', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'paymentPlanCategoryNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.paymentPlanCategories[0].paymentPlanCategoryId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for null paymentPlanCategories', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineVME':\r",
											"        /* Consulting existent names */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/paymentPlanCategory',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            /* Get a random object inside response and filter by name */\r",
											"            let name = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: editBody_manyFields(payloadEngine, [{ \"engineType\": \"VME\" }, { \"paymentPlanCategories\": [{ \"paymentPlanCategoryId\": name }] }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for paymentPlanCategories with VME engine', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        /* Consulting existent names */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/paymentPlanCategory',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            /* Get a random object inside response and filter by name */\r",
											"            let name = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: editBody_manyFields(payloadEngine, [{ \"engineType\": \"CDD\" }, { \"paymentPlanCategories\": [{ \"paymentPlanCategoryId\": name }] }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 201 for paymentPlanCategories with different VME engine', () => {\r",
											"                    pm.expect(res).to.be.equal(201);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        /* Consulting actives ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/paymentPlanCategory?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let name1 = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"            let name2 = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: editBody_manyFields(payloadEngine, [{ \"paymentPlanCategories\": [{ \"paymentPlanCategoryId\": name1 }, { \"paymentPlanCategoryId\": name2 }] }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for multiples paymentPlanCategories', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - paymentPlanCategory');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.rateType */\r",
											"var tc_fieldRateType = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldRateType'))\r",
											"/* tc_fieldRateType = ['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_rateType', 'rateTypeNull', 'engineVME', 'difEngineVME', 'multiplesOptions'] */\r",
											"switch (tc_fieldRateType[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"rateType\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent rateType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"rateType\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rateType number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"rateType\", \"@&~^*_+-./%!()\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rateType with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"rateType\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rateType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"rateType\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty rateType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_rateType':\r",
											"        delete payloadEngine.engineCriteria.rateType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_rateType', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'rateTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"rateType\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for rateType null', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineVME':\r",
											"        editBody_masterKey(payloadEngine, \"engineType\", \"VME\")\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.rateType = 'DYNAMIC'\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldRateType with VME engine', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        editBody_masterKey(payloadEngine, \"engineType\", \"CDD\")\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.rateType = 'DYNAMIC'\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for rateType with engine different VME', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"rateType\", [\"DINAMIC\", \"FIXED\"])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rateType with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - rateType');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.callCondition */\r",
											"var tc_fieldCallCondition = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldCallCondition'))\r",
											"/* tc_fieldCallCondition = ['string', 'number', 'specialCharacter', 'only_space', 'empty', 'no_callCondition', 'callConditionNull', 'engineVME', 'difEngineVME']*/\r",
											"switch (tc_fieldCallCondition[i]) {\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"callCondition\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"callCondition\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"callCondition\", \"@&~^*_+-./%!()\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"callCondition\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"callCondition\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty callCondition', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_callCondition':\r",
											"        delete payloadEngine.engineCriteria.callCondition\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_callCondition', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'callConditionNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"engineCriteria\", \"callCondition\", null)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for callCondition null', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineVME':\r",
											"        editBody_masterKey(payloadEngine, \"engineType\", \"VME\")\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.callCondition = true\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for callCondition with VME engine', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        editBody_masterKey(payloadEngine, \"engineType\", \"RISK\")\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.callCondition = false\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for callCondition with engine different VME', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.integrationChannelIds */\r",
											"var tc_fieldIntegrationChannel = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldIntegrationChannel'))\r",
											"/* tc_fieldIntegrationChannel = ['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', ' inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions']*/\r",
											"switch (tc_fieldIntegrationChannel[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId integrationChannel', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for integrationChannel string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = \"@&~^*_+-./%!()\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for integrationChannel with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for integrationChannel with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty integrationChannel', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_integrationChannel':\r",
											"        delete payloadEngine.integrationChannels\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_integrationChannel', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'integrationChannelNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.integrationChannels[0].channelId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for integrationChannel null', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/integrationChannel?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.integrationChannels[0].channelId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive integrationChannel', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/integrationChannel',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: editBody_manyFields(payloadEngine, [{\r",
											"                    \"integrationChannels\": [\r",
											"                        {\r",
											"                            \"channelId\": id\r",
											"                        },\r",
											"                        {\r",
											"                            \"channelId\": id\r",
											"                        }\r",
											"                    ]\r",
											"                }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated integrationChannel', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/integrationChannel',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id1 = resGet.json()[0].id\r",
											"            let id2 = resGet.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: editBody_manyFields(payloadEngine, [{\r",
											"                    \"integrationChannels\": [\r",
											"                        {\r",
											"                            \"channelId\": id1\r",
											"                        },\r",
											"                        {\r",
											"                            \"channelId\": id2\r",
											"                        }\r",
											"                    ]\r",
											"                }])\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 201 for multiples integrationChannel', () => {\r",
											"                    pm.expect(res).to.be.equal(201);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - integrationChannel');\r",
											"        break;\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "386d2b28-3589-480f-b76e-1e64dae431c1",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field engineType */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldEngineType', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_engineType', 'engineTypeNull', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: attribute engineStatus */\r",
											"pm.collectionVariables.set('tc_identifierPainel_attributeEngineStatus', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_engineStatus', 'engineStatusNull', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: FieldLine */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldLine', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_line', 'lineNull', 'bigNumber']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field startDate */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldStartDate', JSON.stringify(['inexistentDate', 'alphanumeric', 'wrongAmountCharacters', 'number', 'only_space', 'emptyDate', 'no_startDate', 'startDateNull', 'startDateBiggerThenEndDate']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field endDate */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldEndDate', JSON.stringify(['inexistentDate', 'emptyDate', 'alphanumeric', 'wrongAmountCharacters', 'number', 'only_space', 'empty', 'no_endDate', 'endDateNull', 'endDateLessThenStartDate']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field paymentPlanCategoryIds */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldPaymentPlanCategory', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_paymentPlanCategory', 'paymentPlanCategoryNull', 'engineVME', 'difEngineVME', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field rateType */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldRateType', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_rateType', 'rateTypeNull', 'engineVME', 'difEngineVME', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field callCondition */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldCallCondition', JSON.stringify(['string', 'number', 'specialCharacter', 'only_space', 'empty', 'no_callCondition', 'callConditionNull', 'engineVME', 'difEngineVME']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_IdentifierPanel: Field integrationChannelIds */\r",
											"pm.collectionVariables.set('tc_identifierPainel_fieldIntegrationChannelIds', JSON.stringify(['inexistentId', 'string', 'specialCharacter', 'only_space', 'empty', 'no_integrationChannelIds', 'integrationChannelIdsNull', 'inativeId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cd61f682-c69f-4c36-a415-31d880e6882f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/* Valid Payload to create an engine: DELAY, PAYMENT_PLAN_CATEGORY, CDD, INCREASE_DECREASE, RBP_MARGIN, MARKETING, PAYMENT_PLAN, TERM, REMUNERATION, RETURN, RISK, MINIMUM_BANK_RATE, MAX_CLIENT_RATE, MINIMUM_RBP_RATE, VME, FIXED_RATES, PROMOTIONS */\r\n\r\n\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Check insuranceProducts_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "c1b8b5c9-475c-4f23-ac79-ca98e5a6b77d",
										"exec": [
											"/* Importing variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var editBody_grandchildKey = eval(pm.globals.get('editBody_grandchildKey'))\r",
											"var editBody_manyFields = eval(pm.globals.get('editBody_manyFields'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. Response header. 3. Creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"})\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating insurancePanel.productId */\r",
											"var tc_fieldProductId = JSON.parse(pm.collectionVariables.get('tc_insuranceProducts_fieldProductId'))\r",
											"/* tc_fieldProductId' = ['inexistentId', 'string', 'only_space', 'empty', 'negativeNumber', 'floatNumber','no_productId', 'productIdNull', 'inactiveId'] */\r",
											"switch (tc_fieldProductId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.insuranceProducts[0].productId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent productId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.insuranceProducts[0].productId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string ProductId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.insuranceProducts[0].productId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ProductId string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.insuranceProducts[0].productId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty ProductId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.insuranceProducts[0].productId = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ProductId negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.insuranceProducts[0].productId = parseFloat(-_.random(0, 100, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ProductId with floatNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_productId':\r",
											"        delete payloadEngine.engineCriteria.insuranceProducts[0].productId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_productId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'productIdNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.insuranceProducts[0].productId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ProductId null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/products?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let idInactive = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.insuranceProducts[0].productId = idInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for string ProductId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - Insurance Panel');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating insurancePanel.subProductId */\r",
											"var tc_fieldSubProductId = JSON.parse(pm.collectionVariables.get('tc_insuranceProducts_fieldSubProductId'))\r",
											"/* tc_fieldSubProductId = ['inexistentId', 'string', 'only_space', 'empty', 'negativeNumber', 'no_subProductId', 'subProductIdNull', 'only_subProduct', 'subProductFromAnotherProduct', 'inactiveId', 'multiplesOptions'] */\r",
											"switch (tc_fieldSubProductId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = _.random(10000, 11000)\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inexistent SubProductId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for string SubProductId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"\r",
											"            })\r",
											"\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = \"  \"\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for SubProductId only space', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = \"\"\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for empty SubProductId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = -_.random(0, 100)\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for negative number subProdutoId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_subProductId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: delete payloadEngine.engineCriteria.insuranceProducts[0].subProductId\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for no_subProductId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'subProductIdNull':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = null\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for SubProductId null', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_subProduct':\r",
											"        delete payloadEngine.engineCriteria.insuranceProducts[0].productId\r",
											"        delete payloadEngine.engineCriteria.insuranceProducts[0].periodInMonthsId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].subProductId = _.random(1, 10)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for only_subProduct', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'subProductFromAnotherProduct':\r",
											"        /* Consulting all products and defining a product in idProduct */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGetProduct) => {\r",
											"            let idProduct = resGetProduct.json()[0].id\r",
											"            /* Consulting all actives subProducts*/\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + '/subproducts?status=On?',\r",
											"                header: headerComplete\r",
											"            }, (err, resGetSubproduct) => {\r",
											"                /* Put resGetSubproduct in subproductList variable */\r",
											"                let subproductList = resGetSubproduct.json()\r",
											"                /* Create a new array to receive products with productId different of idProduct */\r",
											"                let subProductFromAnotherProduct = []\r",
											"                /* Checking subproducts of periodList */\r",
											"                for (let product in subproductList) {\r",
											"                    if (periodList[product].productId !== idProduct) {\r",
											"                        subProductFromAnotherProduct.push(subproductList[product].idProduct)\r",
											"                    }\r",
											"                }\r",
											"                /* Getting a first period of another Product */\r",
											"                let idSubproduct = subProductFromAnotherProduct[0]\r",
											"                /* Set payload with another product and subproduct (idProduct e idSubproduct) */\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubproduct\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for subProductFromAnotherProduct', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/sub-products?status=off?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSub) => {\r",
											"                let idInactive = resSub.json()[0].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idInactive\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for SubProductId with inactiveId', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/sub-products?status=on?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSub) => {\r",
											"                let idActive1 = resSub.json()[0].id\r",
											"                let idActive2 = resSub.json()[1].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].subProductId = [idActive1, idActive2]\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for multiplesOptions subProductId', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - Insurance Panel');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating insurancePanel.periodInMonths */\r",
											"var tc_fieldPeriodInMonths = JSON.parse(pm.collectionVariables.get('tc_insuranceProducts_fieldPeriodInMonths'))\r",
											"/* 'inexistent', 'string', 'only_space', 'empty', 'negativeNumber', 'no_periodInMonthsId', 'periodInMonthsIdNull', 'periodFromAnotherSubproduct', 'periodFromAnotherProduct', 'only_PeriodInMonthsId' */\r",
											"\r",
											"switch (tc_fieldPeriodInMonthsId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subProducts?status=On?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSubProd) => {\r",
											"                let idSubProduct = resSubProd.json()[0].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubProduct\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].periodInMonths = _.random(10000, 11000)\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for inexistent periodInMonths', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subProducts?status=On?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSubProd) => {\r",
											"                let idSubProduct = resSubProd.json()[0].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubProduct\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].periodInMonths = pm.variables.replaceIn('{{$randomWord}}')\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for string PeriodInMonthsId', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subProducts?status=On?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSubProd) => {\r",
											"                let idSubProduct = resSubProd.json()[0].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubProductpm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].periodInMonths = \"  \"\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for string PeriodInMonthsId', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subProducts?status=On?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSubProd) => {\r",
											"                let idSubProduct = resSubProd.json()[0].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubProduct\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].periodInMonths = \"\"\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for empty PeriodInMonthsId', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subProducts?status=On?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSubProd) => {\r",
											"                let idSubProduct = resSubProd.json()[0].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubProduct\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].periodInMonths = -_.random(0, 100)\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for negative number PeriodInMonthsId', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_periodInMonthsId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subProducts?status=On?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSubProd) => {\r",
											"                let idSubProduct = resSubProd.json()[0].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubProduct\r",
											"                delete payloadEngine.engineCriteria.insuranceProducts[0].per\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for no_periodInMonths', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'periodInMonthsIdNull':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete,\r",
											"        }, (err, resProd) => {\r",
											"            let idProduct = resProd.json()[0].id\r",
											"            payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subProducts?status=On?productId=${idProduct}`,\r",
											"                header: headerComplete,\r",
											"            }, (err, resSubProd) => {\r",
											"                let idSubProduct = resSubProd.json()[0].id\r",
											"                payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubProduct\r",
											"                pm.sendRequest({\r",
											"                    method: pm.request.method.toString(),\r",
											"                    url: pm.request.url.toString(),\r",
											"                    header: headerComplete,\r",
											"                    body: payloadEngine.engineCriteria.insuranceProducts[0].periodInMonths = null\r",
											"                }, (err, res) => {\r",
											"                    pm.test('Status 400 for PeriodInMonthsId null', () => {\r",
											"                        pm.expect(res).to.be.equal(400);\r",
											"                        //VALIDAR MENSAGEM\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'periodFromAnotherSubproduct':\r",
											"        /* Consulting all products and defining a product in idProduct */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGetProduct) => {\r",
											"            let idProduct = resGetProduct.json()[0].id\r",
											"            /* Consulting all subProducts of this Product and defining a subProduct in idSubProduct */\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subproducts?status=On?product=${idProduct}`,\r",
											"                header: headerComplete\r",
											"            }, (err, resGetSubproduct) => {\r",
											"                let idSubproduct = resGetSubproduct.json()[0].id\r",
											"                pm.sendRequest({\r",
											"                    method: 'GET',\r",
											"                    url: pm.environment.get('baseUrl') + '/periodInMonth?status=On',\r",
											"                    header: headerComplete\r",
											"                }, (err, resGetPeriod) => {\r",
											"                    /* Put resGetPeriod in periodList variable */\r",
											"                    let periodList = resGetPeriod.json()\r",
											"                    /* Create a new array to receive subproducts with subproductId different of idSubproduct */\r",
											"                    let periodFromAnotherSubproduct = []\r",
											"                    /* Checking subproducts of periodList */\r",
											"                    for (let subproduct in periodList) {\r",
											"                        if (periodList[subproduct].subproductId !== idSubproduct) {\r",
											"                            periodFromAnotherSubproduct.push(periodList[subproduct].idSubproduct)\r",
											"                        }\r",
											"                    }\r",
											"                    /* Getting a first period of another subproduct */\r",
											"                    let idPeriod = periodFromAnotherSubproduct[0]\r",
											"                    /* Set payload with another product and subproduct (idProduct e idSubproduct) */\r",
											"                    payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"                    payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubproduct\r",
											"                    pm.sendRequest({\r",
											"                        method: pm.request.method.toString(),\r",
											"                        url: pm.request.url.toString(),\r",
											"                        header: headerComplete,\r",
											"                        body: payloadEngine.engineCriteria.insuranceProducts[0].periodInMonths = idPeriod\r",
											"                    }, (err, res) => {\r",
											"                        pm.test('Status 400 for periodFromAnotherSubproduct', () => {\r",
											"                            pm.expect(res).to.be.equal(400);\r",
											"                            //VALIDAR MENSAGEM\r",
											"                        })\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'periodFromAnotherProduct':\r",
											"        /* Consulting all products and defining a product in idProduct */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/products?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGetProduct) => {\r",
											"            let idProduct = resGetProduct.json()[0].id\r",
											"            /* Consulting all subProducts of this Product and defining a subProduct in idSubProduct */\r",
											"            pm.sendRequest({\r",
											"                method: 'GET',\r",
											"                url: pm.environment.get('baseUrl') + `/subproducts?status=On?product=${idProduct}`,\r",
											"                header: headerComplete\r",
											"            }, (err, resGetSubproduct) => {\r",
											"                let idSubproduct = resGetSubproduct.json()[0].id\r",
											"                pm.sendRequest({\r",
											"                    method: 'GET',\r",
											"                    url: pm.environment.get('baseUrl') + '/periodInMonth?status=On',\r",
											"                    header: headerComplete\r",
											"                }, (err, resGetPeriod) => {\r",
											"                    /* Put resGetPeriod in periodList variable */\r",
											"                    let periodList = resGetPeriod.json()\r",
											"                    /* Create a new array to receive products with productId different of idProduct */\r",
											"                    let periodFromAnotherProduct = []\r",
											"                    /* Checking subproducts of periodList */\r",
											"                    for (let product in periodList) {\r",
											"                        if (periodList[product].productId !== idProduct) {\r",
											"                            periodFromAnotherProduct.push(periodList[product].idProduct)\r",
											"                        }\r",
											"                    }\r",
											"                    /* Getting a first period of another Product */\r",
											"                    let idPeriod = periodFromAnotherProduct[0]\r",
											"                    /* Set payload with another product and subproduct (idProduct e idSubproduct) */\r",
											"                    payloadEngine.engineCriteria.insuranceProducts[0].productId = idProduct\r",
											"                    payloadEngine.engineCriteria.insuranceProducts[0].subProductId = idSubproduct\r",
											"                    pm.sendRequest({\r",
											"                        method: pm.request.method.toString(),\r",
											"                        url: pm.request.url.toString(),\r",
											"                        header: headerComplete,\r",
											"                        body: payloadEngine.engineCriteria.insuranceProducts[0].periodInMonths = idPeriod\r",
											"                    }, (err, res) => {\r",
											"                        pm.test('Status 400 for periodFromAnotherProduct', () => {\r",
											"                            pm.expect(res).to.be.equal(400);\r",
											"                            //VALIDAR MENSAGEM\r",
											"                        })\r",
											"                    })\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_PeriodInMonthsId':\r",
											"        delete payloadEngine.engineCriteria.insuranceProducts[0].productId\r",
											"        delete payloadEngine.engineCriteria.insuranceProducts[0].subProductId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].periodInMonthsId = _.random(1, 10)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for only_PeriodInMonthsId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - PeriodInMonths');\r",
											"        break;\r",
											"\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "75716b34-ee4d-4e88-a152-763e1c401aca",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_InsurancePanel: Field ProductId */\r",
											"pm.collectionVariables.set('tc_insuranceProducts_fieldProductId', JSON.stringify(['inexistentId', 'string', 'empty', 'only_space', 'negativeNumber', 'floatNumber','no_productId', 'productIdNull', 'inactiveId']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_InsurancePanel: Field SubProductId */\r",
											"pm.collectionVariables.set('tc_insuranceProducts_fieldSubProductId', JSON.stringify(['inexistentId', 'string', 'only_space', 'negativeNumber', 'empty', 'no_subProduct', 'subProductNull', 'only_subProduct', 'subProductFromAnotherProduct', 'inactiveId', ]));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_InsurancePanel: Field PeriodInMonths */\r",
											"pm.collectionVariables.set('tc_insuranceProducts_fieldPeriodInMonthsId', JSON.stringify(['inexistent', 'string', 'only_space', 'negativeNumber', 'empty', 'no_periodInMonthsId', 'periodInMonthsIdNull', 'periodFromAnotherSubproduct', 'periodFromAnotherProduct', 'only_period']));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4b9c7412-4621-481a-aab8-b49ea922c3be",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Check cddPanel_fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_CddPanel: Field Bonus */\r",
											"pm.collectionVariables.set('tc_cddPanel_fieldBonus', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_bonus', 'bonusNull'\r",
											"]));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_CddPanel: Field Percent */\r",
											"pm.collectionVariables.set('tc_cddPanel_fieldPercent', JSON.stringify(['intNumber', 'floatNumber_3digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_percent', 'percentNull']));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "a5b144ed-72c0-4788-9e45-0298b2c119ad",
										"exec": [
											"/* Importing variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. Response header. 3. Creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"})\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating cddPanel.bonus */\r",
											"var tc_fieldBonus = JSON.parse(pm.collectionVariables.get('tc_cddPanel_fieldBonus'))\r",
											"/* tc_fieldBonus = ['inexistent', 'number', 'only_space', 'empty', 'no_bonus', 'bonusNull'] */\r",
											"switch (tc_fieldBonus[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].bonus = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent bonus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].bonus = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for bonus number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].bonus = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for bonus with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].bonus = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty bonus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_bonus':\r",
											"        delete payloadEngine.engineReturns.cdd[0].bonus\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_bonus', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'bonusNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].bonus = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_bonusNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - CDD panel_Field Bonus');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating cddPanel.percent */\r",
											"var tc_fieldPercent = JSON.parse(pm.collectionVariables.get('tc_cddPanel_fieldPercent'))\r",
											"/* tc_fieldPercent = ['intNumber', 'floatNumber_3digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_percent', 'percentNull'] */\r",
											"switch (tc_fieldPercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber Percent Field', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for percent wit float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for percent with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for percent string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for percent equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for percent with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty percent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for percent = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_percent':\r",
											"        delete payloadEngine.engineReturns.cdd[0].percent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_percent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'percentNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null percent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - CDD panel_Field Percent');\r",
											"        break;\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "cf9f67ff-aa02-43cb-9e7d-c25ef16e6f8a",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Check crmListPanel_fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "11c56fc7-187e-4cb7-abe0-3c11762ad047",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_CrmListPanel: Field CpfCnpj */\r",
											"pm.collectionVariables.set('tc_crmListPanel_fieldCpfCnpj', JSON.stringify(['>_11character_and_<_14character', '<_11character', '>_14character', 'number', 'no_cpfCnpj', 'cpfCnpjNull', 'valid_cpfCnpj']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_CrmListPanel: Field Origin */\r",
											"pm.collectionVariables.set('tc_crmListPanel_fieldOrigin', JSON.stringify(['invalidExtension', 'number', 'no_origin', 'originNull']));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "d2f7ba9c-c43c-479d-85bd-a5a9646b7bd0",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var cnpj = eval(pm.globals.get('cnpj'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. Response header. 3. Creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating engineCriteriaPanel.customers.cpfCnpj */\r",
											"var tc_fieldCpfCnpj = JSON.parse(pm.collectionVariables.get('tc_crmListPanel_fieldCpfCnpj'))\r",
											"/* tc_fieldCpfCnpj = ['>_11character_and_<_14character', '<_11character', '>_14character', 'number', 'no_cpfCnpj', 'cpfCnpjNull', 'valid_cpfCnpj'] */\r",
											"switch (tc_fieldCpfCnpj[i]) {\r",
											"    case '>_11character_and_<_14character':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].cpfCnpj = _.random(10 ** 11, 9999999999999)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for cpfCnpj >_11character_and_<_14character', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '<_11character':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].cpfCnpj = _.random(1, 99999999999)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for cpfCnpj <_11character', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '>_14character':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].cpfCnpj = _.random(10 ** 14, 999999999999999)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for cpfCnpj >_14character', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].cpfCnpj = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for cpfCnpj number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_cpfCnpj':\r",
											"        delete payloadEngine.engineCriteria.customers[0].cpfCnpj\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_cpfCnpj', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'cpfCnpjNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].cpfCnpj = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null cpfCnpj', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'valid_cpfCnpj': /* Definir se passa CPF ou CNPJ */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].cpfCnpj = cnpj()\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null cpfCnpj', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - CRM Lista_Field cpfCnpj');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineCriteriaPanel.customers.origin */\r",
											"var tc_fieldOrigin = JSON.parse(pm.collectionVariables.get('tc_cddPanel_fieldOrigin'))\r",
											"/* tc_fieldOrigin = ['invalidExtension', 'number', 'no_origin', 'originNull'] */\r",
											"switch (tc_fieldOrigin[i]) {\r",
											"    case 'invalidExtension':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].origin = 'file.' + pm.variables.replaceIn('{{$randomCommonFileExt}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for origin with invalidExtension', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].origin = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for origin number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_origin':\r",
											"        delete payloadEngine.engineCriteria.customers[0].origin\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_origin', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'originNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.customers[0].origin = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null origin', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - CRM List_Field origin');\r",
											"        break;\r",
											"} "
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "2c643fac-75f8-49d4-bcfe-e02e3517aaef",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Check dealershipsPanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "024e5c56-f98e-41a2-818d-44b3c60204df",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating engineCriteriaPanel.dealershipsPanel.attributeFilterCategory */\r",
											"var tc_attributeFilterCategory = JSON.parse(pm.collectionVariables.get('tc_dealershipsPanel_attributeFilterCategory'))\r",
											"/* tc_attributeFilterCategory = ['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_filterCategory', 'filterCategoryNull', 'multiplesOptions'] */\r",
											"switch (tc_attributeFilterCategory[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].filterCategory = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent FilterCategory ', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].filterCategory = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for FilterCategory type number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].filterCategory = \"@&~^*_+-./%!()\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for FilterCategory with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].filterCategory = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for FilterCategory only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].filterCategory = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty FilterCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_filterCategory':\r",
											"        delete payloadEngine.engineCriteria.dealerships[0].filterCategory\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_filterCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'filterCategoryNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].filterCategory = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for filterCategory null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].filterCategory = ['ELEGIBLE', 'INELEGIBLE']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for filterCategory multiplesOptions', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - dealershipsPanel_attributeFilterCategory');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineCriteriaPanel.dealershipsPanel.dealershipBondType */\r",
											"var tc_fieldDealershipBondType = JSON.parse(pm.collectionVariables.get('tc_dealershipsPanel_fieldDealershipBondType'))\r",
											"/* tc_fieldDealershipBondType = ['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_dealershipBondType', 'dealershipBondTypeNull', 'multiplesOptions'] */\r",
											"switch (tc_fieldDealershipBondType[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipBondType = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent dealershipBondType ', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipBondType = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipBondType type number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipBondType = \"@&~^*_+-./%!()\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipBondType with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipBondType = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipBondType only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipBondType = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty dealershipBondType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_dealershipBondType':\r",
											"        delete payloadEngine.engineCriteria.dealerships[0].dealershipBondType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_dealershipBondType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'dealershipBondTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipBondType = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipBondType null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipBondType = ['DEALERSHIP', 'GROUP']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipBondType multiplesOptions', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - dealershipsPanel_fieldDealershipBondType');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineCriteriaPanel.dealershipsPanel.dealershipId */\r",
											"var tc_fieldDealershipId = JSON.parse(pm.collectionVariables.get('tc_dealershipsPanel_fieldDealershipId'))\r",
											"/* tc_fieldDealershipId = ['inexistentId', 'string', 'only_space', 'empty', 'no_dealershipIdForBondDealership', 'dealershipIdNullForBondDealership', 'inactiveId', 'dealershipIdForBondGroup', 'multiplesOptions'] */\r",
											"switch (tc_fieldDealershipId[i]) {\r",
											"    case 'inexistentId':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId dealershipId ', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipId type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipId only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty dealershipId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_dealershipIdForBondDealership':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"        delete payloadEngine.engineCriteria.dealerships[0].dealershipId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_dealershipId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'dealershipIdNullForBondDealership':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipId null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({ method: 'GET', url: pm.environment.get('baseUrl') + '/dealerships?status=Off' }, (err, resAll) => {\r",
											"            let dealershipInactive = resAll.json()[0].id\r",
											"            payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.dealerships[0].dealershipId = dealershipInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive dealershipId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'dealershipIdForBondGroup':\r",
											"        pm.sendRequest({ method: 'GET', url: pm.environment.get('baseUrl') + '/dealerships?status=On' }, (err, resAll) => {\r",
											"            let dealershipActive = resAll.json()[0].id\r",
											"            payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.dealerships[0].dealershipId = dealershipActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for dealershipId multiplesOptions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({ method: 'GET', url: pm.environment.get('baseUrl') + '/dealerships?status=On' }, (err, resAll) => {\r",
											"            let dealershipActive1 = resAll.json()[0].id\r",
											"            let dealershipActive2 = resAll.json()[1].id\r",
											"            payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.dealerships[0].dealershipId = [dealershipActive1, dealershipActive2]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for dealershipId multiplesOptions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - dealershipsPanel_fieldDealershipId');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineCriteriaPanel.dealershipsPanel.dealershipGroupId */\r",
											"var tc_fieldDealershipGroupId = JSON.parse(pm.collectionVariables.get('tc_dealershipsPanel_fieldDealershipGroupId'))\r",
											"/* tc_fieldDealershipGroupId = ['inexistentId', 'string', 'only_space', 'empty', 'no_groupIdForBondGroup', 'groupIdNullForBondGroup', 'inactiveId', 'groupIdForBondDealership', 'multiplesOptions'] */\r",
											"switch (tc_fieldDealershipGroupId[i]) {\r",
											"    case 'inexistentId':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipGroupId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId dealershipGroupId ', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipGroupId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipGroupId type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipGroupId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for dealershipGroupId only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipGroupId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty dealershipGroupId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_groupIdForBondGroup':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"        delete payloadEngine.engineCriteria.dealerships[0].dealershipGroupId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_groupIdForBondGroup', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'groupIdNullForBondGroup':\r",
											"        payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.dealerships[0].dealershipGroupId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for groupIdNullForBondGroup null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({ method: 'GET', url: pm.environment.get('baseUrl') + '/dealershipsGroup?status=Off' }, (err, resAll) => {\r",
											"            let dealershipGrouptInactive = resAll.json()[0].id\r",
											"            payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.dealerships[0].dealershipGroupId = dealershipGrouptInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive dealershipGroupId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'groupIdForBondDealership':\r",
											"        pm.sendRequest({ method: 'GET', url: pm.environment.get('baseUrl') + '/dealershipsGroup?status=On' }, (err, resAll) => {\r",
											"            let dealershipGroupActive = resAll.json()[0].id\r",
											"            payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'DEALERSHIP'\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.dealerships[0].dealershipGroupId = dealershipGroupActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for groupIdForBondDealership', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({ method: 'GET', url: pm.environment.get('baseUrl') + '/dealershipsGroup?status=On' }, (err, resAll) => {\r",
											"            let dealershipGroupActive1 = resAll.json()[0].id\r",
											"            let dealershipGroupActive2 = resAll.json()[1].id\r",
											"            payloadEngine.engineCriteria.dealerships[0].dealershipBondType = 'GROUP'\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.dealerships[0].dealershipGroupId = [dealershipGroupActive1, dealershipGroupActive2]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for dealershipGroupId multiplesOptions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - dealershipsPanel_fieldDealershipGroupId');\r",
											"        break;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "5b9a5d0f-c8fe-45f8-9864-3ccde424a968",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_DealershipPanel: Attribute FilterCategory */\r",
											"pm.collectionVariables.set('tc_dealershipsPanel_attributeFilterCategory', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_filterCategory', 'filterCategoryNull', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_DealershipPanel: Field DealershipBondType */\r",
											"pm.collectionVariables.set('tc_dealershipsPanel_fieldDealershipBondType', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_dealershipBondType', 'dealershipBondTypeNull', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_DealershipPanel: Field DealershipId */\r",
											"pm.collectionVariables.set('tc_dealershipsPanel_fieldDealershipId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_dealershipIdForBondDealership', 'dealershipIdNullForBondDealership', 'inactiveId', 'dealershipIdForBondGroup', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_DealershipPanel: Field DealershipGroupId */\r",
											"pm.collectionVariables.set('tc_dealershipsPanel_fieldDealershipGroupId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_groupIdForBondGroup', 'groupIdNullForBondGroup', 'inactiveId', 'groupIdForBondDealership', 'multiplesOptions']));\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5205b4c2-74eb-4e99-b697-718107b60aa2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Check returnsPanel_fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "5e21d776-3d27-4308-8929-07ca0b31e15b",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_termPanel: Field terms */\r",
											"pm.collectionVariables.set('tc_termsPanel_fieldTerms', JSON.stringify(['negativeNumber', 'floatNumber', 'zero', 'string', 'only_space', 'empty', 'no_terms', 'termsNull', 'difEngineTerm']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_DelaysPanel: Field Delays */\r",
											"pm.collectionVariables.set('tc_delaysPanel_fieldDelays', JSON.stringify(['negativeNumber', 'floatNumber', 'zero', 'string', 'only_space', 'empty', 'no_delays', 'delaysNull', 'difEngineDelays']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_CommissionsPanel: Field CommissionId */\r",
											"pm.collectionVariables.set('tc_commissionsPanel_fieldCommissionId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_commissionId', 'commissionIdNull', 'inactiveId', 'multiplesOptions', 'difEngineReturn']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_RemunerationsPanel: Field RemunerationId */\r",
											"pm.collectionVariables.set('tc_remunerationsPanel_fieldRemunerationId', JSON.stringify(['inexistentId', 'string', 'negativeNumber', 'floatNumber', 'only_space', 'empty', 'no_remunerationId', 'remunerationIdNull', 'inactiveId', 'multiplesOptions', 'difEngineRemuneration'\r",
											"]));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field MinMonthlyBankRatePercent */\r",
											"pm.collectionVariables.set('tc_engineReturnsPanel_fieldMinMonthlyBankRatePercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_minMonthlyBank', 'minMonthlyBankNull', 'difEngineMinBankRate']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field MaxMonthlyClientRatePercent */\r",
											"pm.collectionVariables.set('tc_engineReturnsPanel_fieldMaxMonthlyClientRatePercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_maxMonthlyClient', 'maxMonthlyClientNull', 'difEngineMaxClientRate']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field IncreaseDecreasePercent */\r",
											"pm.collectionVariables.set('tc_engineReturnsPanel_fieldIncreaseDecreasePercent', JSON.stringify(['intNumber', 'floatNumber_3digits', 'negativeNumber', 'bigNumber', 'string', 'zero', 'only_space', 'empty', 'no_increaseDecrease', 'increaseDecreaseNull', 'difEngineIncreaseDecrease']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field PaymentPlanCategory */\r",
											"pm.collectionVariables.set('tc_engineReturnsPanel_fieldPaymentPlanCategory', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_paymentPlanCategory', 'paymentPlanCategoryNull', 'inactiveId', 'multiplesOptions', 'difEnginepaymentPlanCategory']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field RbpMarginPercent */\r",
											"pm.collectionVariables.set('tc_engineReturnsPanel_fieldRbpMarginPercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_rbpMargin', 'rbpMarginNull', 'difEngineRbpMargin']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field MinRbpFeePercent */\r",
											"pm.collectionVariables.set('tc_engineReturnsPanel_fieldMinRbpFeePercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_RbpFee', 'RbpFeeNull', 'difEngineMinRbpRate']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_EngineReturnsPanel: Field RiskRatePercent */\r",
											"pm.collectionVariables.set('tc_engineReturnsPanel_fieldRiskRatePercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_riskRate', 'riskRateNull', 'difEngineRisk']));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "4b4fec25-897d-4a3f-818d-ba18fcf68ce1",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating engineReturns.terms */\r",
											"var tc_fieldTerms = JSON.parse(pm.collectionVariables.get('tc_termsPanel_fieldTerms'))\r",
											"/* tc_fieldTerms = ['negativeNumber', 'floatNumber', 'zero', 'string', 'only_space', 'empty', 'no_terms', 'termsNull', 'difEngineTerm'] */\r",
											"payloadEngine.engineType = 'TERM'\r",
											"switch (tc_fieldTerms[i]) {\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = -_.random(1, 10)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent terms ', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = parseFloat(_.random(1, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for terms type number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for terms equals 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for terms type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for terms only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty terms', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_terms':\r",
											"        delete payloadEngine.engineReturns.terms[0]\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_terms', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'termsNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for terms null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineTerm':\r",
											"        payloadEngine.engineType = 'DELAY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = parseInt(pm.variables.replaceIn('{{$randomInt'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for terms with different engineType ', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.terms');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.Delays */\r",
											"var tc_fieldDelays = JSON.parse(pm.collectionVariables.get('tc_delaysPanel_fieldDelays'))\r",
											"/* tc_fieldDelays = ['negativeNumber', 'floatNumber', 'zero', 'string', 'only_space', 'empty', 'no_delays', 'delaysNull', 'difEngineDelays'] */\r",
											"payloadEngine.engineType = 'DELAY'\r",
											"switch (tc_fieldDelays[i]) {\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.delays[0] = -_.random(1, 10)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent delays ', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.delays[0] = parseFloat(_.random(1, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for delays type number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.delays[0] = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for delays equals 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.delays[0] = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for delays type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.delays[0] = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for delays only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.delays[0] = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty delays', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_delays':\r",
											"        delete payloadEngine.engineReturns.delays[0]\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_delays', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'delaysNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.delays[0] = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for delays null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineDelays':\r",
											"        payloadEngine.engineType = 'RETURN'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.delays[0] = parseInt(pm.variables.replaceIn('{{$randomInt'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for delays with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.Delays');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.commissions.commissionId */\r",
											"var tc_fieldCommissionId = JSON.parse(pm.collectionVariables.get('tc_commissionsPanel_fieldCommissionId'))\r",
											"/* tc_fieldCommissionId = ['inexistentId', 'string', 'only_space', 'empty', 'no_commissionId', 'commissionIdNull', 'inactiveId', 'multiplesOptions', 'difEngineReturn'] */\r",
											"payloadEngine.engineType = 'RETURN'\r",
											"switch (tc_fieldCommissionId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.commissions[0].commissionId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId CommissionId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.commissions[0].commissionId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for CommissionId type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.commissions[0].commissionId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for CommissionId only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.commissions[0].commissionId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty CommissionId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_commissionId':\r",
											"        delete payloadEngine.engineReturns.commissions[0].commissionId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_CommissionId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'commissionIdNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.commissions[0].commissionId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for CommissionId null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/returns?status:Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let commissionInactive = resAll.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.commissions[0].commissionId = commissionInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactiveId CommissionId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/returns?status:On',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let commissionActive1 = resAll.json()[0].id\r",
											"            let commissionActive2 = resAll.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.commissions[0].commissionId = [commissionActive1, commissionActive2]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for CommissionId with multiplesOptions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineReturn':\r",
											"        payloadEngine.engineType = 'REMUNERATION'\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/returns?status:On',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let commissionActive = resAll.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.commissions[0].commissionId = commissionActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for CommissionId with different engineType', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.CommissionId');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.remunerations.remunerationId */\r",
											"var tc_fieldRemunerationId = JSON.parse(pm.collectionVariables.get('tc_remunerationsPanel_fieldRemunerationId'))\r",
											"/* tc_fieldRemunerationId = ['inexistentId', 'string', 'negativeNumber', 'floatNumber', 'only_space', 'empty', 'no_remunerationId', 'remunerationIdNull', 'inactiveId', 'multiplesOptions', 'difEngineRemuneration'] */\r",
											"payloadEngine.engineType = 'REMUNERATION'\r",
											"switch (tc_fieldRemunerationId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.remunerations[0].remunerationId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId RemunerationId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.remunerations[0].remunerationId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for RemunerationId type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.remunerations[0].remunerationId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for RemunerationId only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.remunerations[0].remunerationId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty RemunerationId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_remunerationId':\r",
											"        delete payloadEngine.engineReturns.remunerations[0].remunerationId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_RemunerationId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'remunerationIdNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.remunerations[0].remunerationId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for RemunerationId null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/remunerations?status:Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let remunerationInactive = resAll.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.remunerations[0].remunerationId = remunerationInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inexistentId RemunerationId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/remunerations?status:On',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let remunerationActive1 = resAll.json()[0].id\r",
											"            let remunerationActive2 = resAll.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.remunerations[0].remunerationId = [remunerationActive1, remunerationActive2]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for RemunerationId with multiplesOptions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineReturn':\r",
											"        payloadEngine.engineType = 'MINIMUM_BANK_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/remunerations?status:On',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let remunerationActive = resAll.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.remunerations[0].remunerationId = remunerationActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for RemunerationId with different engineType', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.RemunerationId');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.minMonthlyBankRatePercent */\r",
											"var tc_fieldMinMonthlyBankRatePercent = JSON.parse(pm.collectionVariables.get('tc_engineReturnsPanel_fieldMinMonthlyBankRatePercent'))\r",
											"/* tc_fieldMinMonthlyBankRatePercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_minMonthlyBank', 'minMonthlyBankNull', 'difEngineMinBankRate'] */\r",
											"payloadEngine.engineType = 'MINIMUM_BANK_RATE'\r",
											"switch (tc_fieldMinMonthlyBankRatePercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber minMonthlyBankRatePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minMonthlyBankRatePercent with floatNumber_5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minMonthlyBankRatePercent with negativeNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minMonthlyBankRatePercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minMonthlyBankRatePercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minMonthlyBankRatePercent only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minMonthlyBankRatePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for minMonthlyBankRatePercent in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minMonthlyBankRatePercent above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_minMonthlyBank':\r",
											"        delete payloadEngine.engineReturns.minMonthlyBankRatePercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_minMonthlyBank', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'minMonthlyBankNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minMonthlyBankRatePercent null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMinBankRate':\r",
											"        payloadEngine.engineType = 'MAX_CLIENT_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minMonthlyBankRatePercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minMonthlyBankRatePercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.minMonthlyBankRatePercent');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.MaxMonthlyClientRatePercent */\r",
											"var tc_fieldMaxMonthlyClientRatePercent = JSON.parse(pm.collectionVariables.get('tc_engineReturnsPanel_fieldMaxMonthlyClientRatePercent'))\r",
											"/* tc_fieldMaxMonthlyClientRatePercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_maxMonthlyClient', 'maxMonthlyClientNull', 'difEngineMaxClientRate'] */\r",
											"payloadEngine.engineType = 'MAX_CLIENT_RATE'\r",
											"switch (tc_fieldMaxMonthlyClientRatePercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber MaxMonthlyClientRatePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for MaxMonthlyClientRatePercent with floatNumber_5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for MaxMonthlyClientRatePercent with negativeNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for MaxMonthlyClientRatePercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for MaxMonthlyClientRatePercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for MaxMonthlyClientRatePercent only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty MaxMonthlyClientRatePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = 0.9999[remunerationActive1, remunerationActive2]\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for MaxMonthlyClientRatePercent in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = 1.0000[remunerationActive1, remunerationActive2]\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for MaxMonthlyClientRatePercent above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_maxMonthlyClient':\r",
											"        delete payloadEngine.engineReturns.maxMonthlyClientRatePercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_maxMonthlyClient', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'maxMonthlyClientNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxMonthlyClient null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMinBankRate':\r",
											"        payloadEngine.engineType = 'INCREASE_DECREASE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.maxMonthlyClientRatePercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for MaxMonthlyClientRatePercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.MaxMonthlyClientRatePercent');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.increaseDecreasePercent */\r",
											"var tc_fieldIncreaseDecreasePercent = JSON.parse(pm.collectionVariables.get('tc_engineReturnsPanel_fieldIncreaseDecreasePercent'))\r",
											"/* tc_fieldIncreaseDecreasePercent = ['intNumber', 'floatNumber5digits', 'negativeNumber', 'bigNumber', 'string', 'zero', 'only_space', 'empty', 'no_increaseDecrease', 'increaseDecreaseNull', 'difEngineIncreaseDecrease'] */\r",
											"payloadEngine.engineType = 'INCREASE_DECREASE'\r",
											"switch (tc_fieldIncreaseDecreasePercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber increaseDecreasePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for increaseDecreasePercent with floatNumber_5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for increaseDecreasePercent with negativeNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'bigNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = parseFloat(_.random(10 ** 8, 10 ** 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for increaseDecreasePercent with bigNumber', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for increaseDecreasePercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for increaseDecreasePercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for increaseDecreasePercent only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty increaseDecreasePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_increaseDecrease':\r",
											"        delete payloadEngine.engineReturns.increaseDecreasePercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_increaseDecrease', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'increaseDecreaseNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for increaseDecrease null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineIncreaseDecrease':\r",
											"        payloadEngine.engineType = 'PAYMENT_PLAN_CATEGORY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.increaseDecreasePercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for increaseDecreasePercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.increaseDecreasePercent');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.paymentPlanCategory */\r",
											"var tc_fieldPaymentPlanCategory = JSON.parse(pm.collectionVariables.get('tc_engineReturnsPanel_fieldPaymentPlanCategory'))\r",
											"/* tc_fieldPaymentPlanCategory = ['inexistentId', 'string', 'only_space', 'empty', 'no_paymentPlanCategory', 'paymentPlanCategoryNull', 'inactiveId', 'multiplesOptions', 'difEnginepaymentPlanCategory'] */\r",
											"payloadEngine.engineType = 'PAYMENT_PLAN_CATEGORY'\r",
											"switch (tc_fieldPaymentPlanCategory[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.paymentPlanCategory = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId paymentPlanCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.paymentPlanCategory = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for paymentPlanCategory type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.paymentPlanCategory = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for paymentPlanCategory only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.paymentPlanCategory = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty paymentPlanCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_paymentPlanCategory':\r",
											"        delete payloadEngine.engineReturns.paymentPlanCategory\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_paymentPlanCategory', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'paymentPlanCategoryNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.paymentPlanCategory = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for paymentPlanCategory null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/paymentPlanCategories?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let paymentPlanCategoriesInactive = resAll.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.paymentPlanCategory = paymentPlanCategoriesInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive paymentPlanCategory', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/paymentPlanCategories?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let paymentPlanCategoriesActive1 = resAll.json()[0].id\r",
											"            let paymentPlanCategoriesActive2 = resAll.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.paymentPlanCategory = [paymentPlanCategoriesActive1, paymentPlanCategoriesActive2]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for paymentPlanCategory with multiplesOptions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEnginepaymentPlanCategory':\r",
											"        payloadEngine.engineType = 'RBP_MARGIN'\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/paymentPlanCategories?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resAll) => {\r",
											"            let paymentPlanCategoriesActive = resAll.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineReturns.paymentPlanCategory = paymentPlanCategoriesActive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for paymentPlanCategory with different engine type', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.paymentPlanCategory');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.rbpMarginPercent */\r",
											"var tc_fieldRbpMarginPercent = JSON.parse(pm.collectionVariables.get('tc_engineReturnsPanel_fieldRbpMarginPercent'))\r",
											"/* tc_fieldRbpMarginPercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_rbpMargin', 'rbpMarginNull', 'difEngineRbpMargin'] */\r",
											"payloadEngine.engineType = 'RBP_MARGIN'\r",
											"switch (tc_fieldRbpMarginPercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber rbpMarginPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rbpMarginPercent with floatNumber_5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rbpMarginPercent with negativeNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rbpMarginPercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rbpMarginPercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rbpMarginPercent only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty rbpMarginPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for rbpMarginPercent in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rbpMarginPercent above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_rbpMargin':\r",
											"        delete payloadEngine.engineReturns.rbpMarginPercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_rbpMargin', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'rbpMarginNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rbpMarginPercent null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineRbpMargin':\r",
											"        payloadEngine.engineType = 'MINIMUM_RBP_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.rbpMarginPercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for rbpMarginPercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.rbpMarginPercent');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.minRbpFeePercent */\r",
											"var tc_fieldMinRbpFeePercent = JSON.parse(pm.collectionVariables.get('tc_engineReturnsPanel_fieldMinRbpFeePercent'))\r",
											"/* tc_fieldMinRbpFeePercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_RbpFee', 'RbpFeeNull', 'difEngineMinRbpRate'] */\r",
											"payloadEngine.engineType = 'MINIMUM_RBP_RATE'\r",
											"switch (tc_fieldMinRbpFeePercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber minRbpFeePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minRbpFeePercent with floatNumber_5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minRbpFeePercent with negativeNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minRbpFeePercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minRbpFeePercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minRbpFeePercent only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minRbpFeePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for minRbpFeePercent in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minRbpFeePercent above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_RbpFee':\r",
											"        delete payloadEngine.engineReturns.minRbpFeePercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_RbpFee', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'RbpFeeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for RbpFee null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMinRbpRate':\r",
											"        payloadEngine.engineType = 'RISK'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.minRbpFeePercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minRbpFeePercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.minRbpFeePercent');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.riskRatePercent */\r",
											"var tc_fieldRiskRatePercent = JSON.parse(pm.collectionVariables.get('tc_engineReturnsPanel_fieldRiskRatePercent'))\r",
											"/* tc_fieldRiskRatePercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_riskRate', 'riskRateNull', 'difEngineRisk'] */\r",
											"payloadEngine.engineType = 'RISK'\r",
											"switch (tc_fieldRiskRatePercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber riskRatePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for riskRatePercent with floatNumber_5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for riskRatePercent with negativeNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for riskRatePercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for riskRatePercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for riskRatePercent only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty riskRatePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for riskRatePercent in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for riskRatePercent above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_riskRate':\r",
											"        delete payloadEngine.engineReturns.riskRatePercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_riskRate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'riskRateNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for riskRate null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineRisk':\r",
											"        payloadEngine.engineType = 'DELAY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.riskRatePercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for riskRatePercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.riskRatePercent');\r",
											"        break;\r",
											"}"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "49222343-d216-41e5-9b9b-0c24b7fad9a2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": []
							},
							"response": []
						},
						{
							"name": "Check classifiersPanel_fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "c6cae8e3-36d7-43b1-bed1-a65f172c46c6",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_ClassifiersPanel: Field ClassifierId */\r",
											"pm.collectionVariables.set('tc_classifiersPanel_fieldClassifierId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_classifierId', 'classifierIdNull', 'inactiveId', 'multiplesOptions']));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "61bdccb3-df15-4c9a-9ac3-9b9cd1ea697d",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. Response header. 3. Creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating engineCriteriaPanel.classifiers.classifierId */\r",
											"var tc_fieldClassifierId = JSON.parse(pm.collectionVariables.get('tc_classifiersPanel_fieldClassifierId'))\r",
											"/* tc_fieldClassifierId = ['inexistentId', 'string', 'only_space', 'empty', 'no_classifierId', 'classifierIdNull', 'inactiveId', 'multiplesOptions'] */\r",
											"switch (tc_fieldClassifierId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.classifiers[0].classifierId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId ClassifierId ', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.classifiers[0].classifierId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ClassifierId type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.classifiers[0].classifierId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ClassifierId with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.classifiers[0].classifierId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty ClassifierId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_classifierId':\r",
											"        delete payloadEngine.engineCriteria.classifiers[0].classifierId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_classifierId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'classifierIdNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.classifiers[0].classifierId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ClassifierId null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({ method: 'GET', url: pm.environment.get('baseUrl') + '/classifiers?status=Off' }, (err, resAll) => {\r",
											"            let classifierInactive = resAll.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.classifiers[0].classifierId = classifierInactive\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for ClassifierId inactive', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({ method: 'GET', url: pm.environment.get('baseUrl') + '/classifiers?status=On' }, (err, resAll) => {\r",
											"            let classifierId1 = resAll.json()[0].id\r",
											"            let classifierId2 = resAll.json()[1].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.classifiers[0].classifierId = [classifierId1, classifierId2]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for ClassifierId with multiplesOptions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - classifiersPanel_fieldClassifierId');\r",
											"        break;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "dcb9fcb8-24f4-433b-8f87-34562841af1f",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Check vmePanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "574c30a8-c91f-4d7f-bf44-ebd3617601bc",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating engineReturns.vme.vmeReturnType  */\r",
											"var tc_fieldVmeReturnType = JSON.parse(pm.collectionVariables.get('tc_servicePanel_VmeReturnType'))\r",
											"/* tc_fieldVmeReturnType = ['inexistent', 'number', 'only_space', 'empty', 'no_vmeReturnType', 'vmeReturnTypeNull', 'multiplesOptions'] */\r",
											"payloadEngine.engineType = 'VME'\r",
											"switch (tc_fieldVmeReturnType[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vmeReturnType = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent vmeReturnType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vmeReturnType = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for bonus number vmeReturnType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vmeReturnType = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vmeReturnType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vmeReturnType = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty vmeReturnType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_vmeReturnType':\r",
											"        delete payloadEngine.engineReturns.vme.vmeReturnType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_vmeReturnType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'vmeReturnTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vmeReturnType = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_vmeReturnType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vmeReturnType = ['PERCENT', 'MONETARY']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vmeReturnType with multiplesOptions', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - vme.vmeReturnType');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* When VmeReturnType = 'PERCENT'*/\r",
											"payloadEngine.engineReturns.vme.vmeReturnType = 'PERCENT'\r",
											"\r",
											"/* Validating engineReturns.vme.factorySubsidy  */\r",
											"var tc_fieldFactorySubsidyPERCENT = JSON.parse(pm.collectionVariables.get('tc_vmePERCENT_fieldFactorySubsidy'))\r",
											"/* tc_fieldFactorySubsidyPERCENT = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_factorySubsidy', 'factorySubsidyNull', 'difEngineVME'] */\r",
											"payloadEngine.engineType = 'VME'\r",
											"switch (tc_fieldFactorySubsidyPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFactorySubsidyPERCENT with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFactorySubsidyPERCENT with float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFactorySubsidyPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFactorySubsidyPERCENT type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFactorySubsidyPERCENT equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFactorySubsidyPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldFactorySubsidyPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldFactorySubsidyPERCENT in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFactorySubsidyPERCENT above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_factorySubsidy':\r",
											"        delete payloadEngine.engineReturns.vme.factorySubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'factorySubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        payloadEngine.engineType = 'MAX_CLIENT_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFactorySubsidyPERCENT with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.vme.factorySubsidy');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.vme.vendorSubsidy  */\r",
											"var tc_fieldVendorSubsidyPERCENT = JSON.parse(pm.collectionVariables.get('tc_vmePERCENT_fieldVendorSubsidy'))\r",
											"/* tc_fieldVendorSubsidyPERCENT = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_vendorSubsidy', 'vendorSubsidyNull', 'difEngineVME'] */\r",
											"payloadEngine.engineType = 'VME'\r",
											"switch (tc_fieldVendorSubsidyPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyPERCENT with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyPERCENT with float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyPERCENT type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyPERCENT equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty vendorSubsidyPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for vendorSubsidyPERCENT in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyPERCENT above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_vendorSubsidy':\r",
											"        delete payloadEngine.engineReturns.vme.vendorSubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'vendorSubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidy Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        payloadEngine.engineType = 'MAX_CLIENT_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyPERCENT with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.vme.vendorSubsidy');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.vme.thirdPartySubsidy  */\r",
											"var tc_fieldThirdPartySubsidyPERCENT = JSON.parse(pm.collectionVariables.get('tc_vmePERCENT_fieldThirdPartySubsidy'))\r",
											"/* tc_fieldThirdPartySubsidyPERCENT = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_thirdParty', 'thirdPartyNull', 'difEngineVME'] */\r",
											"switch (tc_fieldThirdPartySubsidyPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT with float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty thirdPartySubsidyPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for thirdPartySubsidyPERCENT in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_thirdPartySubsidy':\r",
											"        delete payloadEngine.engineReturns.vme.thirdPartySubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_thirdPartySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'thirdPartySubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidy Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        payloadEngine.engineType = 'MAX_CLIENT_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.vme.thirdPartySubsidy');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* When VmeReturnType = 'MONETARY'*/\r",
											"payloadEngine.engineReturns.vme.vmeReturnType = 'MONETARY'\r",
											"\r",
											"/* Validating engineReturns.vme.factorySubsidy  */\r",
											"var tc_fieldFactorySubsidyMONETARY = JSON.parse(pm.collectionVariables.get('tc_vmeMONETARY_fieldFactorySubsidy'))\r",
											"/* tc_fieldFactorySubsidyMONETARY = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_factorySubsidy', 'factorySubsidyNull', 'difEngineVME'] */\r",
											"switch (tc_fieldFactorySubsidyMONETARY[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyMONETARY with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = parseFloat(_.random(0, 1, true).toFixed(3))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyMONETARY with float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = parseFloat(_.random(0, 1, true).toFixed(1))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyMONETARY with float number 1digit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = parseFloat(-_.random(0, 1, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyMONETARY with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyMONETARY type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyMONETARY equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyMONETARY with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty factorySubsidyMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = 999999999.99\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for factorySubsidyMONETARY in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '>999.999.999,99': /* O limite é 1000000000.00? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = 1000000000.00\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_factorySubsidy':\r",
											"        delete payloadEngine.engineReturns.vme.factorySubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'factorySubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidy Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        payloadEngine.engineType = 'MAX_CLIENT_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.factorySubsidy = 98.90\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidyMONETARY with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.vme.factorySubsidy');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.vme.vendorSubsidy  */\r",
											"var tc_fieldVendorSubsidyMONETARY = JSON.parse(pm.collectionVariables.get('tc_vmeMONETARY_fieldVendorSubsidy'))\r",
											"/* tc_fieldVendorSubsidyMONETARY = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_vendorSubsidy', 'vendorSubsidyNull', 'difEngineVME'] */\r",
											"switch (tc_fieldVendorSubsidyMONETARY[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = parseFloat(_.random(0, 1, true).toFixed(3))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY with float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = parseFloat(_.random(0, 1, true).toFixed(1))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY with float number 1digit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = parseFloat(-_.random(0, 1, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty vendorSubsidyMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = 999999999.99\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for vendorSubsidyMONETARY in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '>999.999.999,99': /* O limite é 1000000000.00? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = 1000000000.00\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_vendorSubsidy':\r",
											"        delete payloadEngine.engineReturns.vme.vendorSubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'vendorSubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidy Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        payloadEngine.engineType = 'MAX_CLIENT_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.vendorSubsidy = 98.90\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidyMONETARY with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.vme.vendorSubsidy');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating engineReturns.vme.thirdPartySubsidy  */\r",
											"var tc_fieldThirdPartySubsidyMONETARY = JSON.parse(pm.collectionVariables.get('tc_vmeMONETARY_fieldThirdPartySubsidy'))\r",
											"/* tc_fieldThirdPartySubsidyMONETARY = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_thirdParty', 'thirdPartyNull', 'difEngineVME'] */\r",
											"switch (tc_fieldThirdPartySubsidyMONETARY[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = parseFloat(_.random(0, 1, true).toFixed(3))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY with float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = parseFloat(_.random(0, 1, true).toFixed(1))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY with float number 1digit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = parseFloat(-_.random(0, 1, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty thirdPartySubsidyMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = 999999999.99\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for thirdPartySubsidyMONETARY in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '>999.999.999,99': /* O limite é 1000000000.00? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = 1000000000.00\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_thirdParty':\r",
											"        delete payloadEngine.engineReturns.vme.thirdPartySubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_thirdPartySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'thirdPartyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidy Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineVME':\r",
											"        payloadEngine.engineType = 'MAX_CLIENT_RATE'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.vme.thirdPartySubsidy = 98.90\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyMONETARY with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.vme.thirdPartySubsidy');\r",
											"        break;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "226971ba-2587-4586-9b86-14fb30f4243e",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_VmePanel: Field VmeReturnType */\r",
											"pm.collectionVariables.set('tc_vmePanel_fieldVmeReturnType', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_vmeReturnType', 'vmeReturnTypeNull', 'multiplesOptions']));\r",
											"\r",
											"/* When VmeReturnType = 'PERCENT'*/\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VmePanel: Field FactorySubsidy */\r",
											"pm.collectionVariables.set('tc_vmePERCENT_fieldFactorySubsidy', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_factorySubsidy', 'factorySubsidyNull', 'difEngineVME']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VmePanel: Field VendorSubsidy */\r",
											"pm.collectionVariables.set('tc_vmePERCENT_fieldVendorSubsidy', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_vendorSubsidy', 'vendorSubsidyNull', 'difEngineVME']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VmePanel: Field ThirdPartySubsidy */\r",
											"pm.collectionVariables.set('tc_vmePERCENT_fieldThirdPartySubsidy', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_thirdParty', 'thirdPartyNull', 'difEngineVME']));\r",
											"\r",
											"/* When VmeReturnType = 'MONETARY'*/\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VmePanel: Field FactorySubsidy */\r",
											"pm.collectionVariables.set('tc_vmeMONETARY_fieldFactorySubsidy', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_factorySubsidy', 'factorySubsidyNull', 'difEngineVME']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VmePanel: Field VendorSubsidy */\r",
											"pm.collectionVariables.set('tc_vmeMONETARY_fieldVendorSubsidy', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_vendorSubsidy', 'vendorSubsidyNull', 'difEngineVME']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_VmePanel: Field ThirdPartySubsidy */\r",
											"pm.collectionVariables.set('tc_vmeMONETARY_fieldThirdPartySubsidy', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_thirdParty', 'thirdPartyNull', 'difEngineVME']));"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "e326e90d-4d59-4996-b515-9c828f92b6cf",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": []
							},
							"response": []
						},
						{
							"name": "Check generalCriteriaPanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "a21825d7-d231-4f4c-8dab-2db3d43fced8",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var editBody_manyFields = eval(pm.globals.get('editBody_manyFields'))\r",
											"var editBody_masterKey = eval(pm.globals.get('editBody_masterKey'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. Response header. 3. Creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating identifierPanel.personType */\r",
											"var tc_fieldEngineType = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldpersonType'))\r",
											"/* tc_fieldpersonType = ['inexistent', 'number', 'only_space', 'empty', 'no_personType', 'personTypeNull', 'multiplesOptions'] */\r",
											"switch (tc_fieldpersonType[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.personType = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent personType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.personType = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for personType number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.personType = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for personType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.personType = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty personType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_personType':\r",
											"        delete payloadEngine.engineCriteria.personType\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_personType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'personTypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.personType = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null personType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.personType = ['PF', 'PJ']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for multiples personType', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - personType');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.saleType */\r",
											"var tc_fieldSaleType = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldsaleType'))\r",
											"/* tc_fieldsaleType = ['inexistentId', 'string', 'only_space', 'empty', 'no_saleTypes', 'saleTypesNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldsaleType[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleTypes[0].saleTypeId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId saleType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleTypes[0].saleTypeId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string saleType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleTypes[0].saleTypeId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for saleType with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleTypes[0].saleTypeId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty saleType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_saleTypes':\r",
											"        delete payloadEngine.engineCriteria.saleTypes\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_saleTypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'saleTypesNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleTypes[0].saleTypeId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null saleType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* VERIFICAR COMO BUSCAR ID INATIVO */\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/saleType?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.saleTypes[0].saleTypeId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive saleType', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/saleType',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.saleSubtypes[0].saleTypeId = [{\r",
											"                    \"saleType\": id\r",
											"                }, {\r",
											"                    \"saleType\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated integrationSaleType', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        /* Consulting actives ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/saleType?status=On',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let name1 = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"            let name2 = resGet.json()[Math.floor(Math.random() * resGet.length)].name\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.saleSubtypes[0].saleTypeId = [{\r",
											"                    \"saleType\": name1\r",
											"                }, {\r",
											"                    \"saleType\": name2\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for multiples saleType', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - saleType');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.saleSubtypes */\r",
											"var tc_fieldSaleSubtypes = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldsaleSubtypes'))\r",
											"/* tc_fieldsaleSubtypes = ['inexistentId', 'string', 'only_space', 'empty', 'subtypeFromAnotherType', 'subtypeWithoutType', 'no_saleSubtype', 'saleSubtypeNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldsaleSubtypes[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleSubtypes[0].saleSubtypesId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleSubtypes[0].saleSubtypesId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleSubtypes[0].saleSubtypesId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for saleSubtypes with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleSubtypes[0].saleSubtypesId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'subtypeFromAnotherType':\r",
											"\r",
											"\r",
											"    case 'subtypeWithoutType':\r",
											"\r",
											"\r",
											"    case 'no_saleSubtype':\r",
											"        delete payloadEngine.engineCriteria.saleSubtypes\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'saleSubtypeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleSubtypes[0].saleSubtypesId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* VERIFICAR COMO BUSCAR ID INATIVO */\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/saleSubtypes?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.saleSubtypes[0].saleSubtypesId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive saleSubtypes', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/saleSubtypes',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.saleSubtypes[0].saleTypeId = [{\r",
											"                    \"saleSubtypes\": id\r",
											"                }, {\r",
											"                    \"saleSubtypes\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated saleSubtypes', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.saleSubtypes[0].saleTypeId = ['TESTE1', 'TESTE2']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions saleSubtypes', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - saleSubtypes');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.financialBrands */\r",
											"var tc_fieldFinancialBrands = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldfinancialBrands'))\r",
											"/* tc_fieldfinancialBrands = ['inexistentId', 'string', 'only_space', 'empty', 'no_financialBrand', 'financialBrandNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldfinancialBrands[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.financialBrands[0].financialBrandsId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.financialBrands[0].financialBrandsId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.financialBrands[0].financialBrandsId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for financialBrands with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.financialBrands[0].financialBrandsId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_financialBrand':\r",
											"        delete payloadEngine.engineCriteria.financialBrands\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_financialBrand', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'financialBrandNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.financialBrands[0].financialBrandsId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* VERIFICAR COMO BUSCAR ID INATIVO */\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/financialBrands?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.financialBrands[0].financialBrandsId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive financialBrands', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/financialBrands',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.financialBrands[0].financialBrandsID = [{\r",
											"                    \"financialBrands\": id\r",
											"                }, {\r",
											"                    \"financialBrands\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated financialBrands', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.financialBrands[0].financialBrandsId = ['TESTE1', 'TESTE2']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions financialBrands', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - financialBrands');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.factorySubsidy */\r",
											"var tc_fieldFactorySubsidy = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldfactorySubsidy'))\r",
											"/* tc_fieldfactorySubsidy = ['string', 'number', 'only_space', 'empty', 'no_factorySubsidy', 'factorySubsidyNull'] */\r",
											"switch (tc_fieldfactorySubsidy[i]) {\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.factorySubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.factorySubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidy number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.factorySubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for factorySubsidy with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.factorySubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_factorySubsidy':\r",
											"        delete payloadEngine.engineCriteria.factorySubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'factorySubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.factorySubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null factorySubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - financialBrands');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.vendorSubsidy */\r",
											"var tc_fieldVendorSubsidy = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldvendorSubsidy'))\r",
											"/* tc_fieldvendorSubsidy = ['string', 'number', 'only_space', 'empty', 'no_vendorSubsidy', 'vendorSubsidyNull'] */\r",
											"switch (tc_fieldvendorSubsidy[i]) {\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vendorSubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vendorSubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidy number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vendorSubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for vendorSubsidy with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vendorSubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_vendorSubsidy':\r",
											"        delete payloadEngine.engineCriteria.vendorSubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'vendorSubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.vendorSubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null vendorSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - vendorSubsidy');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.thirdPartiesSubsidy */\r",
											"var tc_fieldThirdPartiesSubsidy = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldthirdPartiesSubsidy'))\r",
											"/* tc_fieldthirdPartiesSubsidy = ['string', 'number', 'only_space', 'empty', 'no_thirdPartiesSubsidy', 'thirdPartiesSubsidyNull',] */\r",
											"switch (tc_fieldthirdPartiesSubsidy[i]) {\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.thirdPartiesSubsidy = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string thirdPartiesSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.thirdPartiesSubsidy = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartiesSubsidy number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.thirdPartiesSubsidy = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartiesSubsidy with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.thirdPartiesSubsidy = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty thirdPartiesSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_thirdPartiesSubsidy':\r",
											"        delete payloadEngine.engineCriteria.thirdPartiesSubsidy\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_thirdPartiesSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'thirdPartiesSubsidyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.thirdPartiesSubsidy = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null thirdPartiesSubsidy', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - thirdPartiesSubsidy');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.remunerations */\r",
											"var tc_fieldRemunerations = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldthirdRemunerations'))\r",
											"/* tc_fieldRemunerations = ['inexistentId', 'string', 'only_space', 'empty', 'no_remunerations', 'remunerationsNull', 'engineRemuneration', 'difEngineRemuneration', 'inactiveId', 'notPublished', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldsaleSubtypes[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.remunerations[0].remunerationsId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId remunerations', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.remunerations[0].remunerationsId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string remunerations', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.remunerations[0].remunerationsId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for remunerations with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.remunerations[0].remunerationsId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty remunerations', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_remunerations':\r",
											"        delete payloadEngine.engineCriteria.remunerations\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_remunerations', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'remunerationsNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.remunerations[0].remunerationsId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null remunerations', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineRemuneration':\r",
											"\r",
											"    case 'difEngineRemuneration':\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/remunerations?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.remunerations[0].remunerationsId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive remunerations', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'notPublished':\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/remunerations',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.remunerations[0].remunerationsId = [{\r",
											"                    \"remunerations\": id\r",
											"                }, {\r",
											"                    \"remunerations\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated remunerations', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.remunerations[0].remunerationsId = ['Teste1', 'Teste2']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions remunerations', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - remunerations');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.delays */\r",
											"var tc_fieldDelays = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldDelays'))\r",
											"/* tc_fieldDelays = ['inexistentId', 'string', 'only_space', 'empty', 'no_delay', 'delayNull', 'engineDelay', 'difEngineDelay', 'inactiveId', 'notPublished', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldsaleSubtypes[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.delays[0].delaysId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId remunerations', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.delays[0].delaysId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string delay', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.delays[0].delaysId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for delay with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.delays[0].delaysId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty delay', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_delay':\r",
											"        delete payloadEngine.engineCriteria.delay\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_delay', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'delayNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.delays[0].delaysId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null delay', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineDelay':\r",
											"\r",
											"    case 'difEngineDelay':\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/delay?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.delays[0].delaysId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive delays', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'notPublished':\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/delay',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.delays[0].delaysId = [{\r",
											"                    \"delays\": id\r",
											"                }, {\r",
											"                    \"delays\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated delays', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.delays[0].delaysId = ['Teste1', 'Teste2']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions delays', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - delays');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.commissions */\r",
											"var tc_fieldCommissions = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldCommissions'))\r",
											"/* tc_fieldCommissions = ['inexistentId', 'string', 'only_space', 'empty', 'no_comissions', 'commissionsNull', 'engineCommissions', 'difEngineCommissions', 'inactiveId', 'notPublished', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldsaleSubtypes[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.commissions[0].commissionsId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId commissions', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.commissions[0].commissionsId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string commissions', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.commissions[0].commissionsId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for commissions with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.commissions[0].commissionsId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty commissions', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_commissions':\r",
											"        delete payloadEngine.engineCriteria.commissions\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_commissions', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'commissionsNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.commissions[0].commissionsId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null comissions', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'engineComissions':\r",
											"\r",
											"    case 'difEngineComissions':\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/comissions?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.commissions[0].commissionsId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive commissions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'notPublished':\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/commissions',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.delays[0].commissions = [{\r",
											"                    \"commissions\": id\r",
											"                }, {\r",
											"                    \"commissions\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated commissions', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.commissions[0].commissionsId = ['Teste1', 'Teste2']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions commissions', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - commissions');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.minDownPaymentPercent */\r",
											"var tc_fieldMinDownPaymentPercent = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldminDownPaymentPercent'))\r",
											"/* tc_fieldminDownPaymentPercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'biggerThenMaxDownPaymentPercent', 'no_min_no_max', 'only_min', 'minDownPaymentPercentNull', 'min_max_equal'] */\r",
											"switch (tc_fieldminDownPaymentPercent[i]) {\r",
											"    case 'intNumber':\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number minDownPaymentPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string minDownPaymentPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minDownPaymentPercent = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minDownPaymentPercent with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minDownPaymentPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case 'biggerThenMaxDownPaymentPercent':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'minDownPaymentPercentNull':\r",
											"\r",
											"    case 'min_max_equal':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minDownPaymentPercent');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.maxDownPaymentPercent */\r",
											"var tc_fieldMaxDownPaymentPercent = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmaxDownPaymentPercent'))\r",
											"/* tc_fieldmaxDownPaymentPercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'maxDownPaymentPercentNull' */\r",
											"switch (tc_fieldmaxDownPaymentPercent[i]) {\r",
											"    case 'intNumber':\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        let negativeNumber = -_.random(0, 100)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxDownPaymentPercent = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number maxDownPaymentPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string maxDownPaymentPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxDownPaymentPercent = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxDownPaymentPercent with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minDownPaymentPercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty maxDownPaymentPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_max':\r",
											"\r",
											"    case 'maxDownPaymentPercentNull':\r",
											"\r",
											"\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxDownPaymentPercent');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.minLoanAmount */\r",
											"var tc_fieldMinLoanAmount = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldminLoanAmount'))\r",
											"/* tc_fieldminLoanAmount = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'biggerThenMaxLoanAmount', 'no_min_no_max', 'only_min', 'minLoanAmountNull', 'min_max_equal'] */\r",
											"switch (tc_fieldmiminLoanAmount[i]) {\r",
											"    case 'intNumber':\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minLoanAmount = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number minLoanAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minLoanAmount = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string minLoanAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minLoanAmount = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minLoanAmount = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minLoanAmount = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minLoanAmount with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minLoanAmount = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minLoanAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case '>999.999.999,99':\r",
											"\r",
											"    case 'biggerThenMaxLoanAmount':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'minLoanAmountNull':\r",
											"\r",
											"    case 'min_max_equal':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minLoanAmount');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.maxLoanAmount */\r",
											"var tc_fieldMaxLoanAmount = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmaxLoanAmount'))\r",
											"/* tc_fieldmaxLoanAmount = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'only_max', 'maxLoanAmountNull'] */\r",
											"switch (tc_fieldmaxLoanAmount[i]) {\r",
											"    case 'intNumber':\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxLoanAmount = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number maxLoanAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxLoanAmount = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string maxLoanAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxLoanAmount = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxLoanAmount = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxLoanAmount = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxLoanAmount with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxLoanAmount = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty maxLoanAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case '>999.999.999,99':\r",
											"\r",
											"    case 'only_max':\r",
											"\r",
											"    case 'maxLoanAmountNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxLoanAmount');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.minModelRate */\r",
											"var tc_fieldMinModelRate = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldminModelRate'))\r",
											"/* tc_fieldminModelRate = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'biggerThenMaxModelRate', 'no_min_no_max', 'only_min', 'minModelRateNull', 'min_max_equal'] */\r",
											"switch (tc_fieldminModelRate[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelRate = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number minModelRate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelRate = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string minModelRate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelRate = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minModelRate = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelRate = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minModelRate with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelRate = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minModelRate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case 'biggerThenMaxModelRate':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'minModelRateNull':\r",
											"\r",
											"    case 'min_max_equal':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelRate');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.maxModelRate */\r",
											"var tc_fieldMaxModelRate = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmaxModelRate'))\r",
											"/* tc_fieldMaxModelRate = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'maxModelRateNull'] */\r",
											"switch (tc_fieldMaxModelRate[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelRate = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number maxModelRate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelRate = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string maxModelRate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelRate = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxModelRate = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelRate = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxModelRate with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelRate = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minModelRate', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_max':\r",
											"\r",
											"    case 'maxModelRateNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelRate');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.min6Or7CpfDigits */\r",
											"var tc_fieldMin6Or7CpfDigits = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmin6Or7CpfDigits'))\r",
											"/* tc_fieldMin6Or7CpfDigits = ['number_3digits', 'flotNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'biggerThenMax6Or7CpfDigits', 'no_min_no_max', 'only_min', 'min6Or7CpfDigitsNull', 'min_max_equal'] */\r",
											"switch (tc_fieldMin6Or7CpfDigits[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'flotNumber':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.min6Or7CpfDigits = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number min6Or7CpfDigits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.min6Or7CpfDigits = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string min6Or7CpfDigits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.min6Or7CpfDigits = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for min6Or7CpfDigits = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.min6Or7CpfDigits = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for min6Or7CpfDigits with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.min6Or7CpfDigits = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty min6Or7CpfDigits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case 'biggerThenMax6Or7CpfDigits':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'min6Or7CpfDigitsNull':\r",
											"\r",
											"    case 'min_max_equal':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - min6Or7CpfDigits');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.max6Or7CpfDigits */\r",
											"var tc_fieldMax6Or7CpfDigits = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmax6Or7CpfDigits'))\r",
											"/* tc_fieldMax6Or7CpfDigits = ['number_3digits', 'flotNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'max6Or7CpfDigitsNull'] */\r",
											"switch (tc_fieldMax6Or7CpfDigits[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'flotNumber':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.max6Or7CpfDigits = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number max6Or7CpfDigits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.max6Or7CpfDigits = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string max6Or7CpfDigits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.max6Or7CpfDigits = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for max6Or7CpfDigits = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.max6Or7CpfDigits = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for max6Or7CpfDigits with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.max6Or7CpfDigits = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty min6Or7CpfDigits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_max':\r",
											"\r",
											"    case 'max6Or7CpfDigitsNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - max6Or7CpfDigits');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.minTerm */\r",
											"var tc_fieldMinTerm = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldminTerm'))\r",
											"/* tc_fieldMinTerm = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit','biggerThenMaxTerm', 'no_min_no_max', 'only_min', 'minTermNull', 'min_max_equal'] */\r",
											"switch (tc_fieldMinTerm[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minTerm = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number minTerm', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minTerm = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string minTerm', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minTerm = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minTerm = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minTerm = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minTerm with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minTerm = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minTerm', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case 'biggerThenMaxTerm':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'minTermNull':\r",
											"\r",
											"    case 'min_max_equal':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minTerm');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.maxTerm */\r",
											"var tc_fieldMaxTerm = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmaxTerm'))\r",
											"/* tc_fieldMaxTerm = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'maxTermNull'] */\r",
											"switch (tc_fieldMinTerm[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxTerm = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number maxTerm', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxTerm = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string maxTerm', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxTerm = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxTerm = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxTerm = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxTerm with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxTerm = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty maxTerm', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_max':\r",
											"\r",
											"    case 'maxTermNull':\r",
											"\r",
											"\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minTerm');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.minVehiclePrice */\r",
											"var tc_fieldMinVehiclePrice = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldminVehiclePrice'))\r",
											"/* tc_fieldMinVehiclePrice = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'biggerThenMaxVehiclePrice', 'no_min_no_max', 'only_min', 'minVehiclePriceNull', 'min_max_equal'] */\r",
											"switch (tc_fieldMinVehiclePrice[i]) {\r",
											"    case 'intNumber':\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        let negativeNumber = -_.random(0, 100)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minVehiclePrice = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number minVehiclePrice', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minVehiclePrice = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string minVehiclePrice', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minVehiclePrice = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minVehiclePrice = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minVehiclePrice = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minVehiclePrice with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minVehiclePrice = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minVehiclePrice', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case '>999.999.999,99':\r",
											"\r",
											"    case 'biggerThenMaxVehiclePrice':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'minVehiclePriceNull':\r",
											"\r",
											"    case 'min_max_equal':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minVehiclePrice');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.maxVehiclePrice */\r",
											"var tc_fieldMaxVehiclePrice = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmaxVehiclePrice'))\r",
											"/* tc_fieldMaxVehiclePrice = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'only_max', 'maxVehiclePriceNull'] */\r",
											"switch (tc_fieldMaxVehiclePrice[i]) {\r",
											"    case 'intNumber':\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxVehiclePrice = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number maxVehiclePrice', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxVehiclePrice = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string maxVehiclePrice', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxVehiclePrice = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxVehiclePrice = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxVehiclePrice = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxVehiclePrice with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxVehiclePrice = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty maxVehiclePrice', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case '>999.999.999,99':\r",
											"\r",
											"    case 'only_max':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'maxVehiclePriceNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxVehiclePrice');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.minManufactoryVehicleAge */\r",
											"var tc_fieldMinManufactoryVehicleAge = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldminManufactoryVehicleAge'))\r",
											"/* tc_fieldMinManufactoryVehicleAge = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit','biggerThenMaxManufactoryVehicleAge', 'no_min_no_max', 'only_min', 'minManufactoryVehicleAgeNull', 'min_max_equal'] */\r",
											"switch (tc_fieldMinManufactoryVehicleAge[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minManufactoryVehicleAge = parseFloat(_.random(0, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for float number minManufactoryVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minManufactoryVehicleAge = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number minManufactoryVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minManufactoryVehicleAge = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string minManufactoryVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minManufactoryVehicleAge = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minManufactoryVehicleAge = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minManufactoryVehicleAge = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minManufactoryVehicleAge with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minManufactoryVehicleAge = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minManufactoryVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case '>biggerThenMaxManufactoryVehicleAge':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'minManufactoryVehicleAgeNull':\r",
											"\r",
											"    case 'min_max_equal':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minManufactoryVehicleAge');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.maxManufactoryVehicleAge */\r",
											"var tc_fieldMaxManufactoryVehicleAge = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmaxManufactoryVehicleAge'))\r",
											"/* tc_fieldMaxManufactoryVehicleAge = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty',  'only_max', 'maxManufactoryVehicleAgeNull'] */\r",
											"switch (tc_fieldMinManufactoryVehicleAge[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxManufactoryVehicleAge = parseFloat(_.random(0, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for float number maxManufactoryVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxManufactoryVehicleAge = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number maxManufactoryVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxManufactoryVehicleAge = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string maxManufactoryVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxManufactoryVehicleAge = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxManufactoryVehicleAge = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxManufactoryVehicleAge = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxManufactoryVehicleAge with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxManufactoryVehicleAge = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty maxManufactoryVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_max':\r",
											"\r",
											"    case '>maxManufactoryVehicleAgeNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - maxManufactoryVehicleAge');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.minModelVehicleAge */\r",
											"var tc_fieldMinModelVehicleAge = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldminModelVehicleAge'))\r",
											"/* tc_fieldMinModelVehicleAge = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit','biggerThenMaxModelVehicleAge', 'no_min_no_max', 'only_min', 'minModelVehicleAgeNull', 'min_max_equal'] */\r",
											"switch (tc_fieldMinModelVehicleAge[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelVehicleAge = parseFloat(_.random(0, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for float number minModelVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelVehicleAge = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number minModelVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelVehicleAge = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string minModelVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelVehicleAge = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minModelVehicleAge = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelVehicleAge = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for minModelVehicleAge with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.minModelVehicleAge = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty minModelVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"\r",
											"    case '>biggerThenMaxModelVehicleAge':\r",
											"\r",
											"    case 'no_min_no_max':\r",
											"\r",
											"    case 'only_min':\r",
											"\r",
											"    case 'minModelVehicleAgeNull':\r",
											"\r",
											"    case 'min_max_equal':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelVehicleAge');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.maxModelVehicleAge */\r",
											"var tc_fieldMaxModelVehicleAge = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmaxModelVehicleAge'))\r",
											"/* tc_fieldMaxModelVehicleAge = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'maxModelVehicleAgeNull'] */\r",
											"switch (tc_fieldMaxModelVehicleAge[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelVehicleAge = parseFloat(_.random(0, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for float number maxModelVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelVehicleAge = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number maxModelVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelVehicleAge = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string maxModelVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelVehicleAge = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxModelVehicleAge = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelVehicleAge = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxModelVehicleAge with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxModelVehicleAge = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty maxModelVehicleAge', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_max':\r",
											"\r",
											"    case '>maxModelVehicleAgeNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelVehicleAge');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.maxProposalValidity */\r",
											"var tc_fieldMaxProposalValidity = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldmaxProposalValidity'))\r",
											"/* tc_fieldMaxProposalValidity = ['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_proposalValidity', 'proposalValidityNull'] */\r",
											"switch (tc_fieldMaxProposalValidity[i]) {\r",
											"    case 'number_3digits':\r",
											"\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxProposalValidity = parseFloat(_.random(0, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for float number maxProposalValidity', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxProposalValidity = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for negative number maxProposalValidity', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxProposalValidity = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string maxProposalValidity', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxProposalValidity = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxProposalValidity = 0', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxProposalValidity = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for maxProposalValidity with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.maxProposalValidity = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty maxProposalValidity', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_proposalValidity':\r",
											"\r",
											"    case '>proposalValidityNull':\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - minModelVehicleAge');\r",
											"        break;\r",
											"\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.provinces */\r",
											"var tc_fieldProvinces = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fieldprovinces'))\r",
											"/* tc_fieldProvinces = ['inexistentId', 'string', 'only_space', 'empty', 'no_provinces', 'provincesNull', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldProvinces[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.provinces[0].provincesId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId provinces', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.provinces[0].provincesId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string provinces', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.provinces[0].provincesId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for provinces with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.provinces[0].provincesId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty provinces', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_provinces':\r",
											"        delete payloadEngine.engineCriteria.provinces\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_provinces', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'provincesNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.provinces[0].provincesId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null provinces', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/provinces',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.provinces[0].provincesId = [{\r",
											"                    \"provinces\": id\r",
											"                }, {\r",
											"                    \"provinces\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated provinces', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/provinces?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.provinces[0].provincesId = ['Teste1', 'Teste2']\r",
											"        }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive provinces', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - provinces');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.ratingsAbc */\r",
											"var tc_fieldRatingsAbc = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fielratingsAbc'))\r",
											"/* tc_fieldRatingsAbc = ['inexistentId', 'string', 'only_space', 'empty', 'no_ratingABC', 'ratingABCNull', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldRatingsAbc[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.ratingsAbc[0].ratingsAbcId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId ratingsAbc', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.ratingsAbc[0].ratingsAbcId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string ratingsAbc', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.ratingsAbc[0].ratingsAbcId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ratingsAbc with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.ratingsAbc[0].ratingsAbcId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty ratingsAbc', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_ratingABC':\r",
											"        delete payloadEngine.engineCriteria.ratingsAbcId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_ratingABC', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'ratingABCNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.ratingsAbc[0].ratingsAbcId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null ratingsAbc', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/ratingsAbc',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.ratingsAbc[0].ratingsAbcId = [{\r",
											"                    \"ratingsAbc\": id\r",
											"                }, {\r",
											"                    \"ratingsAbc\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated ratingsAbc', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/ratingsAbc?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.ratingsAbc[0].ratingsAbcId = ['Teste1', 'Teste2']\r",
											"        }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive ratingsAbc', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - ratingsAbc');\r",
											"        break;\r",
											"}\r",
											"\r",
											"/* Validating identifierPanel.regionals */\r",
											"var tc_fieldRatingsAbc = JSON.parse(pm.collectionVariables.get('tc_identifierPainel_fielregionals'))\r",
											"/* tc_fieldRegionals = ['inexistentId', 'string', 'only_space', 'empty', 'no_regionals', 'regionalNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions'] */\r",
											"switch (tc_fieldRatingsAbc[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.regionals[0].regionalsId = _.random(10000, 11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId ratingsAbc', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.regionals[0].regionalsId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for string regionals', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.regionals[0].regionalsId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for regionals with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.regionals[0].regionalsId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty regionals', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_regionals':\r",
											"        delete payloadEngine.engineCriteria.regionals\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for no_regionals', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'regionalNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.regionals[0].regionalsId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null regionals', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'inactiveId':\r",
											"        /* Consulting all existent ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/regionals',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.regionals[0].regionalsId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for repeated regionals', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'repeatedMultiplesOptions':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/regionals?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.regionals[0].regionalsId = [{\r",
											"                    \"regionals\": id\r",
											"                }, {\r",
											"                    \"regionals\": id\r",
											"                }]\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive regionals', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        /* Consulting  inactive ids */\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/ratingsAbc?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                header: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.regionals[0].regionalsId = ['Teste1', 'Teste2']\r",
											"        }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive ratingsAbc', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - regionals');\r",
											"        break;\r",
											"}"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "1f968dde-121e-4a63-a7e1-092f883ce726",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field PersonType  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldPersonType', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_personType', 'personTypeNull', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field SaleTypes  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldSaleTypes', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_saleTypes', 'saleTypesNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field SaleSubtypes  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldSaleSubtypes', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'subtypeFromAnotherType', 'subtypeWithoutType', 'no_salesSubtype', 'salesSubtypeNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field FinancialBrands */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldFinancialBrands', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_financialBrand', 'financialBrandNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field FactorySubsidy */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldFactorySubsidy', JSON.stringify(['string', 'number', 'only_space', 'empty', 'no_factorySubsidy', 'factorySubsidyNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field VendorSubsidy  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldVendorSubsidy', JSON.stringify(['string', 'number', 'only_space', 'empty', 'no_vendorSubsidy', 'vendorSubsidyNull', ]));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field ThirdPartiesSubsidy  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldThirdPartiesSubsidy', JSON.stringify(['string', 'number', 'only_space', 'empty', 'no_thirdPartiesSubsidy', 'thirdPartiesSubsidyNull', ]));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Remunerations  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRemunerations', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_remunerations', 'remunerationsNull', 'engineRemuneration', 'difEngineRemuneration', 'inactiveId', 'notPublished', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Delay  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldDelay', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_delay', 'delayNull', 'engineDelay', 'difEngineDelay', 'inactiveId', 'notPublished', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Comissions  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldComissions', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_comissions', 'comissionsNull', 'engineComissions', 'difEngineComissions', 'inactiveId', 'notPublished', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinDownPaymentPercent */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinDownPaymentPercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'biggerThenMaxDownPaymentPercent', 'no_min_no_max', 'only_min', 'minDownPaymentPercentNull', 'min_max_equal']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxDownPaymentPercent */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxDownPaymentPercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'only_max', 'maxDownPaymentPercentNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinLoanAmount */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinLoanAmount', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'biggerThenMaxLoanAmount', 'no_min_no_max', 'only_min', 'minLoanAmountNull', 'min_max_equal']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxLoanAmount  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxLoanAmount', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'only_max', 'maxLoanAmountNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinModelRate */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinModelRate', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'biggerThenMaxModelRate', 'no_min_no_max', 'only_min', 'minModelRateNull', 'min_max_equal']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxModelRate */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxModelRate', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'maxModelRateNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Min6Or7CpfDigits */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMin6Or7CpfDigits', JSON.stringify(['number_3digits', 'flotNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'biggerThenMax6Or7CpfDigits', 'no_min_no_max', 'only_min', 'min6Or7CpfDigitsNull', 'min_max_equal']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Max6Or7CpfDigits */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMax6Or7CpfDigits', JSON.stringify(['number_3digits', 'flotNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'max6Or7CpfDigitsNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinTerm */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinTerm', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit','biggerThenMaxTerm', 'no_min_no_max', 'only_min', 'minTermNull', 'min_max_equal']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxTerm */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxTerm', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'maxTermNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinVehiclePrice */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinVehiclePrice', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'biggerThenMaxVehiclePrice', 'no_min_no_max', 'only_min', 'minVehiclePriceNull', 'min_max_equal']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxVehiclePrice */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxVehiclePrice', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'only_max', 'maxVehiclePriceNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinManufactoryVehicleAge */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinManufactoryVehicleAges', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit','biggerThenMaxManufactoryVehicleAge', 'no_min_no_max', 'only_min', 'minManufactoryVehicleAgeNull', 'min_max_equal']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxManufactoryVehicleAge */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldManufactoryVehicleAge', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty',  'only_max', 'maxManufactoryVehicleAgeNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MinModelVehicleAge */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMinModelVehicleAge', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit','biggerThenMaxModelVehicleAge', 'no_min_no_max', 'only_min', 'minModelVehicleAgeNull', 'min_max_equal']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxModelVehicleAge */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxModelVehicleAge', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'only_max', 'maxModelVehicleAgeNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field MaxProposalValidity */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldMaxProposalValidity', JSON.stringify(['number_3digits', 'floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_proposalValidity', 'proposalValidityNull']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Provinces */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldProvinces', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_provinces', 'provincesNull', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* 27 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field RatingsAbc  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRatingsAbc', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_ratingABC', 'ratingABCNull', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* 28 Declaring array variable with tests cases for Engines_GeneralCriteriaPanel: Field Regionals  */\r",
											"pm.collectionVariables.set('tc_generalCriteriaPanel_fieldRegionals', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_regionals', 'regionalNull', 'inactiveId', 'repeatedMultiplesOptions', 'multiplesOptions']));"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "5fadb94e-d0d9-41e4-986e-8a8a9a4c40bb",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "/* Valid Payload to create an engine: Delay, Payment Plan Category, CDD, Increase and Decrease, RBP Margin, Marketing, Payment Plan, Term, Remuneration, Return, Risk, Minimum Bank Rate, Max Client Rate, Minimum RBP Rate, VME */",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						},
						{
							"name": "Check serviceProducts_fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "2f4e0c5e-0e7a-4e3d-8e92-2a544178a2c8",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_ServicesPanel: Field ProductId*/\r",
											"pm.collectionVariables.set('tc_serviceProducts_fieldProductId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_productId', 'productIdNull', 'inactiveId']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_ServicesPanel: Field SubProductId */\r",
											"pm.collectionVariables.set('tc_serviceProducts_fieldSubProductId', JSON.stringify(['inexistentId', 'string', 'only_space', 'empty', 'no_subProduct', 'subProductNull', 'only_subProduct', 'subProductFromAnotherProduct', 'inactiveId']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_ServicesPanel: Field PeriodInMonths */\r",
											"pm.collectionVariables.set('tc_serviceProducts_fieldPeriodInMonths', JSON.stringify(['inexistent', 'string', 'only_space', 'empty', 'no_periodInMonths', 'periodInMonthsNull', 'periodFromAnotherSubproduct', 'periodFromAnotherProduct', 'only_period', 'multiplesOptions']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_ServicesPanel: Field Kilometrage */\r",
											"pm.collectionVariables.set('tc_serviceProducts_fieldskilometrage', JSON.stringify(['inexistent', 'string', 'only_space', 'empty', 'no_kilometrage', 'kilometrageNull', 'kmFromAnotherSubproduct', 'kmFromAnotherProduct', 'only_km', 'multiplesOptions']));"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "5895470b-2617-489a-95e3-c9de27963d0c",
										"exec": [
											"/* Importing libs, variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
											"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
											"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"const moment = require('moment')\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"\r",
											"})\r",
											"\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating negative/exception scenario to create an engine */\r",
											"\r",
											"/* Validating identifierPanel.productId */ \r",
											"var tc_fieldProductId = JSON.parse(pm.collectionVariables.get('tc_serviceProductsPanel_fieldProductId'))\r",
											"/* tc_fieldProductId = ['inexistentId', 'string', 'only_space', 'empty', 'no_productId', 'productIdNull', 'inactiveId', 'multiplesOptions'] */\r",
											"switch (tc_fieldProductId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.collectionVariables.set('count', i);\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].productId =_.random(10000,11000)\r",
											"            }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId classifierId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].productId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for productId string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"            \r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].productId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for productId with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i); \r",
											"                \r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].productId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty productId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"            \r",
											"    case 'no_productId':\r",
											"        delete payloadEngine.line\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_productId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);  \r",
											"            \r",
											"    case 'productIdNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].productId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null productId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                 //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);  \r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.sendRequest({\r",
											"            method: 'GET',\r",
											"            url: pm.environment.get('baseUrl') + '/dominio/subdominio/productId?status=Off',\r",
											"            header: headerComplete\r",
											"        }, (err, resGet) => {\r",
											"            let id = resGet.json()[0].id\r",
											"\r",
											"            pm.sendRequest({\r",
											"                method: pm.request.method.toString(),\r",
											"                url: pm.request.url.toString(),\r",
											"                headers: headerComplete,\r",
											"                body: payloadEngine.engineCriteria.serviceProducts[0].productId = id\r",
											"            }, (err, res) => {\r",
											"                pm.test('Status 400 for inactive productId', () => {\r",
											"                    pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        })\r",
											"        i=0;\r",
											"        pm.collectionVariables.set('count', i);        \r",
											"   \r",
											"    default:\r",
											"            console.error('Error in TEST script - ServicesProducts Panel - subProductId');\r",
											"            break;      \r",
											"} \r",
											"        \r",
											"   \r",
											"/* Validating identifierPanel.subProductId */ \r",
											"var tc_fieldSubProductId = JSON.parse(pm.collectionVariables.get('tc_serviceProductsPanel_fieldSubProductId'))\r",
											"/* tc_fieldSubProductId = ['inexistentId', 'string', 'only_space', 'empty', 'no_subProduct', 'subProductNull', 'only_subProduct', 'subProductFromAnotherProduct', 'inactiveId', 'multiplesOptions'] */\r",
											"switch (tc_fieldSubProductId[i]) {\r",
											"    case 'inexistentId':\r",
											"        pm.collectionVariables.set('count', i);\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].subProductId =_.random(10000,11000)\r",
											"            }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId classifierId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].subProductId = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for subProductId string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"            \r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].subProductId = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for subProductId with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i); \r",
											"                \r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].subProductId = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty subProductId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"            \r",
											"    case 'no_subProduct':\r",
											"        delete payloadEngine.line\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_subProduct', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);  \r",
											"            \r",
											"    case 'subProductNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].subProductId = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null subProductId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                 //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"        \r",
											"    case 'only_subProduct':\r",
											"        delete payloadEngine.productId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].subProductId = pm.variables.replaceIn('{{$randomInt}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_subProduct', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);  \r",
											"\r",
											"    case 'subProductFromAnotherProduct':\r",
											"\r",
											"    case 'inactiveId':\r",
											"        pm.collectionVariables.set('count', i);\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].subProductId =_.random(10000,11000)\r",
											"            }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistentId classifierId', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                    //VALIDAR MENSAGEM\r",
											"                })\r",
											"            })\r",
											"                i=0;\r",
											"        pm.collectionVariables.set('count', i);        \r",
											"   \r",
											"    default:\r",
											"            console.error('Error in TEST script - ServicesProducts Panel - subProductId');\r",
											"            break;\r",
											"\r",
											"}  \r",
											"\r",
											"\r",
											"/* Validating identifierPanel.periodInMonths */ \r",
											"var tc_fieldPeriodInMonths = JSON.parse(pm.collectionVariables.get('tc_serviceProductsPanel_fieldPeriodInMonths'))\r",
											"/* inexistent', 'string', 'only_space', 'empty', 'no_periodInMonths', 'periodInMonthsNull', 'periodFromAnotherSubproduct', 'periodFromAnotherProduct', 'only_period',  */\r",
											"switch (tc_fieldPeriodInMonths[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].periodInMonths =_.random(10000,11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent periodInMonths', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].periodInMonths = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for periodInMonths string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"            \r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].periodInMonths = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for periodInMonths with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i); \r",
											"                \r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].periodInMonths = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty periodInMonths', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"            \r",
											"    case 'no_periodInMonths':\r",
											"        delete payloadEngine.periodInMonths\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_periodInMonths', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);  \r",
											"            \r",
											"    case 'periodInMonthsNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].periodInMonths = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null periodInMonths', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                 //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"        \r",
											"    case 'periodFromAnotherSubproduct':\r",
											"\r",
											"    case 'periodFromAnotherProduct':\r",
											"\r",
											"    case 'only_periodInMonths':\r",
											"    delete payloadEngine.productId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].periodInMonths = pm.variables.replaceIn('{{$randomInt}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for only_periodInMonths', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i=0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"     \r",
											"    default:\r",
											"            console.error('Error in TEST script - PeriodInMonths');\r",
											"            break; \r",
											"                \r",
											"} \r",
											"\r",
											"/* Validating identifierPanel.kilometrage */ \r",
											"var tc_fieldKilometrage = JSON.parse(pm.collectionVariables.get('tc_serviceProductsPanel_fieldkilometrage'))\r",
											"/* tc_fieldKilometrage = ['inexistent', 'string', 'only_space', 'empty', 'no_kilometrage', 'kilometrageNull', 'kmFromAnotherSubproduct', 'kmFromAnotherProduct', 'only_km', 'multiplesOptions'] */\r",
											"switch (tc_fieldKilometrage[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].kilometrage =_.random(10000,11000)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent kilometrage', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].kilometrage = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for kilometrage string type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"            \r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].kilometrage = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for kilometrage with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i); \r",
											"                \r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].kilometrage = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty kilometrage', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"            \r",
											"    case 'no_kilometrage':\r",
											"        delete payloadEngine.kilometrage\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_kilometrage', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);  \r",
											"            \r",
											"    case 'kilometrageNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].kilometrage = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for null periodInMonths', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                 //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"        \r",
											"    case 'periodFromAnotherSubproduct':\r",
											"\r",
											"    case 'kmFromAnotherProduct':\r",
											"\r",
											"    case 'only_km':\r",
											"        delete payloadEngine.productId\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.serviceProducts[0].kilometrage = pm.variables.replaceIn('{{$randomInt}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for only_periodInMonths', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i=0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"                \r",
											"    \r",
											"    \r",
											"    default:\r",
											"            console.error('Error in TEST script - kilometrage');\r",
											"            break;      \r",
											"} \r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "c9cc868d-2cab-458c-a5c5-e634129bdd75",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": []
							},
							"response": []
						},
						{
							"name": "Check marketingPanel_fields",
							"event": [
								{
									"listen": "prerequest",
									"script": {
										"id": "78b5c77b-e2cd-4a74-a896-44b42056542e",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field BusinessActionAmount */\r",
											"pm.collectionVariables.set('tc_marketingPanel_fieldBusinessActionAmount', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_businessAmount', 'businessAmountNull', 'difEngineMarketing']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field BusinessActionPercent */\r",
											"pm.collectionVariables.set('tc_marketingPanel_fieldBusinessActionPercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_businessPercent', 'businessPercentNull', 'difEngineMarketing']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field ContractCostAmount */\r",
											"pm.collectionVariables.set('tc_marketingPanel_fieldContractCostAmount', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_contractCost', 'contractCostNull', 'difEngineMarketing']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field FundingCostPercent */\r",
											"pm.collectionVariables.set('tc_marketingPanel_fieldFundingCostPercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_fundingCost', 'fundingCostNull', 'difEngineMarketing']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field OperationAveragePercent */\r",
											"pm.collectionVariables.set('tc_marketingPanel_fieldOperationAveragePercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_operationAverage', 'operationAverageNull', 'difEngineMarketing']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_MarketingPanel: Field RegistrationFeeAmount */\r",
											"pm.collectionVariables.set('tc_marketingPanel_fieldRegistrationFeeAmount', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_registrationFee', 'registrationFeeNull', 'difEngineMarketing']));\r",
											""
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "test",
									"script": {
										"id": "8a48a94c-560b-48b7-af9a-51741b7013e5",
										"exec": [
											"/* Importing variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"        pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"})\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"\r",
											"payloadEngine.engineType = 'MARKETING'\r",
											"/* Validating engineReturns.marketingPanel.businessActionAmount */\r",
											"var tc_fieldBusinessActionAmount = JSON.parse(pm.collectionVariables.get('tc_marketingPanel_fieldBusinessActionAmount'))\r",
											"/* tc_fieldBusinessActionAmount = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_businessAmount', 'businessAmountNull', 'difEngineMarketing'] */\r",
											"switch (tc_fieldBusinessActionAmount[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = parseFloat(_.random(0, 1, true).toFixed(3))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount with float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = parseFloat(_.random(0, 1, true).toFixed(1))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount with float number 1digit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = parseFloat(-_.random(0, 1, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty businessActionAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = 999999999.99\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for businessActionAmount in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '>999.999.999,99': /* O limite é 1000000000.00? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = 1000000000.00\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_businessAmount':\r",
											"        delete payloadEngine.engineReturns.marketing.businessActionAmount\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_businessAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'businessAmountNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessAmount Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMarketing':\r",
											"        payloadEngine.engineType = 'DELAY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionAmount = 98.90\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionAmount with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.marketing.businessActionAmount');\r",
											"        break;\r",
											"}\r",
											"\r",
											"payloadEngine.engineType = 'MARKETING'\r",
											"/* Validating engineReturns.marketingPanel.businessActionPercent */\r",
											"var tc_fieldBusinessActionPercent = JSON.parse(pm.collectionVariables.get('tc_marketingPanel_fieldBusinessActionPercent'))\r",
											"/* tc_fieldBusinessActionPercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_businessPercent', 'businessPercentNull', 'difEngineMarketing'] */\r",
											"switch (tc_fieldBusinessActionPercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionPercent with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionPercent with float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionPercent with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionPercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionPercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionPercent with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty businessActionPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for thirdPartySubsidyPERCENT in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_businessPercent':\r",
											"        delete payloadEngine.engineReturns.marketing.businessActionPercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_businessPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'businessPercentNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessPercent Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMarketing':\r",
											"        payloadEngine.engineType = 'DELAY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.businessActionPercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for businessActionPercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.marketing.businessActionPercent');\r",
											"        break;\r",
											"}\r",
											"\r",
											"payloadEngine.engineType = 'MARKETING'\r",
											"/* Validating engineReturns.marketingPanel.contractCostAmount */\r",
											"var tc_fieldContractCostAmount = JSON.parse(pm.collectionVariables.get('tc_marketingPanel_fieldContractCostAmount'))\r",
											"/* tc_fieldBusinessActionAmount = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_contractCost', 'contractCostNull', 'difEngineMarketing'] */\r",
											"switch (tc_fieldContractCostAmount[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = parseFloat(_.random(0, 1, true).toFixed(3))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount with float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = parseFloat(_.random(0, 1, true).toFixed(1))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount with float number 1digit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = parseFloat(-_.random(0, 1, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty contractCostAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = 999999999.99\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for contractCostAmount in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '>999.999.999,99': /* O limite é 1000000000.00? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = 1000000000.00\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_contractCost':\r",
											"        delete payloadEngine.engineReturns.marketing.contractCostAmount\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_contractCost', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'contractCostNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCost Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMarketing':\r",
											"        payloadEngine.engineType = 'DELAY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.contractCostAmount = 98.90\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for contractCostAmount with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.marketing.contractCostAmount');\r",
											"        break;\r",
											"}\r",
											"\r",
											"payloadEngine.engineType = 'MARKETING'\r",
											"/* Validating engineReturns.marketingPanel.fundingCostPercent */\r",
											"var tc_fieldFundingCostPercent = JSON.parse(pm.collectionVariables.get('tc_marketingPanel_fieldFundingCostPercent'))\r",
											"/* tc_fieldFundingCostPercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_fundingCost', 'fundingCostNull', 'difEngineMarketing'] */\r",
											"switch (tc_fieldFundingCostPercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fundingCostPercent with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fundingCostPercent with float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fundingCostPercent with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fundingCostPercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fundingCostPercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fundingCostPercent with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fundingCostPercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for thirdPartySubsidyPERCENT in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_fundingCost':\r",
											"        delete payloadEngine.engineReturns.marketing.fundingCostPercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_fundingCost', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'fundingCostNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fundingCost Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMarketing':\r",
											"        payloadEngine.engineType = 'DELAY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.fundingCostPercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fundingCostPercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.marketing.fundingCostPercent');\r",
											"        break;\r",
											"}\r",
											"\r",
											"payloadEngine.engineType = 'MARKETING'\r",
											"/* Validating engineReturns.marketingPanel.operationAveragePercent */\r",
											"var tc_fieldOperationAveragePercent = JSON.parse(pm.collectionVariables.get('tc_marketingPanel_fieldOperationAveragePercent'))\r",
											"/* tc_fieldOperationAveragePercent = ['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_operationAverage', 'operationAverageNull', 'difEngineMarketing'] */\r",
											"switch (tc_fieldOperationAveragePercent[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for operationAveragePercent with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = parseFloat(_.random(0, 1, true).toFixed(5))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for operationAveragePercent with float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = parseFloat(-_.random(0, 1, true).toFixed(4))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for operationAveragePercent with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for operationAveragePercent type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for operationAveragePercent equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for operationAveragePercent with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty operationAveragePercent', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* O limite é 1.0000? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = 0.9999\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for thirdPartySubsidyPERCENT in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for thirdPartySubsidyPERCENT above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_operationAverage':\r",
											"        delete payloadEngine.engineReturns.marketing.operationAveragePercent\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_operationAverage', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'operationAverageNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for operationAverage Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMarketing':\r",
											"        payloadEngine.engineType = 'DELAY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.operationAveragePercent = 0.1234\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for operationAveragePercent with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.marketing.operationAveragePercent');\r",
											"        break;\r",
											"}\r",
											"\r",
											"payloadEngine.engineType = 'MARKETING'\r",
											"/* Validating engineReturns.marketingPanel.registrationFeeAmount */\r",
											"var tc_fieldRegistrationFeeAmount = JSON.parse(pm.collectionVariables.get('tc_marketingPanel_fieldRegistrationFeeAmount'))\r",
											"/* tc_fieldRegistrationFeeAmount = ['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'no_registrationFee', 'registrationFeeNull', 'difEngineMarketing'] */\r",
											"switch (tc_fieldRegistrationFeeAmount[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount with intNumber', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = parseFloat(_.random(0, 1, true).toFixed(3))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount with float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = parseFloat(_.random(0, 1, true).toFixed(1))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount with float number 1digit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = parseFloat(-_.random(0, 1, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount type string', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty registrationFeeAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = 999999999.99\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for registrationFeeAmount in the limit', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '>999.999.999,99': /* O limite é 1000000000.00? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = 1000000000.00\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount above the limit', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_registrationFee':\r",
											"        delete payloadEngine.engineReturns.marketing.registrationFeeAmount\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_registrationFee', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'registrationFeeNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFee Null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEngineMarketing':\r",
											"        payloadEngine.engineType = 'DELAY'\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.marketing.registrationFeeAmount = 98.90\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for registrationFeeAmount with different engineType', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - engineReturns.marketing.registrationFeeAmount');\r",
											"        break;\r",
											"}\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "642913e5-fc4a-4dde-842e-518d407efaa2",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": []
							},
							"response": []
						}
					],
					"id": "c5e97f08-f756-40b2-95dc-c569bbcbb0eb"
				},
				{
					"name": "Fazendo SwitchCases",
					"item": [
						{
							"name": "[Filipe] Check paymentPlansPanel_fields",
							"event": [
								{
									"listen": "test",
									"script": {
										"id": "d03b2084-5603-4856-b7d4-d7215a274011",
										"exec": [
											"/* Importing variables and functions */\r",
											"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'));\r",
											"var i = pm.collectionVariables.get('count')\r",
											"var changeSubFields = eval(pm.globals.get('bodyChangeSubField'))\r",
											"var changeMoreFields = eval(pm.globals.get('bodyChangeMoreFields'))\r",
											"var changeOneFields = eval(pm.globals.get('bodyChangeOneField'))\r",
											"var headerComplete = eval(pm.globals.get('setHeader'))()\r",
											"var lodash = require('lodash')\r",
											"/* Validating positive scenarios to create an engine */\r",
											"//Default validation: 1. Status code, 2. response header. 3. creation in database , 4. Response time\r",
											"/* 1 */\r",
											"pm.test('Status code 201 to create an engine', () => {\r",
											"    pm.response.to.have.status(201);\r",
											"})\r",
											"/* 2 */\r",
											"pm.test('Response header contains location with id', () => {\r",
											"    let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"    pm.response.to.be.header('Location', `/policies/${id}`);\r",
											"})\r",
											"/* 3 */\r",
											"let id = pm.response.headers.get('Location').split('/policies/')[1]\r",
											"let url_get = pm.environment.get('baseUrl') + pm.collectionVariables.get('domain') + `${id}`\r",
											"let options = {\r",
											"    method: 'GET',\r",
											"    url: url_get,\r",
											"    header: headerComplete\r",
											"}\r",
											"pm.sendRequest(options, (err, res) => {\r",
											"    pm.test('Engine has been created in the database'), () => {\r",
											"       pm.expect(res).to.have.status(200)\r",
											"        pm.expect(res.engineId).to.eql(id)\r",
											"    }\r",
											"})\r",
											"/* 4 */\r",
											"pm.test(\"Response time is less than 5000ms\", () => {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"/* Validating identifierPanel.engineType */\r",
											"var tc__fieldPaymentPlanName = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldPaymentPlanName'))\r",
											"/* tc_fieldPaymentPlanName = ['number', '>_1milCharacter', 'no_name', 'name_null', 'difEnginePaymentPlan'] */\r",
											"\r",
											"switch (tc_fieldPaymentPlanName[i]) {\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"PaymentPlanName\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for PaymentPlanName number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case '>_1milCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"PaymentPlanName\", pm.variables.replaceIn('{{$randomLoremParagraphs}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 200 for PaymentPlanName  >_1milCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(200);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_name':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"PaymentPlanName\", pm.variables.replaceIn(''))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for PaymentPlanName no_name', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"        \r",
											"    case 'name_null':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"PaymentPlanName\", pm.variables.replaceIn('Null'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for PaymentPlanName name_null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].paymentPlanName = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for PaymentPlanName difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - PaymentPlanName');\r",
											"    break;\r",
											"\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DownPayment */\r",
											"var tc_fieldDownPayment = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldDownPayment'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldDownPayment', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_downPayment', 'downPaymentNull', \r",
											"'multiplesOptions', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldDownPayment[i]) {\r",
											"    case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldDownPayment\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent fieldDownPayment', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldDownPayment\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDownPayment number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"fieldDownPayment\", \"fieldDownPayment\", \"  \")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDownPayment with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"fieldDownPayment\", \"fieldDownPayment\", \"\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldDownPayment', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);    \r",
											"\r",
											"    case 'no_downPayment':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldDownPayment\", pm.variables.replaceIn(''))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDownPayment no_name', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'downPaymentNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldDownPayment\", pm.variables.replaceIn('Null'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDownPayment null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldDownPayment\", ['Delay', 'CDD'])\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for multiplesOptions fieldDownPayment', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].tc_fieldDownPayment = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDownPayment difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldDownPayment');\r",
											"    break;\r",
											"\r",
											"    /* When DownPayment = 'PERCENT' */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinDownPayment% */\r",
											"var tc_fieldMinDownPaymentPERCENT = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldMinDownPaymentPERCENT'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMinDownPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space',\r",
											"'empty', 'limit', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldMinDownPaymentPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentPERCENT = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldMinDownPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentPERCENT wit float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].percent = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentPERCENT = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentPERCENT string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentPERCENT = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentPERCENT equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentPERCENT = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentPERCENT = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldMinDownPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentPERCENT = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldMinDownPaymentPERCENT = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].tc_fieldMinDownPaymentPERCENT = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentPERCENT difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldMinDownPaymentPERCENT');\r",
											"    break;\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxDownPayment% */\r",
											"var tc_fieldMaxDownPaymentPERCENT = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldMaxDownPaymentPERCENT'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMaxDownPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', \r",
											"'empty', 'limit', 'maxDownPercentNull', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldMaxDownPaymentPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentPERCENT = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldMaxDownPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentPERCENT = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentPERCENT wit float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentPERCENT = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentPERCENT = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentPERCENT string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentPERCENT = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentPERCENT equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentPERCENT = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentPERCENT = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldMaxDownPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentPERCENT = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldMaxDownPaymentPERCENT = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'maxDownPercentNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldMaxDownPaymentPERCENT = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentPERCENT null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldMaxDownPaymentPERCENT = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentPERCENT difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldMaxDownPaymentPERCENT');\r",
											"    break;\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultDownPayment% */\r",
											"var tc_fieldDefaultDownPaymentPERCENT = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldDefaultDownPaymentPERCENT'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldDefaultDownPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero',\r",
											"'only_space', 'empty', 'limit', 'no_defaultDown', 'defaultDownNull', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldDefaultDownPaymentPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentPERCENT = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldDefaultDownPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentPERCENT = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentPERCENT wit float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentPERCENT = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentPERCENT = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentPERCENT string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentPERCENT = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentPERCENT equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentPERCENT = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentPERCENT = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldDefaultDownPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentPERCENT = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldDefaultDownPaymentPERCENT = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'maxDownPercentNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldDefaultDownPaymentPERCENT = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentPERCENT null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_defaultDown':\r",
											"        delete payloadEngine.engineReturns.defaultDown[0].defaultDown\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_defaultDown', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'defaultDownNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.commissions[0].defaultDown = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for defaultDownNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldDefaultDownPaymentPERCENT = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentPERCENT difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldDefaultDownPaymentPERCENT');\r",
											"    break; \r",
											"\r",
											"/* When DownPayment = 'MONETARY' */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinDownPayment$ */\r",
											"var tc_fieldMinDownPaymentMONETARY = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldMinDownPaymentMONETARY'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMinDownPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', \r",
											"'zero', 'only_space', 'empty', 'limit', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldMinDownPaymentMONETARY[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldMinDownPaymentMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentMONETARY wit float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentMONETARY wit float number 1digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentMONETARY with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentMONETARY string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentMONETARY equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentMONETARY with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldMinDownPaymentMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMinDownPaymentMONETARY = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldMinDownPaymentMONETARY = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldMinDownPaymentMONETARY = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMinDownPaymentMONETARY difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldMinDownPaymentMONETARY');\r",
											"    break;\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxDownPayment$ */\r",
											"var tc_fieldMaxDownPaymentMONETARY = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldMaxDownPaymentMONETARY'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMaxDownPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', \r",
											"'zero', 'only_space', 'empty', 'limit','maxDownMonetaryNull', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldMaxDownPaymentMONETARY[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldMaxDownPaymentMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentMONETARY wit float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentMONETARY wit float number 1digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentMONETARY with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentMONETARY string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentMONETARY equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentMONETARY with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldMaxDownPaymentMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMaxDownPaymentMONETARY = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldMaxDownPaymentMONETARY = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'maxDownPercentNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldMaxDownPaymentMONETARY = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentMONETARY null', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldMaxDownPaymentMONETARY = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMaxDownPaymentMONETARY difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldMaxDownPaymentMONETARY');\r",
											"    break;\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultDownPayment$ */\r",
											"var tc_fieldDefaultDownPaymentMONETARY = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldDefaultDownPaymentMONETARY'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldDefaultDownPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', \r",
											"'string', 'zero', 'only_space', 'empty', 'limit', 'no_defaultDown', 'defaultDownNull', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldDefaultDownPaymentMONETARY[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldDefaultDownPaymentMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_3digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentMONETARY wit float number 3digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_1digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentMONETARY wit float number 1digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentMONETARY with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentMONETARY string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentMONETARY equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentMONETARY with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldDefaultDownPaymentMONETARY', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldDefaultDownPaymentMONETARY = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldDefaultDownPaymentMONETARY = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_defaultDown':\r",
											"        delete payloadEngine.engineReturns.defaultDown[0].defaultDown\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_defaultDown', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'defaultDownNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldDefaultDownPaymentMONETARY[0].defaultDown = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for defaultDownNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldDefaultDownPaymentMONETARY = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldDefaultDownPaymentMONETARY difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldDefaultDownPaymentMONETARY');\r",
											"    break;    \r",
											"\r",
											"\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Occurrencies */\r",
											"var tc_fieldOccurrencies = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldOccurrencies'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldOccurrencies', JSON.stringify(['string', 'number', 'specialCharacter', 'only_space', 'empty', 'no_occurrencies',\r",
											"'occurrenciesNull', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldOccurrencies[i]) {\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldOccurrencies = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldOccurrencies string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldOccurrencies\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldOccurrencies number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria[0].fieldOccurrencies = '@&~^*_+-./%!()'\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldOccurrencies with specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldOccurrencies = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldOccurrencies with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldOccurrencies = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_occurrencies':\r",
											"        delete payloadEngine.engineReturns.fieldOccurrencies[0].fieldOccurrencies\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_occurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'occurrenciesNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldOccurrencies[0].occurrencies = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for occurrenciesNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldOccurrencies = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldOccurrencies difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - ieldOccurrencies');\r",
											"    break; \r",
											"\r",
											"\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: FieldInstallmentOccurrencies */\r",
											"var tc_fieldInstallmentOccurrencies = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldInstallmentOccurrencies'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldInstallmentOccurrencies', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', \r",
											"'no_installmentOccurrencies', 'installmentOccurrenciesNull', 'limit', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldInstallmentOccurrencies[i]) {\r",
											"\r",
											"   case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = parseFloat(_.random(1, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for terms type number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);     \r",
											"\r",
											"     case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldInstallmentOccurrencies = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldInstallmentOccurrencies with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldInstallmentOccurrencies = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldInstallmentOccurrencies string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldInstallmentOccurrencies = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldInstallmentOccurrencies with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldInstallmentOccurrencies = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldInstallmentOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_installmentOccurrencies':\r",
											"        delete payloadEngine.engineReturns.fieldInstallmentOccurrencies[0].fieldInstallmentOccurrencies\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_installmentOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'installmentOccurrenciesNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldInstallmentOccurrencies[0].fieldInstallmentOccurrencies = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for installmentOccurrenciesNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldInstallmentOccurrencies = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldInstallmentOccurrencies = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldInstallmentOccurrencies = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldOccurrencies difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldOccurrencies');\r",
											"        break;\r",
											"\r",
											"\r",
											"/** Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MonthOccurrencies */\r",
											"var tc_fieldMonthOccurrencies = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldMonthOccurrencies'))\r",
											"/* pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMonthOccurrencies', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_month', \r",
											"'monthNull', 'only_occurrenceType', 'difOccurrencyTypeMonth', 'difEnginePaymentPlan', 'multiplesOptions'])); */\r",
											"\r",
											"switch (tc_fieldMonthOccurrencies[i]) {\r",
											"     case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldMonthOccurrencies\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent fieldMonthOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldMonthOccurrencies\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMonthOccurrencies number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"fieldMonthOccurrencies\", \"fieldMonthOccurrencies\", \"@&~^*_+-./%!()\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMonthOccurrencies specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMonthOccurrencies = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMonthOccurrencies with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldMonthOccurrencies = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldMonthOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_month':\r",
											"        delete payloadEngine.engineReturns.fieldMonthOccurrencies[0].fieldMonthOccurrencies\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_month', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'monthNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldMonthOccurrencies[0].fieldMonthOccurrencies = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for monthNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldMonthOccurrencies = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldMonthOccurrencies difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.fieldMonthOccurrencies = ['PF', 'PJ']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for multiples fieldMonthOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldMonthOccurrencies');\r",
											"        break;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: FieldFrequencyOccurrencies */\r",
											"var tc_fieldFrequencyOccurrencies = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldFrequencyOccurrencies'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldFrequencyOccurrencies', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', \r",
											"'no_installmentOccurrencies', 'installmentOccurrenciesNull', '1', '12', '>12', 'difOccurrencyTypeFrequency', 'difEnginePaymentPlan', 'multiplesOptions']));*/\r",
											"\r",
											"switch (tc_fieldFrequencyOccurrencies[i]) {\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = parseFloat(_.random(1, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFrequencyOccurrencies number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);     \r",
											"\r",
											"     case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldFrequencyOccurrencies = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFrequencyOccurrencies with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldFrequencyOccurrencies = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFrequencyOccurrencies string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldFrequencyOccurrencies = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFrequencyOccurrencies equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldFrequencyOccurrencies = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFrequencyOccurrencies with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldFrequencyOccurrencies = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldFrequencyOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_installmentOccurrencies':\r",
											"        delete payloadEngine.engineReturns.fieldMonthOccurrencies[0].fieldFrequencyOccurrencies\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_installmentOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'installmentOccurrenciesNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldFrequencyOccurrencies[0].fieldFrequencyOccurrencies = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for monthNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldFrequencyOccurrencies = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldFrequencyOccurrencies difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.fieldFrequencyOccurrencies = ['PF', 'PJ']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for multiples fieldFrequencyOccurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldFrequencyOccurrencies');\r",
											"        break;\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field ReducedInstallmentAmount */\r",
											"var tc_fieldsReducedInstallmentAmount = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldsReducedInstallmentAmount'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsReducedInstallmentAmount', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', \r",
											"'no_reducedInstallment', 'reducedInstallmentNull', 'limitDefault', '>99', 'limitMaxTerm-1', '>=_maxTerm', 'difReducedInstallment', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldsReducedInstallmentAmount[i]) {\r",
											"    case 'floatNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: payloadEngine.engineReturns.terms[0] = parseFloat(_.random(1, 10, true).toFixed(2))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsReducedInstallmentAmount number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);     \r",
											"\r",
											"     case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsReducedInstallmentAmount = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsReducedInstallmentAmount with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsReducedInstallmentAmount = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsReducedInstallmentAmount string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldsReducedInstallmentAmount = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsReducedInstallmentAmount equals zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsReducedInstallmentAmount = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsReducedInstallmentAmount with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsReducedInstallmentAmount = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldsReducedInstallmentAmount', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_reducedInstallment':\r",
											"        delete payloadEngine.engineReturns.fieldMonthOccurrencies[0].fieldsReducedInstallmentAmount\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_reducedInstallment', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'reducedInstallmentNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldsReducedInstallmentAmount[0].fieldsReducedInstallmentAmount = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for reducedInstallmentNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldsReducedInstallmentAmount = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsReducedInstallmentAmount difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"  \r",
											"    default:\r",
											"    console.error('Error in TEST script - fieldFrequencyOccurrencies');\r",
											"    break;\r",
											"\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field InstallmentOccurrency */\r",
											"var tc_fieldsInstallmentOccurrency = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldsInstallmentOccurrency'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsInstallmentOccurrency', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', \r",
											"'no_installmentOccurrency', 'installmentOccurrencyNull', 'no_occurrencies', 'difEnginePaymentPlan', 'multiplesOptions']));*/\r",
											"\r",
											"switch (tc_fieldMonthOccurrencies[i]) {\r",
											"     case 'inexistent':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldsInstallmentOccurrency\", pm.variables.replaceIn('{{$randomWord}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for inexistent fieldsInstallmentOccurrency', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'number':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine, \"fieldsInstallmentOccurrency\", parseInt(pm.variables.replaceIn('{{$randomInt}}')))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsInstallmentOccurrency number type', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'specialCharacter':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: editBody_childKey(payloadEngine, \"fieldsInstallmentOccurrency\", \"fieldsInstallmentOccurrency\", \"@&~^*_+-./%!()\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsInstallmentOccurrency specialCharacter', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsInstallmentOccurrency = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsInstallmentOccurrency with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsInstallmentOccurrency = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldsInstallmentOccurrency', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_installmentOccurrency':\r",
											"        delete payloadEngine.engineReturns.fieldsInstallmentOccurrency[0].fieldsInstallmentOccurrency\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_installmentOccurrency', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'installmentOccurrencyNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldsInstallmentOccurrency[0].fieldsInstallmentOccurrency = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for monthNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_occurrencies':\r",
											"        delete payloadEngine.engineReturns.ffieldsInstallmentOccurrency[0].fieldsInstallmentOccurrency\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_occurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldsInstallmentOccurrency = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsInstallmentOccurrency difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'multiplesOptions':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineCriteria.fieldsInstallmentOccurrency = ['PF', 'PJ']\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for multiples fieldsInstallmentOccurrency', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i = 0;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldsInstallmentOccurrency');\r",
											"    break;\r",
											"\r",
											"\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinFixedPayment% */\r",
											"var tc_fieldsMinFixedPaymentPERCENT = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldsMinFixedPaymentPERCENT'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMinFixedPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', \r",
											"'only_space', 'empty', 'limit', 'biggerThenMaxFixed', 'no_min_no_max', 'only_min', 'minFixedPercentNull', 'min_max_equal', 'no_occurrencies', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldsMaxFixedPaymentPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldsMinFixedPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT wit float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for ffieldsMinFixedPaymentPERCENT string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldsMinFixedPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldsMinFixedPaymentPERCENT = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_occurrencies':\r",
											"        delete payloadEngine.engineReturns.fieldsMinFixedPaymentPERCENT[0].fieldsMinFixedPaymentPERCENT\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_occurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldMaxDownPaymentPERCENT = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldsMinFixedPaymentPERCENT');\r",
											"    break;\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxFixedPayment% */\r",
											"var tc_fieldsMinFixedPaymentPERCENT = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldsMaxFixedPaymentPERCENT'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMaxFixedPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space',\r",
											"'empty', 'limit', 'only_max', 'maxFixedNull', 'no_occurrencies', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldsMinFixedPaymentPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldsMinFixedPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT wit float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldsMinFixedPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsMinFixedPaymentPERCENT = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldsMinFixedPaymentPERCENT = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_occurrencies':\r",
											"        delete payloadEngine.engineReturns.fieldsMinFixedPaymentPERCENT[0].fieldsMinFixedPaymentPERCENT\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_occurrencies', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldMaxDownPaymentPERCENT = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsMinFixedPaymentPERCENT difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldsMinFixedPaymentPERCENT');\r",
											"    break;\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultFixedPayment% */\r",
											"var tc_fieldsDefaultFixedPaymentPERCENT = JSON.parse(pm.collectionVariables.get('tc_engines_PaymentPlansPanel_fieldsDefaultFixedPaymentPERCENT'))\r",
											"/*pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsDefaultFixedPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', \r",
											"'only_space', 'empty', 'limit', '<_MinFixed', '>_MaxFixed', 'no_defaultFixed', 'defaultFixedNull', 'difEnginePaymentPlan']));*/\r",
											"\r",
											"switch (tc_fieldsDefaultFixedPaymentPERCENT[i]) {\r",
											"    case 'intNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsDefaultFixedPaymentPERCENT = parseInt(pm.variables.replaceIn('{{$randomInt}}'))\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for intNumber fieldsDefaultFixedPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'floatNumber_5digits':\r",
											"        let floatNumber = _.random(0, 10, true).toFixed(3)\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsDefaultFixedPaymentPERCENT = parseFloat(floatNumber)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsDefaultFixedPaymentPERCENT wit float number 5digits', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'negativeNumber':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsDefaultFixedPaymentPERCENT = -_.random(0, 100)\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsDefaultFixedPaymentPERCENT with negative number', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'string':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsDefaultFixedPaymentPERCENT = pm.variables.replaceIn('{{$randomWord}}')\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsDefaultFixedPaymentPERCENT string tyoe', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'zero':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsDefaultFixedPaymentPERCENT = 0\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsDefaultFixedPaymentPERCENT equal zero', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'only_space':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsDefaultFixedPaymentPERCENT = \"  \"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsDefaultFixedPaymentPERCENT with only_space', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'empty':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsDefaultFixedPaymentPERCENT = \"\"\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for empty fieldsDefaultFixedPaymentPERCENT', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'limit': /* Como será passado 100%? */\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.cdd[0].fieldsDefaultFixedPaymentPERCENT = 1.0000\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 201 for fieldsDefaultFixedPaymentPERCENT = 100%', () => {\r",
											"                pm.expect(res).to.be.equal(201);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'no_defaultFixed':\r",
											"        delete payloadEngine.engineReturns.fieldsDefaultFixedPaymentPERCENT[0].fieldsDefaultFixedPaymentPERCENT\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for no_defaultFixed', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    case 'defaultFixedNull':\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            header: headerComplete,\r",
											"            body: payloadEngine.engineReturns.fieldsDefaultFixedPaymentPERCENT[0].fieldsDefaultFixedPaymentPERCENT = null\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for defaultFixedNull', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"    \r",
											"    case 'difEnginePaymentPlan':\r",
											"        payloadEngine.engineType = \"VME\"\r",
											"        pm.sendRequest({\r",
											"            method: pm.request.method.toString(),\r",
											"            url: pm.request.url.toString(),\r",
											"            headers: headerComplete,\r",
											"            body: editBody_masterKey(payloadEngine.engineReturns.paymentPlans[0].fieldsDefaultFixedPaymentPERCENT = \"{{$randomNameSuffix}}\")\r",
											"        }, (err, res) => {\r",
											"            pm.test('Status 400 for fieldsDefaultFixedPaymentPERCENT difEnginePaymentPlan', () => {\r",
											"                pm.expect(res).to.be.equal(400);\r",
											"                //VALIDAR MENSAGEM\r",
											"            })\r",
											"        })\r",
											"        i++;\r",
											"        pm.collectionVariables.set('count', i);\r",
											"\r",
											"    default:\r",
											"        console.error('Error in TEST script - fieldsDefaultFixedPaymentPERCENT');\r",
											"    break; "
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"id": "7eb33cb6-97ee-4e8d-bcf6-502c7dbe3942",
										"exec": [
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field PaymentPlanName */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldPaymentPlanName', JSON.stringify(['number', '>_1milCharacter', 'no_name', 'name_null', 'difEnginePaymentPlan']))\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DownPayment */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldDownPayment', JSON.stringify(['inexistent', 'number', 'only_space', 'empty', 'no_downPayment', 'downPaymentNull', 'multiplesOptions', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* When DownPayment = 'PERCENT' */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinDownPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMinDownPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxDownPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMaxDownPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'maxDownPercentNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultDownPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldDefaultDownPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_defaultDown', 'defaultDownNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* When DownPayment = 'MONETARY' */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinDownPayment$ */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMinDownPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxDownPayment$ */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMaxDownPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'maxDownMonetaryNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultDownPayment$ */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldDefaultDownPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'no_defaultDown', 'defaultDownNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field Occurrencies */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldOccurrencies', JSON.stringify(['string', 'number', 'specialCharacter', 'only_space', 'empty', 'no_occurrencies', 'occurrenciesNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field OccurrenceType */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldOccurrenceType', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_occurrenceType', 'occurrenceTypeNull', 'only_occurrenceType', 'difEnginePaymentPlan', 'multiplesOptions']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* When MaxTerm - Engine Criteria Panel is not filled, limit is 99 */\r",
											"\r",
											"/* When MaxTerm - Engine Criteria Panel is filled, it's the limit */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: FieldInstallmentOccurrencies */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldInstallmentOccurrencies', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_installmentOccurrencies', 'installmentOccurrenciesNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MonthOccurrencies */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldMonthOccurrencies', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_month', 'monthNull', 'only_occurrenceType', 'difOccurrencyTypeMonth', 'difEnginePaymentPlan', 'repeatedMultiplesOptions', 'multiplesOptions']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: FieldFrequencyOccurrencies */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldFrequencyOccurrencies', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_installmentOccurrencies', 'installmentOccurrenciesNull', '1', '12', '>12', 'difOccurrencyTypeFrequency', 'difEnginePaymentPlan', 'multiplesOptions']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* When MaxTerm - Engine Criteria Panel is not filled, limit is 99 */\r",
											"\r",
											"/* When MaxTerm - Engine Criteria Panel is filled, the limit is MaxTerm - 1 */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field ReducedInstallmentAmount */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsReducedInstallmentAmount', JSON.stringify(['floatNumber', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'no_reducedInstallment', 'reducedInstallmentNull', 'limitDefault', '>99', 'limitMaxTerm-1', '>=_maxTerm', 'difReducedInstallment', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field InstallmentOccurrency */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsInstallmentOccurrency', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_installmentOccurrency', 'installmentOccurrencyNull', 'no_occurrencies', 'difEnginePaymentPlan', 'multiplesOptions']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* When InstallmentOccurrency = 'PERCENT' */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinFixedPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMinFixedPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'biggerThenMaxFixed', 'no_min_no_max', 'only_min', 'minFixedPercentNull', 'min_max_equal', 'no_occurrencies', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxFixedPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMaxFixedPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'only_max', 'maxFixedNull', 'no_occurrencies', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultFixedPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsDefaultFixedPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '<_MinFixed', '>_MaxFixed', 'no_defaultFixed', 'defaultFixedNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* When InstallmentOccurrency = 'MONETARY' */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinFixedPayment$ */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMinFixedPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'biggerThenMaxFixed', 'no_min_no_max', 'only_min', 'minFixedNull', 'min_max_equal', 'no_occurrencies', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxFixedPayment$ */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMaxFixedPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'only_max', 'maxFixedNull', 'no_occurrencies', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultFixedPayment$ */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsDefaultFixedPaymentMONETARY', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '<_MinFixed', '>_MaxFixed', 'no_defaultFixed', 'defaultFixedNull', 'no_occurrencies', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field BalloonPayment */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsBalloonPayment', JSON.stringify(['string', 'number', 'specialCharacter', 'only_space', 'empty', 'no_balloon', 'balloonNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field BalloonPaymentType */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldssBalloonPaymentType', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_balloonType', 'balloonTypeNull', 'balloonFalse', 'difEnginePaymentPlan', 'multiplesOptions']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* When InstallmentOccurrency = 'PERCENT' */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinBalloonPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMinBalloonPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'biggerThenMaxBalloon', 'no_min_no_max', 'only_min', 'minBalloonNull', 'min_max_equal', 'balloonFalse', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxBalloonPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMaxBalloonPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'only_max', 'maxBalloonNull', 'balloonFalse', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultBalloonPayment% */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsDefaultBalloonPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '<_MinBalloon', '>_MaxBalloon', 'no_defaultBalloon', 'defaultBalloonNull', 'balloonFalse', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* When InstallmentOccurrency = 'MONETARY' */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MinBalloonPayment$*/\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMinBalloonPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'biggerThenMaxBalloon', 'no_min_no_max', 'only_min', 'minBalloonNull', 'min_max_equal', 'balloonFalse', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field MaxBalloonPayment$ */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsMaxBalloonPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_3digits', 'floatNumber_1digit', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '>999.999.999,99', 'only_max', 'maxBalloonNull', 'balloonFalse', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field DefaultBalloonPayment$ */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsDefaultBalloonPaymentPERCENT', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', '<_MinBalloon', '>_MaxBalloon', 'no_defaultBalloon', 'defaultBalloonNull', 'balloonFalse', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field  IncreaseDecreaseInstallment */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsIncreaseDecreaseInstallment', JSON.stringify(['string', 'number', 'specialCharacter', 'only_space', 'empty', 'no_increaseDecrease', 'increaseDecreaseNull', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field InstallmentType */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsInstallmentType', JSON.stringify(['inexistent', 'number', 'specialCharacter', 'only_space', 'empty', 'no_installmentType', 'InstallmentTypeNull', 'installmentFalse', 'difEnginePaymentPlan', 'multiplesOptions']));\r",
											"\r",
											"/* ---------------------------------------- */\r",
											"\r",
											"/* Declaring array variable with tests cases for Engines_PaymentPlansPanel: Field IncreaseDecreaseinstallmentPercent */\r",
											"pm.collectionVariables.set('tc_engines_PaymentPlansPanel_fieldsIncreaseDecreaseinstallmentPercent', JSON.stringify(['intNumber', 'floatNumber_5digits', 'negativeNumber', 'string', 'zero', 'only_space', 'empty', 'limit', 'installmentFalse', 'increaseDecreaseinstallmentPercent', 'difEnginePaymentPlan']));\r",
											"\r",
											"/* ---------------------------------------- */"
										],
										"type": "text/javascript"
									}
								}
							],
							"id": "4f8326b5-3f2d-4e19-9f29-8e5000523a23",
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "POST",
								"header": [],
								"url": "{{baseUrl}}{{domain}}/policies"
							},
							"response": []
						}
					],
					"id": "ba17796b-d376-4a4f-aeaa-103b123b5580"
				}
			],
			"id": "5a0ff4f4-d287-4c02-97bb-51e739eb5199",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "20a11164-ec0b-44e7-a62f-e1c4965216fe",
						"type": "text/javascript",
						"exec": [
							"pm.collectionVariables.set(\"ignore_collectionScript\", false);"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "dc470972-98e2-4c2a-afba-64c5f9916289",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Requests to do",
			"item": [
				{
					"name": "/policies",
					"id": "945aa3f4-75af-4245-ae7e-40979f25ab4f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": "{{baseUrl}}{{domain}}/policies"
					},
					"response": []
				},
				{
					"name": "/policies /:id",
					"id": "5b57a3a8-a0c3-4404-babb-5f0bf769f586",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{domain}}/policies/:id",
							"host": [
								"{{baseUrl}}{{domain}}"
							],
							"path": [
								"policies",
								":id"
							],
							"variable": [
								{
									"id": "e2355dbc-e212-4c87-a1a1-037be6bf1838",
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/policies /:id",
					"id": "393a8107-499c-48e7-9c7e-120f6df5467c",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{domain}}/policies/:id",
							"host": [
								"{{baseUrl}}{{domain}}"
							],
							"path": [
								"policies",
								":id"
							],
							"variable": [
								{
									"id": "0afed5e4-9290-428d-b830-3559430a0770",
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/policies /:id",
					"id": "ef48a8ef-f511-4748-882e-3674975a4196",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}{{domain}}/policies/:id",
							"host": [
								"{{baseUrl}}{{domain}}"
							],
							"path": [
								"policies",
								":id"
							],
							"variable": [
								{
									"id": "0afed5e4-9290-428d-b830-3559430a0770",
									"key": "id",
									"value": null
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "/policies/export",
					"id": "fc67c03f-a8d5-4b09-b3fa-a52b64237b81",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}{{domain}}/policies/export"
					},
					"response": []
				},
				{
					"name": "/policies/import/upload",
					"id": "b05330a1-e655-4072-b688-3e1cfe9279ca",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"url": "{{baseUrl}}{{domain}}/policies/import/upload"
					},
					"response": []
				}
			],
			"id": "3661e4d3-d93d-4949-94f1-44a18a7933b7"
		},
		{
			"name": "[Test_Vini]",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "9414a11a-b443-4455-8c8f-2043c538f945",
						"exec": [
							"pm.collectionVariables.set(\"ignore_collectionScript\", true);\r",
							"\r",
							"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'))\r",
							"var cnpj = eval(pm.globals.get('cnpj'))\r",
							"var cpf = eval(pm.globals.get('cpf'))\r",
							"\r",
							"\r",
							"payloadEngine.engineReturns.fixedRates[0].occurrenceType = 'INSTALLMENT_OCCURRENCIES'\r",
							"payloadEngine.engineReturns.fixedRates[0].term = 13\r",
							"payloadEngine.engineReturns.fixedRates[0].installmentsForOccurrency = 13\r",
							"console.log(payloadEngine)\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "2418673b-0e5a-4ebe-99d4-48fd0430fed0",
						"exec": [
							"/* const schema = {\r",
							"  \"title\": \"Generated schema for Root\",\r",
							"  \"type\": \"object\",\r",
							"  \"properties\": {\r",
							"    \"line\": {\r",
							"      \"type\": \"number\"\r",
							"    },\r",
							"    \"startDate\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"endDate\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"engineType\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"engineStatus\": {\r",
							"      \"type\": \"string\"\r",
							"    },\r",
							"    \"integrationChannels\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"channelId\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"required\": [\r",
							"          \"channelId\"\r",
							"        ]\r",
							"      }\r",
							"    },\r",
							"    \"paymentPlanCategories\": {\r",
							"      \"type\": \"array\",\r",
							"      \"items\": {\r",
							"        \"type\": \"object\",\r",
							"        \"properties\": {\r",
							"          \"paymentPlanCategoryId\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"required\": [\r",
							"          \"paymentPlanCategoryId\"\r",
							"        ]\r",
							"      }\r",
							"    },\r",
							"    \"engineCriteria\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"promoName\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"personType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"saleTypes\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"saleTypeId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"saleTypeId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"saleSubtypes\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"saleSubTypeId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"saleSubTypeId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"financialBrands\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"financialBrandId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"financialBrandId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"callCondition\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"rateType\": {\r",
							"          \"type\": \"string\"\r",
							"        },\r",
							"        \"factorySubsidy\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"vendorSubsidy\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"thirdPartiesSubsidy\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"remunerations\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"remunerationId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"remunerationId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"delays\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"commissions\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"commissionId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"commissionId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"minDownPaymentPercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxDownPaymentPercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minLoanAmount\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxLoanAmount\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minModelRate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxModelRate\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"min6Or7CpfDigits\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"max6Or7CpfDigits\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minTerm\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxTerm\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minVehiclePrice\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxVehiclePrice\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minManufactoryVehicleAge\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxManufactoryVehicleAge\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minModelVehicleAge\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxModelVehicleAge\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxProposalValidity\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"provinces\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"provinceId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"provinceId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"ratingsAbc\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"ratingAbcId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"ratingAbcId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"regionals\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"regionalId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"regionalId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"dealerships\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"filterCategory\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"dealershipBondType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"dealershipId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"dealershipGroupId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"filterCategory\",\r",
							"              \"dealershipBondType\",\r",
							"              \"dealershipId\",\r",
							"              \"dealershipGroupId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"vehicles\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"filterCategory\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"brandId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"modelId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"versionId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"situation\": {\r",
							"                \"type\": \"string\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"filterCategory\",\r",
							"              \"brandId\",\r",
							"              \"modelId\",\r",
							"              \"versionId\",\r",
							"              \"situation\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"serviceProducts\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"productId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"subProductId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"periodInMonths\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"kilometrage\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"productId\",\r",
							"              \"subProductId\",\r",
							"              \"periodInMonths\",\r",
							"              \"kilometrage\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"insuranceProducts\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"productId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"subProductId\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"periodInMonths\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"productId\",\r",
							"              \"subProductId\",\r",
							"              \"periodInMonths\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"renovaction\": {\r",
							"          \"type\": \"boolean\"\r",
							"        },\r",
							"        \"customers\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"cpfCnpj\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"origin\": {\r",
							"                \"type\": \"string\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"cpfCnpj\",\r",
							"              \"origin\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"classifiers\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"classifierId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"classifierId\"\r",
							"            ]\r",
							"          }\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"promoName\",\r",
							"        \"personType\",\r",
							"        \"saleTypes\",\r",
							"        \"saleSubtypes\",\r",
							"        \"financialBrands\",\r",
							"        \"callCondition\",\r",
							"        \"rateType\",\r",
							"        \"factorySubsidy\",\r",
							"        \"vendorSubsidy\",\r",
							"        \"thirdPartiesSubsidy\",\r",
							"        \"remunerations\",\r",
							"        \"delays\",\r",
							"        \"commissions\",\r",
							"        \"minDownPaymentPercent\",\r",
							"        \"maxDownPaymentPercent\",\r",
							"        \"minLoanAmount\",\r",
							"        \"maxLoanAmount\",\r",
							"        \"minModelRate\",\r",
							"        \"maxModelRate\",\r",
							"        \"min6Or7CpfDigits\",\r",
							"        \"max6Or7CpfDigits\",\r",
							"        \"minTerm\",\r",
							"        \"maxTerm\",\r",
							"        \"minVehiclePrice\",\r",
							"        \"maxVehiclePrice\",\r",
							"        \"minManufactoryVehicleAge\",\r",
							"        \"maxManufactoryVehicleAge\",\r",
							"        \"minModelVehicleAge\",\r",
							"        \"maxModelVehicleAge\",\r",
							"        \"maxProposalValidity\",\r",
							"        \"provinces\",\r",
							"        \"ratingsAbc\",\r",
							"        \"regionals\",\r",
							"        \"dealerships\",\r",
							"        \"vehicles\",\r",
							"        \"serviceProducts\",\r",
							"        \"insuranceProducts\",\r",
							"        \"renovaction\",\r",
							"        \"customers\",\r",
							"        \"classifiers\"\r",
							"      ]\r",
							"    },\r",
							"    \"engineReturns\": {\r",
							"      \"type\": \"object\",\r",
							"      \"properties\": {\r",
							"        \"terms\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"delays\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"number\"\r",
							"          }\r",
							"        },\r",
							"        \"commissions\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"commissionId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"commissionId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"remunerations\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"remunerationId\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"remunerationId\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"minMonthlyBankRatePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"maxMonthlyClientRatePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"increaseDecreasePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"paymentPlanCategory\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"paymentPlans\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"paymentPlanName\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"downPayment\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"defaultDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"occurrencies\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"occurrenceType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"installmentOccurrencies\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                  \"type\": \"number\"\r",
							"                }\r",
							"              },\r",
							"              \"monthOccurrencies\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                  \"type\": \"string\"\r",
							"                }\r",
							"              },\r",
							"              \"frequencyOccurrencies\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"reducedInstallmentAmount\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"installmentOccurrency\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minFixedPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxFixedPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"defaultFixedPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"balloonPayment\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"balloonPaymentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"defaultBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"increaseDecreaseInstallment\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"installmentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"increaseDecreaseinstallmentPercent\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"paymentPlanName\",\r",
							"              \"downPayment\",\r",
							"              \"minDownPayment\",\r",
							"              \"maxDownPayment\",\r",
							"              \"defaultDownPayment\",\r",
							"              \"occurrencies\",\r",
							"              \"occurrenceType\",\r",
							"              \"installmentOccurrencies\",\r",
							"              \"monthOccurrencies\",\r",
							"              \"frequencyOccurrencies\",\r",
							"              \"reducedInstallmentAmount\",\r",
							"              \"installmentOccurrency\",\r",
							"              \"minFixedPayment\",\r",
							"              \"maxFixedPayment\",\r",
							"              \"defaultFixedPayment\",\r",
							"              \"balloonPayment\",\r",
							"              \"balloonPaymentType\",\r",
							"              \"minBalloonPayment\",\r",
							"              \"maxBalloonPayment\",\r",
							"              \"defaultBalloonPayment\",\r",
							"              \"increaseDecreaseInstallment\",\r",
							"              \"installmentType\",\r",
							"              \"increaseDecreaseinstallmentPercent\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"vme\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"vmeReturnType\": {\r",
							"              \"type\": \"string\"\r",
							"            },\r",
							"            \"factorySubsidy\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"vendorSubsidy\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"thirdPartySubsidy\": {\r",
							"              \"type\": \"number\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"vmeReturnType\",\r",
							"            \"factorySubsidy\",\r",
							"            \"vendorSubsidy\",\r",
							"            \"thirdPartySubsidy\"\r",
							"          ]\r",
							"        },\r",
							"        \"cdd\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"bonus\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"percent\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"bonus\",\r",
							"              \"percent\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"rbpMarginPercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"minRbpFeePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"marketing\": {\r",
							"          \"type\": \"object\",\r",
							"          \"properties\": {\r",
							"            \"businessActionAmount\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"businessActionPercent\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"contractCostAmount\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"fundingCostPercent\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"operationAveragePercent\": {\r",
							"              \"type\": \"number\"\r",
							"            },\r",
							"            \"registrationFeeAmount\": {\r",
							"              \"type\": \"number\"\r",
							"            }\r",
							"          },\r",
							"          \"required\": [\r",
							"            \"businessActionAmount\",\r",
							"            \"businessActionPercent\",\r",
							"            \"contractCostAmount\",\r",
							"            \"fundingCostPercent\",\r",
							"            \"operationAveragePercent\",\r",
							"            \"registrationFeeAmount\"\r",
							"          ]\r",
							"        },\r",
							"        \"riskRatePercent\": {\r",
							"          \"type\": \"number\"\r",
							"        },\r",
							"        \"fixedRates\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"term\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"delay\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"callCondition\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"downPaymentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxDownPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"balloonPayment\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"balloonPaymentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxBalloonPayment\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"occurrences\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"occurrenceType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"installmentsForOccurrency\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                  \"type\": \"number\"\r",
							"                }\r",
							"              },\r",
							"              \"monthsOfOccurrency\": {\r",
							"                \"type\": \"array\",\r",
							"                \"items\": {\r",
							"                  \"type\": \"number\"\r",
							"                }\r",
							"              },\r",
							"              \"periodicityOfOccurrency\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"reducedInstallmentAmount\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"installmentOccurrency\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"minInstallmentOccurrence\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"maxInstallmentOccurrence\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"descendingIncreasingParcel\": {\r",
							"                \"type\": \"boolean\"\r",
							"              },\r",
							"              \"installmentType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"increaseDecreasePlanPercent\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"monthlyBankRate\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"monthlyClientRate\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"subsidyType\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"factorySubsidy\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"vendorSubsidy\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"thirdPartySubsidy\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"total\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"bankRate\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"clientRate\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"term\",\r",
							"              \"delay\",\r",
							"              \"callCondition\",\r",
							"              \"downPaymentType\",\r",
							"              \"minDownPayment\",\r",
							"              \"maxDownPayment\",\r",
							"              \"balloonPayment\",\r",
							"              \"balloonPaymentType\",\r",
							"              \"minBalloonPayment\",\r",
							"              \"maxBalloonPayment\",\r",
							"              \"occurrences\",\r",
							"              \"occurrenceType\",\r",
							"              \"installmentsForOccurrency\",\r",
							"              \"monthsOfOccurrency\",\r",
							"              \"periodicityOfOccurrency\",\r",
							"              \"reducedInstallmentAmount\",\r",
							"              \"installmentOccurrency\",\r",
							"              \"minInstallmentOccurrence\",\r",
							"              \"maxInstallmentOccurrence\",\r",
							"              \"descendingIncreasingParcel\",\r",
							"              \"installmentType\",\r",
							"              \"increaseDecreasePlanPercent\",\r",
							"              \"monthlyBankRate\",\r",
							"              \"monthlyClientRate\",\r",
							"              \"subsidyType\",\r",
							"              \"factorySubsidy\",\r",
							"              \"vendorSubsidy\",\r",
							"              \"thirdPartySubsidy\",\r",
							"              \"total\",\r",
							"              \"bankRate\",\r",
							"              \"clientRate\"\r",
							"            ]\r",
							"          }\r",
							"        },\r",
							"        \"promotions\": {\r",
							"          \"type\": \"array\",\r",
							"          \"items\": {\r",
							"            \"type\": \"object\",\r",
							"            \"properties\": {\r",
							"              \"couponPrefix\": {\r",
							"                \"type\": \"string\"\r",
							"              },\r",
							"              \"discountPercentage\": {\r",
							"                \"type\": \"number\"\r",
							"              },\r",
							"              \"numberCoupons\": {\r",
							"                \"type\": \"number\"\r",
							"              }\r",
							"            },\r",
							"            \"required\": [\r",
							"              \"couponPrefix\",\r",
							"              \"discountPercentage\",\r",
							"              \"numberCoupons\"\r",
							"            ]\r",
							"          }\r",
							"        }\r",
							"      },\r",
							"      \"required\": [\r",
							"        \"terms\",\r",
							"        \"delays\",\r",
							"        \"commissions\",\r",
							"        \"remunerations\",\r",
							"        \"minMonthlyBankRatePercent\",\r",
							"        \"maxMonthlyClientRatePercent\",\r",
							"        \"increaseDecreasePercent\",\r",
							"        \"paymentPlanCategory\",\r",
							"        \"paymentPlans\",\r",
							"        \"vme\",\r",
							"        \"cdd\",\r",
							"        \"rbpMarginPercent\",\r",
							"        \"minRbpFeePercent\",\r",
							"        \"marketing\",\r",
							"        \"riskRatePercent\",\r",
							"        \"fixedRates\",\r",
							"        \"promotions\"\r",
							"      ]\r",
							"    }\r",
							"  },\r",
							"  \"required\": [\r",
							"    \"line\",\r",
							"    \"startDate\",\r",
							"    \"endDate\",\r",
							"    \"engineType\",\r",
							"    \"engineStatus\",\r",
							"    \"integrationChannels\",\r",
							"    \"paymentPlanCategories\",\r",
							"    \"engineCriteria\",\r",
							"    \"engineReturns\"\r",
							"  ]\r",
							"}\r",
							"\r",
							"pm.test(\"Schema / API contract is valid\", () => {\r",
							"    pm.request.to.have.jsonSchema(schema);\r",
							"});\r",
							"*/\r",
							"/* \r",
							"console.log(pm.variables.replaceIn('{{$randomWord}}')); */"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "05f5d763-a0b2-4c24-a545-da24628fbf29",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-rci-qa.bancorcibrasil.com.br/product/financing-offer/v1/financing-offers?_offset=0&_limit=100&_sort=description",
					"protocol": "https",
					"host": [
						"api-rci-qa",
						"bancorcibrasil",
						"com",
						"br"
					],
					"path": [
						"product",
						"financing-offer",
						"v1",
						"financing-offers"
					],
					"query": [
						{
							"key": "_offset",
							"value": "0"
						},
						{
							"key": "_limit",
							"value": "100"
						},
						{
							"key": "_sort",
							"value": "description"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Test_Ed]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca32f32b-afa7-4391-a90c-b9c301a95836",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "48c6323a-ecd6-4e34-b6b9-8252ea426b1e",
						"exec": [
							"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'))\r",
							"\r",
							"payloadEngine.engineReturns.paymentPlans[0].paymentPlanName = pm.variables.replaceIn(\"{{$randomWord}}\")\r",
							"\r",
							"console.log(payloadEngine)"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "83013374-3a3b-4edf-80eb-09e0ee2a3a17",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-rci-qa.bancorcibrasil.com.br/product/financing-offer/v1/financing-offers?_offset=0&_limit=10&_sort=description",
					"protocol": "https",
					"host": [
						"api-rci-qa",
						"bancorcibrasil",
						"com",
						"br"
					],
					"path": [
						"product",
						"financing-offer",
						"v1",
						"financing-offers"
					],
					"query": [
						{
							"key": "_offset",
							"value": "0"
						},
						{
							"key": "_limit",
							"value": "10"
						},
						{
							"key": "_sort",
							"value": "description"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "[Test_Filipe]",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ca32f32b-afa7-4391-a90c-b9c301a95836",
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "48c6323a-ecd6-4e34-b6b9-8252ea426b1e",
						"exec": [
							"var payloadEngine = JSON.parse(pm.collectionVariables.get('payloadEngine'))\r",
							"/* var nomeFuncao = eval(pm.globals.get('funcao'))\r",
							"nomeFuncao(argumentos) */\r",
							"\r",
							"payloadEngine.engineReturns.paymentPlans[0].paymentPlanName = pm.variables.replaceIn(\"{{$randomLoremParagraphs}}\")\r",
							"\r",
							"console.log(payloadEngine)\r",
							"\r",
							"payloadEngine.engineType = \"VME\"\r",
							"payloadEngine.engineReturns.paymentPlans[0].paymentPlanName = \"Nome do Plano\""
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "df115429-7d5c-42b6-83a9-92f816bdb75d",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "https://api-rci-qa.bancorcibrasil.com.br/product/financing-offer/v1/financing-offers?_offset=0&_limit=10&_sort=description",
					"protocol": "https",
					"host": [
						"api-rci-qa",
						"bancorcibrasil",
						"com",
						"br"
					],
					"path": [
						"product",
						"financing-offer",
						"v1",
						"financing-offers"
					],
					"query": [
						{
							"key": "_offset",
							"value": "0"
						},
						{
							"key": "_limit",
							"value": "10"
						},
						{
							"key": "_sort",
							"value": "description"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "b005d435-264f-4d5b-a66a-3068cea54ffc",
				"type": "text/javascript",
				"exec": [
					"/* This Pre-request is executed only for requests that 'ignore_collectionScript' == false */",
					"if (pm.variables.get('ignore_collectionScript') !== true) {",
					"",
					"    /* Variable access_token receives global function return 'getToken' */",
					"    eval(pm.globals.get(\"getToken\"))();",
					"",
					"    /* Create array with scenaries control */",
					"    pm.collectionVariables.set(\"controlAuth\", JSON.stringify(['access_only', 'client_only', 'no-client_no-access', 'with-client-access']))",
					"",
					"    /* Variable controlAuth receives array created to use in switch and count */",
					"    var controlAuth = JSON.parse(pm.collectionVariables.get(\"controlAuth\"))",
					"    var i = pm.collectionVariables.get(\"count\")",
					"",
					"    /* controlAuth = [\"access_only\",\"client_only\",\"no-client_no-access\",\"with-client-access\"] */",
					"    switch (controlAuth[i]) {",
					"",
					"        case 'access_only':",
					"            pm.request.headers.clear();",
					"            setTimeout(() => { pm.request.headers.add({ key: 'access_token', value: pm.environment.get(\"access_token\") }) }, 3000);",
					"            setTimeout(() => { console.info('Sent request no client_id'); }, 3000)",
					"            break;",
					"",
					"        default:",
					"            console.error('Error in autenthication. Check PRE-request script in the collection');",
					"            break;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "02fb8cbf-3fc8-4440-9e01-50faa1f13ee0",
				"type": "text/javascript",
				"exec": [
					"/* This Tests are executed only for requests that 'ignore_collectionScript' == false */",
					"if (pm.variables.get('ignore_collectionScript') !== true) {",
					"    /* 'Import' collection variables can be use in this script */",
					"    var controlAuth = JSON.parse(pm.collectionVariables.get(\"controlAuth\"))",
					"    var i = parseInt(pm.collectionVariables.get('count'))",
					"",
					"    /* controlAuth = [\"access_only\",\"client_only\",\"no-client_no-access\",\"with-client-access\"] */",
					"    switch (controlAuth[i]) {",
					"        case 'access_only':",
					"            pm.test(\"Status code 401 for request no client_id\", () => {",
					"                pm.response.to.have.status(401);",
					"            });",
					"            pm.test(\"Response body contains expected message\", () => {",
					"                pm.expect(pm.response.text()).to.include(\"Could not find a required APP in the request, identified by HEADER client_id.\");",
					"            });",
					"            i++;",
					"            pm.collectionVariables.set(\"count\", i);",
					"",
					"        case 'client_only':",
					"",
					"            /* Set headers to resend the request */",
					"            pm.request.headers.clear();",
					"            var options = {",
					"                method: pm.request.method.toString(),",
					"                url: pm.request.url.toString(),",
					"                header: { 'client_id': pm.environment.get('client_id') }",
					"            }",
					"            pm.sendRequest(options, (err, res) => {",
					"                pm.test(\"Status code 401 for request no access_token\", () => {",
					"                    pm.expect(res).to.have.status(401);",
					"                });",
					"                pm.test(\"Response body contains expected message\", () => {",
					"                    pm.expect(res.text()).to.include(\"Could not find a required Access Token in the request, identified by HEADER access_token\");",
					"                })",
					"            })",
					"            console.info('Sending request no access_token');",
					"            i++;",
					"            pm.collectionVariables.set(\"count\", i);",
					"",
					"        case 'no-client_no-access':",
					"",
					"            pm.request.headers.clear();",
					"            var options = {",
					"                method: pm.request.method.toString(),",
					"                url: pm.request.url.toString()",
					"            }",
					"            pm.sendRequest(options, (err, res) => {",
					"",
					"                pm.test(\"Status code 401 for request without client_id and access_token\", () => {",
					"                    pm.expect(res).to.have.status(401);",
					"                });",
					"                pm.test(\"Response body contains expected message\", () => {",
					"                    pm.expect(res.text()).to.include(\"Could not find a required APP in the request, identified by HEADER client_id.\");",
					"                })",
					"            })",
					"            console.info('Sent request no access_token and no client_id');",
					"            i++;",
					"            pm.collectionVariables.set(\"count\", i);",
					"",
					"        case 'with-client-access':",
					"",
					"            var options = {",
					"                method: pm.request.method.toString(),",
					"                url: pm.request.url.toString(),",
					"                header: { access_token: pm.environment.get('access_token'), client_id: pm.environment.get('client_id') }",
					"            }",
					"",
					"            pm.sendRequest(options, (err, res) => {",
					"",
					"                pm.test(\"Status code 200 for authenticated request with access_token and client_id\", () => {",
					"                    pm.expect(res.code).to.be.oneOf([201, 206]);",
					"                });",
					"            })",
					"            console.info('Sent authenticated request with access_token and client_id');",
					"            i = 0;",
					"            pm.collectionVariables.set(\"count\", i);",
					"            break;",
					"",
					"        default:",
					"            console.error('Error in autenthication. Check TESTS script in the collection');",
					"            break;",
					"    }",
					"",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"id": "0f711a87-6bfb-4556-82b1-4a999b05d6d3",
			"key": "domain",
			"value": "/financing/offer/v1"
		},
		{
			"id": "c4ea1f92-6afc-424f-b8f8-1a3a53f82731",
			"key": "ignore_collectionScript",
			"value": ""
		},
		{
			"id": "3ef2b342-f3b9-46df-ae44-ca2eb0070150",
			"key": "count",
			"value": "0",
			"type": "string"
		},
		{
			"id": "d757206f-26a3-4578-81b8-4b717b4efb5d",
			"key": "controlAuth",
			"value": ""
		},
		{
			"id": "ed4ec467-eb54-4156-90fd-2ba755dc48c6",
			"key": "payloadEngine",
			"value": ""
		},
		{
			"id": "ce53e26f-b873-480d-a558-e26345bc45fa",
			"key": "tc_identifierPainel_fieldEngineType",
			"value": ""
		},
		{
			"id": "a6d8351b-9f4c-4172-b323-a94e0814e5f2",
			"key": "tc_identifierPainel_fieldLine",
			"value": ""
		},
		{
			"id": "0cc07e8e-add9-4dc1-82ec-4b5253f20cde",
			"key": "tc_identifierPainel_fieldStartDate",
			"value": ""
		},
		{
			"id": "fde1d886-c2f5-4a18-9d4b-8fa9f95d641d",
			"key": "tc_identifierPainel_fieldEndDate",
			"value": ""
		},
		{
			"id": "6d83a173-7b56-4736-8a0b-f66cb9f998bf",
			"key": "tc_identifierPainel_fieldPaymentPlanCategoryIds",
			"value": ""
		},
		{
			"id": "c056cb5d-3b3d-46b1-9b3a-d721984f5136",
			"key": "tc_identifierPainel_fieldCallCondition",
			"value": ""
		},
		{
			"id": "037f8f86-6ed8-4562-9ded-63b56a207313",
			"key": "tc_identifierPainel_fieldIntegrationChannelIds",
			"value": ""
		}
	]
}